$schema: https://azuremlschemas.azureedge.net/latest/pipelineJob.schema.json
type: pipeline

experiment_name: "tensorflow_unet_pets"

# <inputs_and_outputs>
inputs:
  train_images:
    type: uri_folder
    mode: download # pick ro_mount, rw_mount or download
    path: azureml://datastores/dlbenchmarkdatablobstandard/paths/azureml-vision-datasets/pets_segmentation/images
  train_masks:
    type: uri_folder
    mode: download # pick ro_mount, rw_mount or download
    path: azureml://datastores/dlbenchmarkdatablobstandard/paths/azureml-vision-datasets/pets_segmentation/trimaps
  test_images:
    type: uri_folder
    mode: download # pick ro_mount, rw_mount or download
    path: azureml://datastores/dlbenchmarkdatablobstandard/paths/azureml-vision-datasets/pets_segmentation/images
  test_masks:
    type: uri_folder
    mode: download # pick ro_mount, rw_mount or download
    path: azureml://datastores/dlbenchmarkdatablobstandard/paths/azureml-vision-datasets/pets_segmentation/trimaps
# </inputs_and_outputs>

# <jobs>
settings:
  default_datastore: azureml:workspaceblobstore
  continue_on_step_failure: true

jobs:
  train:
    type: command
    component: file:../../components/tensorflow_image_segmentation/spec.yaml
    compute: azureml:gpu-cluster
    resources:
      instance_count: 1 # number of nodes
    distribution:
      type: tensorflow
      worker_count: 1 # needs to match instance_count (!)

    # NOTE: set env var if needed
    environment_variables:
      NCCL_DEBUG: "INFO" # adjusts the level of info from NCCL tests

      # NCCL_TOPO_FILE: "/opt/microsoft/ndv4-topo.xml" # Use specific topology file for A100

      # NCCL_IB_PCI_RELAXED_ORDERING: "1" # Relaxed Ordering can greatly help the performance of Infiniband networks in virtualized environments.
      # NCCL_IB_DISABLE: "1" # force disable infiniband (if set to "1")
      # NCCL_NET_PLUGIN: "none" # to force NET/Plugin off (no rdma/sharp plugin at all)
      # NCCL_NET: "Socket" # to force node-to-node comm to use Socket (slow)
      # NCCL_SOCKET_IFNAME: "eth0" # to force Socket comm to use eth0 (use NCCL_NET=Socket)

      # UCX_IB_PCI_RELAXED_ORDERING: "on"
      # UCX_TLS: "tcp"
      # UCX_NET_DEVICES: "eth0" # if you have Error: Failed to resolve UCX endpoint...

      # CUDA_DEVICE_ORDER: "PCI_BUS_ID" # ordering of gpus

    inputs:
      # data inputs
      train_images: ${{parent.inputs.train_images}}
      train_masks: ${{parent.inputs.train_masks}}
      test_images: ${{parent.inputs.test_images}}
      test_masks: ${{parent.inputs.test_masks}}

      # oxford pets
      images_type: "jpg"
      images_filename_pattern: "(.*)\\.jpg"
      masks_filename_pattern: "(.*)\\.png"
      num_classes: 3

      # data loading
      batch_size: 64
      num_workers: -1 # AUTOTUNE
      prefetch_factor: -1 # AUTOTUNE
      # cache: "memory"

      # model
      model_arch: "unet"
      model_input_size: 160

      # training
      num_epochs: 20
      distributed_backend: "nccl"
      # num_gpus: 2 # to artificially limit number of gpus

# </jobs>
