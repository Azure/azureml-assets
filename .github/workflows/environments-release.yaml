name: environments-release

on:
  push:
    branches:
      - main
      - elesel/build-and-test-before-release
  schedule:
    - cron: '30 6 * * *'
  workflow_dispatch:
    inputs:
      image_dirs:
        description: Image directories
        default: general/src/environments
        required: true

env:
  release_dir: release
  scripts_dir: scripts/environments
  changed_assets_artifact: changed-assets
  releasable_assets_artifact: releasable-assets
  asset_config_filename: asset.yaml

defaults:
  run:
    shell: bash

jobs:
  identify-updated-assets:
    name: Identify updated assets
    runs-on: ubuntu-latest

    steps:
      - name: Clone branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      
      - name: Clone release branch
        uses: actions/checkout@v3
        with:
          ref: release
          fetch-depth: 0
          path: ${{ env.release_dir }}
      
      - name: Use Python 3.8 or newer
        uses: actions/setup-python@v3
        with:
          python-version: '>=3.8'
    
      - name: Install dependencies
        run: pip install -r $scripts_dir/requirements.txt
      
      - id: update-release-branch
        name: Update release branch
        run: python -u $scripts_dir/update_release.py -i "${{ github.event.inputs.image_dirs || 'general/src/environments' }}" -r $release_dir -o ${{ runner.temp }}/$changed_assets_artifact

      - name: Upload changed assets
        uses: actions/upload-artifact@v3
        if: steps.update-release-branch.has_updates
        with:
          name: ${{ env.changed_assets_artifact }}
          path: ${{ runner.temp }}/${{ env.changed_assets_artifact }}
      
      - name: Upload non-testable assets
        uses: actions/upload-artifact@v3
        if: steps.update-release-branch.has_updates
        with:
          name: ${{ env.releasable_assets_artifact }}
          path: |
            ${{ runner.temp }}/${{ env.changed_assets_artifact }}
            !${{ runner.temp }}/${{ env.changed_assets_artifact }}/environment
      
      - id: prepare-matrix
        name: Prepare build and test matrix
        run: |
          os_regex=$(echo "${{ steps.update-release-branch.outputs.env_os_updates }}" | tr ',' '|')
          if [ -z "$os_regex" ]; then os_regex="EMPTY"; fi
          matrix=$(jq -c --arg os_regex "$os_regex" '{ os: map(.os | select(test($os_regex))), include: map(. | select(.os | test($os_regex))) }' .github/includes/build-test-matrix.json)
          echo "::set-output name=matrix::$matrix"

    outputs:
      has_updates: ${{ steps.update-release-branch.has_updates }}
      matrix: ${{ steps.prepare-matrix.outputs.matrix }}

  build-images:
    name: Build and test images
    if: ${{ fromJson(needs.identify-updated-assets.outputs.matrix).os[0] }}
    runs-on: ${{ matrix.runs_on }}
    needs: identify-updated-assets

    strategy:
      matrix: ${{ fromJson(needs.identify-updated-assets.outputs.matrix) }}
    env:
      build_log_dir: build-logs
      build_log_artifact_name: build-logs-${{ matrix.os }}

    steps:
      - name: Download changed assets
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.changed_assets_artifact }}
          path: ${{ runner.temp }}/${{ env.changed_assets_artifact }}
    
      - name: Clone branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      
      - name: Use Python 3.8 or newer
        uses: actions/setup-python@v3
        with:
          python-version: '>=3.8'
    
      - name: Install dependencies
        run: pip install -r $scripts_dir/requirements.txt
      
      - name: Build images
        run: python -u $scripts_dir/build.py -i ${{ runner.temp }}/$changed_assets_artifact -a $asset_config_filename -o ${{ matrix.os }} -l ${{ runner.temp }}/$build_log_dir -d -k IMAGE_NAMES

      - name: Upload build logs
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: ${{ env.build_log_artifact_name }}
          path: ${{ runner.temp }}/${{ env.build_log_dir }}

      - name: Test images
        if: env.IMAGE_NAMES != ''
        run: python -u $scripts_dir/test.py -i ${{ runner.temp }}/$changed_assets_artifact -a $asset_config_filename -o ${{ matrix.os }} -d
      
      - name: Upload tested assets
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.releasable_assets_artifact }}
          path: ${{ runner.temp }}/${{ env.changed_assets_artifact }}

  check-release-assets:
    name: Check releaseable assets
    if: always()
    runs-on: ubuntu-latest
    needs:
      - build-images
      - identify-updated-assets
    
    steps:
      - id: download-artifact
        name: Download releasable assets
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.releasable_assets_artifact }}
          path: ${{ runner.temp }}/${{ env.releasable_assets_artifact }}
        continue-on-error: true
    
      - name: Echo download path
        run: echo ${{ steps.download-artifact.download-path }}

    outputs:
      has_releasable_assets: ${{ steps.download-artifact.download-path }}
  
  release-assets:
    name: Release assets
    if: ${{ needs.check-release-assets.outputs.has_releasable_assets }}
    runs-on: ubuntu-latest
    needs: check-release-assets
    
    steps:
      - id: download-artifact
        name: Download releasable assets
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.releasable_assets_artifact }}
          path: ${{ runner.temp }}/${{ env.releasable_assets_artifact }}
        continue-on-error: true
      
      - name: Clone branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Clone release branch
        uses: actions/checkout@v3
        if: ${{ steps.download-artifact.outputs.download-path }}
        with:
          ref: release
          fetch-depth: 0
          path: ${{ env.release_dir }}

      - name: Use Python 3.8 or newer
        uses: actions/setup-python@v3
        with:
          python-version: '>=3.8'
    
      - name: Install dependencies
        run: pip install -r $scripts_dir/requirements.txt
      
      - name: Update release branch
        run: python -u $scripts_dir/update_release.py -i ${{ runner.temp }}/$_artifact -r $release_dir -c
  
      - name: Create commit and push
        run: |
          if [[ -z $(git status -s) ]]; then
            echo "No updates to the release branch"
            exit 0
          fi
          git config user.email "<>"
          git config user.name "$GITHUB_WORKFLOW"
          git add -A .
          git commit -m "Release $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
          git push
        working-directory: ${{ env.release_dir }}
