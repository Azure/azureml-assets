name: assets-test

on:
  pull_request:
    branches:
      - main
    paths-ignore:
      - .github/**
      - scripts/**
  pull_request_target:
    branches:
      - main
    paths-ignore:
      - .github/**
      - scripts/**
    types:
      - opened
      - labeled
      - synchronize
      - reopened
  workflow_dispatch:
    inputs:
      asset_dirs:
        description: Asset directories
        default: .,!test,!scripts
        required: true

env:
  scripts_azureml_assets_dir: scripts/azureml-assets
  scripts_assets_dir: scripts/azureml-assets/azureml/assets
  scripts_setup_dir: scripts/setup
  asset_config_filename: asset.yaml
  pytest_reports: pytest-reports

defaults:
  run:
    shell: bash

jobs:
  check-execution-context:
    name: Check execution context
    runs-on: ubuntu-latest

    permissions:
      # Required to clone repo
      contents: read

    steps:
      - name: Check execution context
        uses: Azure/azureml-assets/.github/actions/check-execution-context@main
      
    outputs:
      continue: ${{ env.continue }}
      trusted_ref: ${{ env.trusted_ref }}
      testing_ref: ${{ env.testing_ref }}

  setup:
    name: Set up tests
    if: fromJSON(needs.check-execution-context.outputs.continue)
    runs-on: ubuntu-latest
    needs: check-execution-context
    environment: Testing

    permissions:
      # Required to clone repo
      contents: read
      # Required for OIDC login to Azure
      id-token: write
    
    env:
      default_asset_dirs: .,!test,!scripts
      trusted_dir: trusted
      testing_dir: testing
      trusted_ref: ${{ needs.check-execution-context.outputs.trusted_ref }}
      testing_ref: ${{ needs.check-execution-context.outputs.testing_ref }}

    steps:
      - name: Collapse branches
        if: env.testing_ref == null
        run: echo "testing_dir=$trusted_dir" >> $GITHUB_ENV

      - name: Clone trusted branch
        uses: actions/checkout@v3
        with:
          ref: ${{ env.trusted_ref }}
          fetch-depth: 2
          path: ${{ env.trusted_dir }}
      
      - name: Clone testing branch
        if: env.testing_ref != null
        uses: actions/checkout@v3
        with:
          ref: ${{ env.testing_ref }}
          fetch-depth: 2
          path: ${{ env.testing_dir }}
      
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v24
        with:
          path: ${{ env.testing_dir }}
          files_separator: ','
          separator: ','

      - name: Use Python 3.8 or newer
        uses: actions/setup-python@v3
        with:
          python-version: '>=3.8'
    
      - name: Install dependencies
        run: pip install -e $trusted_dir/$scripts_azureml_assets_dir

      - name: Create test matrix for changed assets
        id: create-test-matrix
        run: python -u $GITHUB_WORKSPACE/$trusted_dir/$scripts_assets_dir/create_asset_test_matrix.py -i "${{ github.event.inputs.asset_dirs || env.default_asset_dirs }}" -a $asset_config_filename -c "${{ steps.changed-files.outputs.all_modified_files }}"
        working-directory: ${{ env.testing_dir }}

      - name: Login to Azure and create resources
        if: steps.create-test-matrix.outputs.test_count > 0
        uses: Azure/azureml-assets/.github/actions/create-azure-resources@main
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          scripts-setup-dir: ${{ env.trusted_dir }}/${{ env.scripts_setup_dir }}
    
    outputs:
      test_count: ${{ steps.create-test-matrix.outputs.test_count }}
      matrix: ${{ steps.create-test-matrix.outputs.matrix }}
      
  test:
    name: Test 
    if: needs.setup.outputs.test_count > 0
    runs-on: ubuntu-latest
    needs: setup
    environment: Testing
    strategy:
      matrix: ${{ fromJSON(needs.setup.outputs.matrix) }}
      fail-fast: false
    
    permissions:
      # Required to clone repo
      contents: read
      # Required for OIDC login to Azure
      id-token: write
    
    env:
      package_versions_file: scripts/test-requirements.txt
      trusted_dir: trusted
      testing_dir: testing
      trusted_ref: ${{ needs.check-execution-context.outputs.trusted_ref }}
      testing_ref: ${{ needs.check-execution-context.outputs.testing_ref }}

    steps:
      - name: Collapse branches
        if: env.testing_ref == null
        run: echo "testing_dir=$trusted_dir" >> $GITHUB_ENV

      - name: Clone trusted branch
        uses: actions/checkout@v3
        with:
          ref: ${{ env.trusted_ref }}
          fetch-depth: 0
          path: ${{ env.trusted_dir }}
      
      - name: Clone testing branch
        if: env.testing_ref != null
        uses: actions/checkout@v3
        with:
          ref: ${{ env.testing_ref }}
          fetch-depth: 0
          path: ${{ env.testing_dir }}
      
      - name: Use Python 3.8 or newer
        uses: actions/setup-python@v3
        with:
          python-version: '>=3.8'
    
      - name: Install dependencies
        run: pip install -e $trusted_dir/$scripts_azureml_assets_dir

      - name: Log in to Azure and create resources
        uses: Azure/azureml-assets/.github/actions/create-azure-resources@main
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          scripts-setup-dir: ${{ env.trusted_dir }}/${{ env.scripts_setup_dir }}
      
      - name: Test asset
        run: python -u $GITHUB_WORKSPACE/$trusted_dir/$scripts_assets_dir/test_assets.py -i "${{ matrix.asset_config_path }}" -a $asset_config_filename -p $package_versions_file -r $GITHUB_WORKSPACE/$pytest_reports
        working-directory: ${{ env.testing_dir }}

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: ${{ env.pytest_reports }}
          path: ${{ env.pytest_reports }}

  report:
    name: Publish test results
    if: always()
    runs-on: ubuntu-latest
    needs: test

    permissions:
      # Required for EnricoMi/publish-unit-test-result-action
      checks: write
      issues: read
      pull-requests: write

    steps:
      - name: Download test results
        id: download-artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.pytest_reports }}
          path: ${{ env.pytest_reports }}
        continue-on-error: true

      - name: Publish test results
        if: steps.download-artifact.outputs.download-path != ''
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          check_name: Test Results for ${{ github.workflow }}
          junit_files: ${{ env.pytest_reports }}/**/*.xml
