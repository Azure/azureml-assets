name: assets-release

on:
  push:
    branches:
      - main
      - elesel/build-and-test-before-release
  schedule:
    - cron: '30 6 * * *'
  workflow_dispatch:
    inputs:
      asset_dirs:
        description: Asset directory
        default: .
        required: true

concurrency: ${{ github.workflow }}

env:
  main_dir: main
  release_dir: release
  scripts_dir: scripts/environments
  changed_assets_artifact: changed-assets
  releasable_assets_artifact: releasable-assets
  asset_config_filename: asset.yaml
  build_test_matrix_template: .github/includes/build-test-matrix.json

defaults:
  run:
    shell: bash

jobs:
  identify-updated-assets:
    name: Identify updated assets
    runs-on: ubuntu-latest

    steps:
      - name: Clone branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          path: ${{ env.main_dir }}
      
      - name: Clone release branch
        uses: actions/checkout@v3
        with:
          ref: release
          fetch-depth: 0
          path: ${{ env.release_dir }}
      
      - name: Use Python 3.8 or newer
        uses: actions/setup-python@v3
        with:
          python-version: '>=3.8'
    
      - name: Install dependencies
        run: pip install -r $main_dir/$scripts_dir/requirements.txt
      
      # TODO: Consider using Git to detect changes
      - id: find-updated-assets
        name: Find updated assets
        run: python -u $main_dir/$scripts_dir/update_assets.py -i "$main_dir/${{ github.event.inputs.asset_dirs || '.' }}" -r $release_dir -o ${{ runner.temp }}/$changed_assets_artifact

      - name: Upload changed assets
        uses: actions/upload-artifact@v3
        if: steps.find-updated-assets.outputs.has_updates
        with:
          name: ${{ env.changed_assets_artifact }}
          path: ${{ runner.temp }}/${{ env.changed_assets_artifact }}
      
      - name: Upload non-testable assets
        uses: actions/upload-artifact@v3
        if: steps.find-updated-assets.outputs.has_updates
        with:
          name: ${{ env.releasable_assets_artifact }}
          path: |
            ${{ runner.temp }}/${{ env.changed_assets_artifact }}
            !${{ runner.temp }}/${{ env.changed_assets_artifact }}/environment
      
      # # Consider using https://github.com/marketplace/actions/conditional-build-matrix
      # - id: create-matrix
      #   name: Create build and test matrix
      #   run: |
      #     os_regex=$(echo "${{ steps.find-updated-assets.outputs.env_os_updates }}" | tr ',' '|')
      #     if [ -z "$os_regex" ]; then os_regex="EMPTY"; fi
      #     build_matrix=$(jq -c --arg os_regex "$os_regex" '{ os: map(.os | select(test($os_regex))), include: map(. | select(.os | test($os_regex))) }' $main_dir/$build_test_matrix_template)
      #     echo "::set-output name=build_matrix::$build_matrix"
      
      - id: create-matrix
        name: Create build and test matrix
        uses: JoshuaTheMiller/conditional-build-matrix@0.0.1
        with:
          inputFile: ${{ env.main_dir }}/${{ env.build_test_matrix_template }}
          filter: '[?contains(`${{ steps.find-updated-assets.outputs.env_os_updates }}`, os)]'

      - name: Debug matrix
        run: echo '${{ steps.create-matrix.outputs.matrix }}'

    outputs:
      has_updates: ${{ steps.find-updated-assets.outputs.has_updates }}
      build_matrix: ${{ steps.create-matrix.outputs.matrix }}

  build-images:
    name: Build and test images
    if: fromJson(needs.identify-updated-assets.outputs.build_matrix).os[0]
    runs-on: ${{ matrix.runs_on }}
    needs: identify-updated-assets

    strategy:
      matrix: ${{ fromJson(needs.identify-updated-assets.outputs.build_matrix) }}
    env:
      build_log_dir: build-logs
      build_log_artifact_name: build-logs-${{ matrix.os }}
      built_dir: built-environments
      tested_dir: tested-environments

    steps:
      - name: Download changed assets
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.changed_assets_artifact }}
          path: ${{ runner.temp }}/${{ env.changed_assets_artifact }}
    
      - name: Clone branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          path: ${{ env.main_dir }}
      
      - name: Use Python 3.8 or newer
        uses: actions/setup-python@v3
        with:
          python-version: '>=3.8'
    
      - name: Install dependencies
        run: pip install -r $main_dir/$scripts_dir/requirements.txt
      
      - name: Build images
        run: python -u $main_dir/$scripts_dir/build.py -i '${{ runner.temp }}'/$changed_assets_artifact -a $asset_config_filename -o '${{ runner.temp }}'/$built_dir -O ${{ matrix.os }} -l '${{ runner.temp }}'/$build_log_dir -k IMAGE_NAMES

      - name: Upload build logs
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: ${{ env.build_log_artifact_name }}
          path: ${{ runner.temp }}/${{ env.build_log_dir }}

      - name: Test images
        if: env.IMAGE_NAMES != ''
        run: python -u $main_dir/$scripts_dir/test.py -i '${{ runner.temp }}'/$built_dir -a $asset_config_filename -o '${{ runner.temp }}'/$tested_dir -O ${{ matrix.os }}
      
      - name: Upload tested assets
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.releasable_assets_artifact }}
          path: ${{ runner.temp }}/${{ env.tested_dir }}

  check-release-assets:
    name: Check releaseable assets
    if: always()
    runs-on: ubuntu-latest
    needs:
      - build-images
      - identify-updated-assets
    
    steps:
      - id: download-artifact
        name: Download releasable assets
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.releasable_assets_artifact }}
          path: ${{ runner.temp }}/${{ env.releasable_assets_artifact }}
        continue-on-error: true
    
      - name: Echo download path
        run: echo ${{ steps.download-artifact.outputs.download-path }}

    outputs:
      has_releasable_assets: ${{ steps.download-artifact.outputs.download-path }}
  
  release-assets:
    name: Release assets
    if: needs.check-release-assets.outputs.has_releasable_assets
    runs-on: ubuntu-latest
    needs: check-release-assets
    
    steps:
      - id: download-artifact
        name: Download releasable assets
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.releasable_assets_artifact }}
          path: ${{ runner.temp }}/${{ env.releasable_assets_artifact }}
      
      - name: Clone branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          path: ${{ env.main_dir }}

      - name: Clone release branch
        uses: actions/checkout@v3
        if: steps.download-artifact.outputs.download-path
        with:
          ref: release
          fetch-depth: 0
          path: ${{ env.release_dir }}

      # TODO: Not needed unless calling update_assets.py
      - name: Use Python 3.8 or newer
        uses: actions/setup-python@v3
        with:
          python-version: '>=3.8'
    
      - name: Install dependencies
        run: pip install -r $main_dir/$scripts_dir/requirements.txt
      
      # TODO: This is overkill, just copy directories without involving this script
      - name: Update release branch
        run: python -u $main_dir/$scripts_dir/update_assets.py -i ${{ runner.temp }}/$_artifact -r $release_dir -c
  
      - name: Create commit and push
        run: |
          if [[ -z $(git status -s) ]]; then
            echo "No updates to the release branch"
            exit 0
          fi
          git config user.email "<>"
          git config user.name "$GITHUB_WORKFLOW"
          git add -A .
          git commit -m "Release $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
          git push
        working-directory: ${{ env.release_dir }}
