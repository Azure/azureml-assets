{
  "flowName": "@@Flow_Name",
  "flow": {
    "flowGraph": {
      "id": "@@Flow_Name",
      "name": "@@Flow_Name",
      "nodes": [
        {
          "name": "embed_the_question",
          "tool": "embed_the_question",
          "inputs": {
            "deployment_name": "@@Embedding_Deployment_Name",
            "input": "${flow.question}"
          },
          "provider": "AzureOpenAI",
          "connection": "@@Embedding_Connection",
          "api": "embedding",
          "module": "promptflow.tools.aoai",
          "reduce": false
        },
        {
          "name": "search_question_from_indexed_docs",
          "tool": "Vector Search",
          "inputs": {
            "path": "@@MLIndex_Asset_Id",
            "query": "${embed_the_question.output}",
            "top_k": "2"
          },
          "reduce": false
        },
        {
          "name": "generate_prompt_context",
          "tool": "generate_prompt_context",
          "inputs": {
            "search_result": "${search_question_from_indexed_docs.output}"
          },
          "reduce": false
        },
        {
          "name": "Prompt_varients",
          "tool": "Prompt_varients",
          "inputs": {
            "contexts": "${generate_prompt_context.output}",
            "question": "${flow.question}"
          },
          "reduce": false
        },
        {
          "name": "answer_the_question_with_context",
          "tool": "answer_the_question_with_context",
          "inputs": {
            "deployment_name": "@@Completion_Deployment_Name",
            "suffix": "",
            "max_tokens": "1000",
            "temperature": "0",
            "top_p": "1.0",
            "logprobs": "",
            "echo": "False",
            "stop": "",
            "presence_penalty": "0",
            "frequency_penalty": "0",
            "best_of": "1",
            "logit_bias": "",
            "prompt_text": "${Prompt_varients.output}"
          },
          "provider": "AzureOpenAI",
          "connection": "@@Completion_Connection",
          "api": "@@API",
          "module": "promptflow.tools.aoai",
          "reduce": false
        }
      ],
      "inputs": {
        "question": {
          "type": "string",
          "is_chat_input": false
        }
      },
      "outputs": {
        "output": {
          "type": "string",
          "reference": "${answer_the_question_with_context.output}",
          "evaluation_only": false,
          "is_chat_output": false
        }
      },
      "tools": [
        {
          "name": "embed_the_question",
          "type": "llm",
          "description": "This is a llm tool",
          "is_builtin": false
        },
        {
          "name": "Vector Search",
          "type": "python",
          "inputs": {
            "path": {
              "name": "path",
              "type": [
                "string"
              ]
            },
            "query": {
              "name": "query",
              "type": [
                "list",
                "string"
              ]
            },
            "top_k": {
              "name": "top_k",
              "type": [
                "int"
              ],
              "default": "5"
            }
          },
          "module": "embeddingstore.tool.vector_index_lookup",
          "class_name": "VectorIndexLookup",
          "function": "search",
          "is_builtin": true
        },
        {
          "name": "generate_prompt_context",
          "type": "python",
          "inputs": {
            "search_result": {
              "name": "search_result",
              "type": [
                "object"
              ]
            }
          },
          "source": "generate_prompt_context.py",
          "code": "from typing import List\nfrom promptflow import tool\nfrom embeddingstore.core.contracts import SearchResultEntity\n\n@tool\ndef generate_prompt_context(search_result: List[dict]) -> str:\n    def format_doc(doc: dict):\n        return f\"Content: {doc['Content']}\\nSource: {doc['Source']}\"\n    \n    SOURCE_KEY = \"source\"\n    URL_KEY = \"url\"\n    \n    retrieved_docs = []\n    for item in search_result:\n\n        entity = SearchResultEntity.from_dict(item)\n        content  = entity.text or \"\"\n        \n        source = \"\"\n        if entity.metadata is not None:\n            if SOURCE_KEY in entity.metadata:\n                if URL_KEY in entity.metadata[SOURCE_KEY]:\n                    source = entity.metadata[SOURCE_KEY][URL_KEY] or \"\"\n        \n        retrieved_docs.append({\n            \"Content\": content,\n            \"Source\": source\n        })\n    doc_string = \"\\n\\n\".join([format_doc(doc) for doc in retrieved_docs])\n    return doc_string\n",
          "function": "generate_prompt_context",
          "is_builtin": false
        },
        {
          "name": "Prompt_varients",
          "type": "prompt",
          "inputs": {
            "contexts": {
              "name": "contexts",
              "type": [
                "string"
              ]
            },
            "question": {
              "name": "question",
              "type": [
                "string"
              ]
            }
          },
          "code": "@@prompt_varient_0",
          "is_builtin": false
        },
        {
          "name": "Prompt_varients__variant_1",
          "type": "prompt",
          "inputs": {
            "contexts": {
              "name": "contexts",
              "type": [
                "string"
              ]
            },
            "question": {
              "name": "question",
              "type": [
                "string"
              ]
            }
          },
          "code": "@@prompt_varient_1",
          "is_builtin": false
        },
        {
          "name": "Prompt_varients__variant_2",
          "type": "prompt",
          "inputs": {
            "contexts": {
              "name": "contexts",
              "type": [
                "string"
              ]
            },
            "question": {
              "name": "question",
              "type": [
                "string"
              ]
            }
          },
          "code": "@@prompt_varient_2",
          "is_builtin": false
        },
        {
          "name": "answer_the_question_with_context",
          "type": "llm",
          "inputs": {
            "prompt_text": {
              "name": "prompt_text",
              "type": [
                "string"
              ]
            }
          },
          "code": "{{prompt_text}}",
          "is_builtin": false
        }
      ]
    },
    "nodeVariants": {
      "embed_the_question": {
        "defaultVariantId": "variant_0",
        "variants": {
          "variant_0": {
            "node": {
              "name": "embed_the_question",
              "tool": "embed_the_question",
              "inputs": {
                "deployment_name": "@@Embedding_Deployment_Name",
                "input": "${flow.question}"
              },
              "provider": "AzureOpenAI",
              "connection": "@@Embedding_Connection",
              "api": "embedding",
              "module": "promptflow.tools.aoai",
              "reduce": false
            }
          }
        }
      },
      "search_question_from_indexed_docs": {
        "defaultVariantId": "variant_0",
        "variants": {
          "variant_0": {
            "node": {
              "name": "search_question_from_indexed_docs",
              "tool": "Vector Search",
              "inputs": {
                "path": "@@MLIndex_Asset_Id",
                "query": "${embed_the_question.output}",
                "top_k": "2"
              },
              "reduce": false
            }
          }
        }
      },
      "generate_prompt_context": {
        "defaultVariantId": "variant_0",
        "variants": {
          "variant_0": {
            "node": {
              "name": "generate_prompt_context",
              "tool": "generate_prompt_context",
              "inputs": {
                "search_result": "${search_question_from_indexed_docs.output}"
              },
              "reduce": false
            }
          }
        }
      },
      "Prompt_varients": {
        "defaultVariantId": "@@Primary_Metric_Name",
        "variants": {
          "@@Primary_Metric_Name": {
            "node": {
              "name": "Prompt_varients",
              "tool": "Prompt_varients",
              "inputs": {
                "contexts": "${generate_prompt_context.output}",
                "question": "${flow.question}"
              },
              "reduce": false
            }
          },
          "@@Second_Metric_Name": {
            "node": {
              "name": "Prompt_varients",
              "tool": "Prompt_varients__variant_1",
              "inputs": {
                "contexts": "${generate_prompt_context.output}",
                "question": "${flow.question}"
              },
              "reduce": false
            }
          },
          "@@Third_Metric_Name": {
            "node": {
              "name": "Prompt_varients",
              "tool": "Prompt_varients__variant_2",
              "inputs": {
                "contexts": "${generate_prompt_context.output}",
                "question": "${flow.question}"
              },
              "reduce": false
            }
          }
        }
      },
      "answer_the_question_with_context": {
        "defaultVariantId": "variant_0",
        "variants": {
          "variant_0": {
            "node": {
              "name": "answer_the_question_with_context",
              "tool": "answer_the_question_with_context",
              "inputs": {
                "deployment_name": "@@Completion_Deployment_Name",
                "suffix": "",
                "max_tokens": "1000",
                "temperature": "0",
                "top_p": "1.0",
                "logprobs": "",
                "echo": "False",
                "stop": "",
                "presence_penalty": "0",
                "frequency_penalty": "0",
                "best_of": "1",
                "logit_bias": "",
                "prompt_text": "${Prompt_varients.output}"
              },
              "provider": "AzureOpenAI",
              "connection": "@@Completion_Connection",
              "api": "@@API",
              "module": "promptflow.tools.aoai",
              "reduce": false
            }
          }
        }
      }
    }
  },
  "flowType": "Default"
}