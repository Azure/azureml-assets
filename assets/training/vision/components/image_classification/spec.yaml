$schema: https://azuremlschemas.azureedge.net/latest/commandComponent.schema.json
type: command

description: Component to finetune AutoML legacy models for image classification.

name: train_image_classification_model
display_name: Image Classification AutoML Legacy Model Finetune
version: 0.0.5

is_deterministic: false

inputs:
  training_data:
    type: mltable
    description: Path to MLTable for training data.
  validation_data:
    type: mltable
    optional: true
    description: Path to MLTable for validation data.
  task_type:
    description: Whether a single image can have multiple labels.
    type: string
    enum: ['image-classification', 'image-classification-multilabel']
  ams_gradient:
    description: Enable ams_gradient when optimizer is adam or adamw.
    type: boolean
    optional: true
  beta1:
    description: Value of beta1 when optimizer is adam or adamw. Must be a float in the range [0, 1].
    type: number
    optional: true
    min: 0
    max: 1
  beta2:
    description: Value of beta2 when optimizer is adam or adamw. Must be a float in the range [0, 1].
    type: number
    optional: true
    min: 0
    max: 1
  checkpoint_frequency:
    description: Frequency to store model checkpoints. Must be a positive integer.
    type: integer
    optional: true
    min: 0
  checkpoint_run_id:
    description: The run ID of the experiment that has a pretrained checkpoint for incremental training.
    type: string
    optional: true
  early_stopping:
    description: Enable early stopping logic during training.
    type: boolean
    optional: true
  early_stopping_patience:
    description: Minimum number of epochs or validation evaluations with no primary metric improvement before the run is stopped. Must be a positive integer.
    type: integer
    optional: true
    min: 1
  early_stopping_delay:
    description: Minimum number of epochs or validation evaluations to wait before primary metric improvement is tracked for early stopping. Must be a positive integer.
    type: integer
    optional: true
    min: 1
  evaluation_frequency:
    description: Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
    type: integer
    optional: true
    min: 1
  gradient_accumulation_step:
    description: Number of forward passes without updating the model weights while accumulating the gradients of those steps, and then using the accumulated gradients to compute the weight updates. Must be a positive integer.
    type: integer
    optional: true
    min: 1
  layers_to_freeze:
    description: How many layers to freeze for your model. For instance, passing 2 as value for seresnext means freezing layer0 and layer1 referring to the below supported model layer info. Must be a positive integer.
    type: integer
    optional: true
    min: 1
  learning_rate:
    description: Initial learning rate.
    type: number
    optional: true
    min: 0
    max: 1
  learning_rate_scheduler:
    description: Type of learning rate scheduler. Must be warmup_cosine or step.
    type: string
    optional: true
    default: warmup_cosine
    enum: ['warmup_cosine', 'step']
  model_name:
    type: string
    description: Model name
    optional: true
  momentum:
    description: Value of momentum when optimizer is sgd. Must be a float in the range [0, 1].
    type: number
    optional: true
    min: 0
    max: 1
  nesterov:
    description: Enable nesterov when optimizer is sgd.
    type: boolean
    optional: true
  number_of_epochs:
    description: Number of training epochs
    type: integer
    optional: true
    min: 1
  number_of_workers:
    description: Number of subprocesses to use for data loading (PyTorch only). 0 means that the data will be loaded in the main process.
    type: integer
    optional: true
  optimizer:
    description: Type of optimizer
    type: string
    optional: true
    default: sgd
    enum: ['sgd', 'adam', 'adamw']
  random_seed:
    description: Random seed that will be set at the beginning of training.
    type: integer
    optional: true
  step_lr_gamma:
    description: Value of gamma when learning rate scheduler is step. Please check for https://learn.microsoft.com/azure/machine-learning/reference-automl-images-hyperparameters more information.
    type: number
    optional: true
    min: 0
    max: 1
  step_lr_step_size:
    description: Value of step size when learning rate scheduler is step. Please check for https://learn.microsoft.com/azure/machine-learning/reference-automl-images-hyperparameters more information.
    type: integer
    optional: true
    min: 0
  training_batch_size:
    description: Training batch size.
    type: integer
    optional: true
    min: 1
  training_crop_size:
    description: Image crop size that's input to your neural network for training dataset. Notes - seresnext doesn't take an arbitrary size. ViT-variants should have the same validation_crop_size and training_crop_size.
    type: integer
    optional: true
    min: 1
  validation_batch_size:
    description: Validation batch size.
    type: integer
    optional: true
    min: 1
  validation_crop_size:
    description: Image crop size that's input to your neural network for validation dataset. Note - seresnext doesn't take an arbitrary size. ViT-variants should have the same validation_crop_size and training_crop_size.
    type: integer
    optional: true
    min: 1
  validation_resize_size:
    description: Image size to which to resize before cropping for validation dataset. Note - seresnext doesn't take an arbitrary size.
    type: integer
    optional: true
    min: 1
  warmup_cosine_lr_cycles:
    description: Value of cosine cycle when learning rate scheduler is warmup_cosine. Please check for https://learn.microsoft.com/azure/machine-learning/reference-automl-images-hyperparameters more information.
    type: number
    optional: true
    min: 0
    max: 1
  warmup_cosine_lr_warmup_epochs:
    description: Value of warmup epochs when learning rate scheduler is warmup_cosine. Please check for https://learn.microsoft.com/azure/machine-learning/reference-automl-images-hyperparameters more information.
    type: integer
    optional: true
    min: 0
  weight_decay:
    description: Value of weight decay used by the optimizer.
    type: number
    optional: true
    min: 0
    max: 1
  weighted_loss:
    description: 0 for no weighted loss, 1 for weighted loss with sqrt (class_weights), 2 for weighted loss with class_weights.
    type: integer
    optional: true

outputs:
  mlflow_model_folder:
    description: Trained MLFlow model.
    type: mlflow_model
  pytorch_model_folder:
    description: Trained Pytorch model.
    type: custom_model

code: ../src

environment: azureml://registries/azureml/environments/automl-dnn-vision-gpu/versions/3

command: >-
  python -m image_classification.run
  --training_data ${{inputs.training_data}}
  $[[--validation_data ${{inputs.validation_data}}]]
  --task_type ${{inputs.task_type}}
  $[[--amsgrad ${{inputs.ams_gradient}}]]
  $[[--beta1 ${{inputs.beta1}}]]
  $[[--beta2 ${{inputs.beta2}}]]
  $[[--checkpoint_frequency ${{inputs.checkpoint_frequency}}]]
  $[[--checkpoint_run_id ${{inputs.checkpoint_run_id}}]]
  $[[--early_stopping ${{inputs.early_stopping}}]]
  $[[--early_stopping_patience  ${{inputs.early_stopping_patience}}]]
  $[[--early_stopping_delay ${{inputs.early_stopping_delay}}]]
  $[[--evaluation_frequency ${{inputs.evaluation_frequency}}]]
  $[[--grad_accumulation_step ${{inputs.gradient_accumulation_step}}]]
  $[[--layers_to_freeze ${{inputs.layers_to_freeze}}]]
  $[[--learning_rate ${{inputs.learning_rate}}]]
  $[[--lr_scheduler ${{inputs.learning_rate_scheduler}}]]
  $[[--model_name ${{inputs.model_name}}]]
  $[[--momentum ${{inputs.momentum}}]]
  $[[--nesterov ${{inputs.nesterov}}]]
  $[[--number_of_epochs ${{inputs.number_of_epochs}}]]
  $[[--number_of_workers ${{inputs.number_of_workers}}]]
  $[[--optimizer ${{inputs.optimizer}}]]
  $[[--random_seed ${{inputs.random_seed}}]]
  $[[--step_lr_gamma ${{inputs.step_lr_gamma}}]]
  $[[--step_lr_step_size ${{inputs.step_lr_step_size}}]]
  $[[--training_batch_size ${{inputs.training_batch_size}}]]
  $[[--train_crop_size ${{inputs.training_crop_size}}]]
  $[[--validation_batch_size ${{inputs.validation_batch_size}}]]
  $[[--valid_crop_size ${{inputs.validation_crop_size}}]]
  $[[--valid_resize_size ${{inputs.validation_resize_size}}]]
  $[[--weight_decay ${{inputs.weight_decay}}]]
  $[[--weighted_loss ${{inputs.weighted_loss}}]]
  --mlflow_model_output ${{outputs.mlflow_model_folder}}
  --pytorch_model_output ${{outputs.pytorch_model_folder}}

distribution:
  type: pytorch
