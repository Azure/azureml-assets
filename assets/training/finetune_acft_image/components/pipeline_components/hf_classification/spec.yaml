$schema: https://azuremlschemas.azureedge.net/latest/pipelineComponent.schema.json
type: pipeline

version: 0.0.8
name: transformers_image_classification_pipeline
display_name: Image Classification HuggingFace Transformers Pipeline
description: Pipeline component for image classification using HuggingFace transformers models.

is_deterministic: false

inputs:
  compute_model_import:
    type: string
    optional: false
    description: Compute to be used for model_import eg. provide 'FT-Cluster' if your compute is named 'FT-Cluster'.

  compute_finetune:
    type: string
    optional: false
    description: Compute to be used for finetune eg. provide 'FT-Cluster' if your compute is named 'FT-Cluster'.

  instance_count:
    type: integer
    default: 1
    optional: true
    description: Number of nodes to be used for finetuning (used for distributed training)

  process_count_per_instance:
    type: integer
    default: 1
    optional: true
    description: Number of gpus to be used per node for finetuning, should be equal to number of gpu per node in the compute SKU used for finetune

  compute_model_evaluation:
    type: string
    optional: true
    description: Compute to be used for model evaluation eg. provide 'FT-Cluster' if your compute is named 'FT-Cluster'

  # ########################### Model Selector Component ########################### #
  # Model family
  model_family:
    type: string
    optional: true
    default: HuggingFaceImage
    enum:
      - HuggingFaceImage
    description: Which framework the model belongs to.

  model_name:
    type: string
    optional: true
    description: Please select models from AzureML Model Assets for all supported models. For HuggingFace models, which are not supported in AuzreML model registry, input HuggingFace model_name here. The Model will be downloaded from HuggingFace hub using this model_name and are subject to third party license terms available on the HuggingFace model details page. It is the user responsibility to comply with the model's license terms.

  pytorch_model:
    type: custom_model
    optional: true
    description: Pytorch Model registered in AzureML Asset.

  mlflow_model:
    type:  mlflow_model
    optional: true
    description: Mlflow Model registered in AzureML Asset.

  download_from_source:
    type: boolean
    optional: true
    default: false
    description: Download model directly from HuggingFace instead of system registry

  # ########################### Finetuning Component ########################### #

  # component input: training mltable
  training_data:
    type: mltable
    optional: false
    description: Path to the mltable of the training dataset.

  # optional component input: validation mltable
  validation_data:
    type: mltable
    optional: true
    description: Path to the mltable of the validation dataset.

  image_width:
    type: integer
    default: -1
    optional: true
    description: Final Image width after augmentation that is input to the network. Default value is -1 which means it would be overwritten by default image width in Hugging Face feature extractor. If either image_width or image_height is set to -1, default value would be used for both width and height.

  image_height:
    type: integer
    default: -1
    optional: true
    description: Final Image height after augmentation that is input to the network. Default value is -1 which means it would be overwritten by default image height in Hugging Face feature extractor. If either image_width or image_height is set to -1, default value would be used for both width and height.

  task_name:
    type: string
    enum:
      - image-classification
      - image-classification-multilabel
    description: Which task the model is solving.

  # primary metric
  metric_for_best_model:
    type: string
    optional: true
    enum:
      - loss
      - f1_score_macro
      - accuracy
      - precision_score_macro
      - recall_score_macro
      - iou
      - iou_macro
      - iou_micro
      - iou_weighted
    description: Specify the metric to use to compare two different models. If left empty, will be chosen automatically based on the task type and model selected.

  # Augmentation parameters
  apply_augmentations:
    type: boolean
    default: true
    optional: true
    description: If set to true, will enable data augmentations for training.

  number_of_workers:
    type: integer
    default: 8
    optional: true
    description: Number of subprocesses to use for data loading (PyTorch only). 0 means that the data will be loaded in the main process.

  # Deepspeed Parameters
  apply_deepspeed:
    type: boolean
    optional: true
    description: If set to true, will enable deepspeed for training. If left empty, will be chosen automatically based on the task type and model selected.

  # optional component input: deepspeed config
  deepspeed_config:
    type: uri_file
    optional: true
    description: Deepspeed config to be used for finetuning.

  apply_ort:
    type: boolean
    optional: true
    description: If set to true, will use the ONNXRunTime training. If left empty, will be chosen automatically based on the task type and model selected.

  # Training parameters
  number_of_epochs:
    type: integer
    optional: true
    description: Number of training epochs. If left empty, will be chosen automatically based on the task type and model selected.

  max_steps:
    type: integer
    optional: true
    description: If set to a positive number, the total number of training steps to perform. Overrides 'number_of_epochs'. In case of using a finite iterable dataset the training may stop before reaching the set number of steps when all data is exhausted. If left empty, will be chosen automatically based on the task type and model selected.

  training_batch_size:
    type: integer
    optional: true
    description: Train batch size. If left empty, will be chosen automatically based on the task type and model selected.

  validation_batch_size:
    type: integer
    optional: true
    description: Validation batch size. If left empty, will be chosen automatically based on the task type and model selected.

  auto_find_batch_size:
    type: boolean
    default: false
    optional: true
    description: Flag to enable auto finding of batch size. If the provided 'per_device_train_batch_size' goes into Out Of Memory (OOM) enabling auto_find_batch_size will find the correct batch size by iteratively reducing 'per_device_train_batch_size' by a factor of 2 till the OOM is fixed.

  # learning rate and learning rate scheduler
  learning_rate:
    type: number
    optional: true
    description: Start learning rate. Defaults to linear scheduler. If left empty, will be chosen automatically based on the task type and model selected.

  learning_rate_scheduler:
    type: string
    optional: true
    enum:
      - warmup_linear
      - warmup_cosine
      - warmup_cosine_with_restarts
      - warmup_polynomial
      - constant
      - warmup_constant
    description: The scheduler type to use. If left empty, will be chosen automatically based on the task type and model selected.

  warmup_steps:
    type: integer
    optional: true
    description: Number of steps used for a linear warmup from 0 to learning_rate. If left empty, will be chosen automatically based on the task type and model selected.

  # optimizer
  optimizer:
    type: string
    optional: true
    enum:
      - adamw_hf
      - adamw
      # - adamw_torch_xla
      # - adamw_apex_fused
      # - adamw_bnb_8bit
      # - adamw_anyprecision
      - sgd
      - adafactor
      - adagrad
      - adamw_ort_fused
    description: optimizer to be used while training. 'adamw_ort_fused' optimizer is only supported for ORT training. If left empty, will be chosen automatically based on the task type and model selected.

  weight_decay:
    type: number
    optional: true
    description: The weight decay to apply (if not zero) to all layers except all bias and LayerNorm weights in AdamW and SGD optimizer. If left empty, will be chosen automatically based on the task type and model selected.

  extra_optim_args:
    type: string
    default: ""
    optional: true
    description: Optional additional arguments that are supplied to SGD Optimizer. The arguments should be semi-colon separated key value pairs and should be enclosed in double quotes. For example, "momentum=0.5; nesterov=True" for sgd. Please make sure to use a valid parameter names for the chosen optimizer. For exact parameter names, please refer https://pytorch.org/docs/1.13/generated/torch.optim.SGD.html#torch.optim.SGD for SGD. Parameters supplied in extra_optim_args will take precedence over the parameter supplied via other arguments such as weight_decay. If weight_decay is provided via "weight_decay" parameter and via extra_optim_args both, values specified in extra_optim_args will be used.

  # gradient accumulation
  gradient_accumulation_step:
    type: integer
    optional: true
    description: Number of update steps to accumulate the gradients for, before performing a backward/update pass. If left empty, will be chosen automatically based on the task type and model selected.

  # mixed precision training
  precision:
    type: string
    enum:
      - "32"
      - "16"
    default: "32"
    optional: true
    description: Apply mixed precision training. This can reduce memory footprint by performing operations in half-precision.

  # label smoothing factor
  label_smoothing_factor:
    type: number
    optional: true
    description: The label smoothing factor to use in range [0.0, 1,0). Zero means no label smoothing, otherwise the underlying onehot-encoded labels are changed from 0s and 1s to label_smoothing_factor/num_labels and 1 - label_smoothing_factor + label_smoothing_factor/num_labels respectively. Not applicable to multi-label classification. If left empty, will be chosen automatically based on the task type and model selected.

  # random seed
  random_seed:
    type: integer
    default: 42
    optional: true
    description: Random seed that will be set at the beginning of training.

  # evaluation strategy parameters
  evaluation_strategy:
    type: string
    default: epoch
    optional: true
    enum:
      - epoch
      - steps
    description: The evaluation strategy to adopt during training. Please note that the save_strategy and evaluation_strategy should match.

  evaluation_steps:
    type: integer
    default: 500
    optional: true
    description: Number of update steps between two evals if evaluation_strategy='steps'. Please note that the saving steps should be a multiple of the evaluation steps.

  # logging strategy parameters
  logging_strategy:
    type: string
    default: epoch
    optional: true
    enum:
      - epoch
      - steps
    description: The logging strategy to adopt during training.

  logging_steps:
    type: integer
    default: 500
    optional: true
    description: Number of update steps between two logs if logging_strategy='steps'.

  # Save strategy
  save_strategy:
    type: string
    default: epoch
    optional: true
    enum:
      - epoch
      - steps
    description: The checkpoint save strategy to adopt during training. Please note that the save_strategy and evaluation_strategy should match.

  save_steps:
    type: integer
    default: 500
    optional: true
    description: Number of updates steps before two checkpoint saves if save_strategy="steps". Please note that the saving steps should be a multiple of the evaluation steps.

  # model checkpointing limit
  save_total_limit:
    type: integer
    default: -1
    optional: true
    description: If a value is passed, will limit the total amount of checkpoints. Deletes the older checkpoints in output_dir. If the value is -1 saves all checkpoints".

  # Early Stopping Parameters
  early_stopping:
    type: boolean
    default: false
    optional: true
    description: Enable early stopping.

  early_stopping_patience:
    type: integer
    default: 1
    optional: true
    description: Stop training when the specified metric worsens for early_stopping_patience evaluation calls.

  # Grad Norm
  max_grad_norm:
    type: number
    optional: true
    description: Maximum gradient norm (for gradient clipping). If left empty, will be chosen automatically based on the task type and model selected.

  # resume from the input model
  resume_from_checkpoint:
    type: boolean
    default: false
    optional: true
    description: Loads optimizer, Scheduler and Trainer state for finetuning if true.

  # save mlflow model
  save_as_mlflow_model:
    type: boolean
    default: true
    optional: true
    description: Save as mlflow model with pyfunc as flavour.

  # ########################### Model prediction Component ########################### #

  # component input: test mltable
  test_data:
    type: mltable
    optional: false
    description: Path to the mltable of the test dataset.

  test_batch_size:
    type: integer
    default: 4
    optional: true
    description: Test batch size.

  label_column_name:
    type: string
    default: label
    optional: true
    description: Label column name in provided test dataset, for example "label".

  input_column_names:
    type: string
    default: image_url
    optional: true
    description: Input column names in provided test dataset, for example column1. Add comma delimited values in case of multiple input columns, for example column1,column2.

  evaluation_config:
    type: uri_file
    optional: true
    description: Additional parameters for Computing Metrics.

  evaluation_config_params:
    type: string
    optional: true
    description: Additional parameters as JSON serialized string.

outputs:
  # ########################### Finetuning Component ########################### #
  mlflow_model_folder:
    type: mlflow_model
    description: Output dir to save the finetune model as mlflow model.
  pytorch_model_folder:
    type: custom_model
    description: Output dir to save the finetune model as torch model.
  # ######################### Compute metrics Component ######################### #
  evaluation_result:
    type: uri_folder
    description: Test Data Evaluation Results

jobs:
  image_classification_model_import:
    type: command
    component: azureml:transformers_image_classification_model_import:0.0.8
    compute: ${{parent.inputs.compute_model_import}}
    inputs:
      model_family: ${{parent.inputs.model_family}}
      model_name: ${{parent.inputs.model_name}}
      pytorch_model: ${{parent.inputs.pytorch_model}}
      mlflow_model: ${{parent.inputs.mlflow_model}}
  image_classification_finetune:
    type: command
    component: azureml:transformers_image_classification_finetune:0.0.8
    compute: ${{parent.inputs.compute_finetune}}
    distribution:
      type: pytorch
      process_count_per_instance: ${{parent.inputs.process_count_per_instance}}
    resources:
      instance_count: ${{parent.inputs.instance_count}}
      shm_size: '16g'
    inputs:
      # Model path is same as what is output of model selector
      model_path: ${{parent.jobs.image_classification_model_import.outputs.output_dir}}
      training_data: ${{parent.inputs.training_data}}
      validation_data: ${{parent.inputs.validation_data}}
      image_width: ${{parent.inputs.image_width}}
      image_height: ${{parent.inputs.image_height}}
      task_name: ${{parent.inputs.task_name}}
      metric_for_best_model: ${{parent.inputs.metric_for_best_model}}
      apply_augmentations: ${{parent.inputs.apply_augmentations}}
      number_of_workers: ${{parent.inputs.number_of_workers}}
      apply_deepspeed: ${{parent.inputs.apply_deepspeed}}
      deepspeed_config: ${{parent.inputs.deepspeed_config}}
      apply_ort: ${{parent.inputs.apply_ort}}
      number_of_epochs: ${{parent.inputs.number_of_epochs}}
      max_steps: ${{parent.inputs.max_steps}}
      training_batch_size: ${{parent.inputs.training_batch_size}}
      validation_batch_size: ${{parent.inputs.validation_batch_size}}
      auto_find_batch_size: ${{parent.inputs.auto_find_batch_size}}
      learning_rate: ${{parent.inputs.learning_rate}}
      learning_rate_scheduler: ${{parent.inputs.learning_rate_scheduler}}
      warmup_steps: ${{parent.inputs.warmup_steps}}
      optimizer: ${{parent.inputs.optimizer}}
      weight_decay: ${{parent.inputs.weight_decay}}
      extra_optim_args: ${{parent.inputs.extra_optim_args}}
      gradient_accumulation_step: ${{parent.inputs.gradient_accumulation_step}}
      precision: ${{parent.inputs.precision}}
      label_smoothing_factor: ${{parent.inputs.label_smoothing_factor}}
      random_seed: ${{parent.inputs.random_seed}}
      evaluation_strategy: ${{parent.inputs.evaluation_strategy}}
      evaluation_steps: ${{parent.inputs.evaluation_steps}}
      logging_strategy: ${{parent.inputs.logging_strategy}}
      logging_steps: ${{parent.inputs.logging_steps}}
      save_strategy: ${{parent.inputs.save_strategy}}
      save_steps: ${{parent.inputs.save_steps}}
      save_total_limit: ${{parent.inputs.save_total_limit}}
      early_stopping: ${{parent.inputs.early_stopping}}
      early_stopping_patience: ${{parent.inputs.early_stopping_patience}}
      max_grad_norm: ${{parent.inputs.max_grad_norm}}
      resume_from_checkpoint: ${{parent.inputs.resume_from_checkpoint}}
      save_as_mlflow_model: ${{parent.inputs.save_as_mlflow_model}}
    outputs:
      mlflow_model_folder: ${{parent.outputs.mlflow_model_folder}}
      pytorch_model_folder: ${{parent.outputs.pytorch_model_folder}}
  model_prediction:
    type: command
    component: azureml:model_prediction:0.0.15
    compute: ${{parent.inputs.compute_model_evaluation}}
    inputs:
      task: ${{parent.inputs.task_name}}
      label_column_name: '${{parent.inputs.label_column_name}}'
      input_column_names: '${{parent.inputs.input_column_names}}'
      batch_size: ${{parent.inputs.test_batch_size}}
      device: auto
      evaluation_config: ${{parent.inputs.evaluation_config}}
      evaluation_config_params: '${{parent.inputs.evaluation_config_params}}'
      test_data: ${{parent.inputs.test_data}}
      mlflow_model: ${{parent.jobs.image_classification_finetune.outputs.mlflow_model_folder}}
  compute_metrics:
    type: command
    component: azureml:compute_metrics:0.0.15
    compute: ${{parent.inputs.compute_model_evaluation}}
    inputs:
      task: ${{parent.inputs.task_name}}
      ground_truth: ${{parent.jobs.model_prediction.outputs.ground_truth}}
      ground_truth_column_name: '${{parent.inputs.label_column_name}}'
      prediction: ${{parent.jobs.model_prediction.outputs.predictions}}
      prediction_column_name: predictions
      prediction_probabilities: ${{parent.jobs.model_prediction.outputs.prediction_probabilities}}
      evaluation_config: ${{parent.inputs.evaluation_config}}
      evaluation_config_params: '${{parent.inputs.evaluation_config_params}}'
    outputs:
      evaluation_result: ${{parent.outputs.evaluation_result}}
