diff --git a/.buildkite/test-pipeline.yaml b/.buildkite/test-pipeline.yaml
index e49a5650..5225d360 100644
--- a/.buildkite/test-pipeline.yaml
+++ b/.buildkite/test-pipeline.yaml
@@ -96,6 +96,9 @@ steps:
   mirror_hardwares: [amd]
   command: pytest -v -s test_logits_processor.py
 
+- label: Utils Test
+  command: pytest -v -s test_utils.py
+
 - label: Worker Test
   mirror_hardwares: [amd]
   command: pytest -v -s worker
diff --git a/README.md b/README.md
index 524d0271..35f752d7 100644
--- a/README.md
+++ b/README.md
@@ -70,6 +70,7 @@ vLLM seamlessly supports many Hugging Face models, including the following archi
 - InternLM2 (`internlm/internlm2-7b`, `internlm/internlm2-chat-7b`, etc.)
 - Jais (`core42/jais-13b`, `core42/jais-13b-chat`, `core42/jais-30b-v3`, `core42/jais-30b-chat-v3`, etc.)
 - LLaMA, Llama 2, and Meta Llama 3 (`meta-llama/Meta-Llama-3-8B-Instruct`, `meta-llama/Meta-Llama-3-70B-Instruct`, `meta-llama/Llama-2-70b-hf`, `lmsys/vicuna-13b-v1.3`, `young-geng/koala`, `openlm-research/open_llama_13b`, etc.)
+- LLavA-1.5 (`llava-hf/llava-1.5-7b-hf`, `llava-hf/llava-1.5-13b-hf`, etc.)
 - MiniCPM (`openbmb/MiniCPM-2B-sft-bf16`, `openbmb/MiniCPM-2B-dpo-bf16`, etc.)
 - Mistral (`mistralai/Mistral-7B-v0.1`, `mistralai/Mistral-7B-Instruct-v0.1`, etc.)
 - Mixtral (`mistralai/Mixtral-8x7B-v0.1`, `mistralai/Mixtral-8x7B-Instruct-v0.1`, `mistral-community/Mixtral-8x22B-v0.1`, etc.)
diff --git a/docs/source/index.rst b/docs/source/index.rst
index 5cc28a2d..8f6460b3 100644
--- a/docs/source/index.rst
+++ b/docs/source/index.rst
@@ -87,6 +87,7 @@ Documentation
    models/adding_model
    models/engine_args
    models/lora
+   models/vlm
 
 .. toctree::
    :maxdepth: 1
diff --git a/docs/source/models/supported_models.rst b/docs/source/models/supported_models.rst
index ceb658bb..3752f2c5 100644
--- a/docs/source/models/supported_models.rst
+++ b/docs/source/models/supported_models.rst
@@ -83,6 +83,24 @@ Alongside each architecture, we include some popular models that use it.
     - LLaMA, Llama 2, Meta Llama 3, Vicuna, Alpaca, Yi
     - :code:`meta-llama/Meta-Llama-3-8B-Instruct`, :code:`meta-llama/Meta-Llama-3-70B-Instruct`, :code:`meta-llama/Llama-2-13b-hf`, :code:`meta-llama/Llama-2-70b-hf`, :code:`openlm-research/open_llama_13b`, :code:`lmsys/vicuna-13b-v1.3`, :code:`01-ai/Yi-6B`, :code:`01-ai/Yi-34B`, etc.
     - ✅︎
+  * - :code:`LlavaForConditionalGeneration`
+    - LLaVA-1.5
+    - :code:`llava-hf/llava-1.5-7b-hf`\*, :code:`llava-hf/llava-1.5-13b-hf`\*, etc.
+
+      .. note::
+
+          Models with an asterisk (\*) are missing :code:`chat_template` from HuggingFace :code:`config.json`. A predefined template can be found in our repo (:code:`examples/template_llava.jinja`). To host the OpenAI-compatible server, provide the chat template via command-line arguments. You also need to provide the :code:`VisionLanguageConfig` to initialize the model. See the following example:
+
+          .. code-block:: shell
+
+              $ python -m vllm.entrypoints.openai.api_server \
+                  --model llava-hf/llava-1.5-7b-hf \
+                  --chat-template examples/template_llava.jinja \
+                  --image-input-type pixel_values \
+                  --image-token-id 32000 \
+                  --image-input-shape 1,3,336,336 \
+                  --image-feature-size 576
+    - 
   * - :code:`MiniCPMForCausalLM`
     - MiniCPM
     - :code:`openbmb/MiniCPM-2B-sft-bf16`, :code:`openbmb/MiniCPM-2B-dpo-bf16`, etc.
diff --git a/docs/source/models/vlm.rst b/docs/source/models/vlm.rst
new file mode 100644
index 00000000..854885ea
--- /dev/null
+++ b/docs/source/models/vlm.rst
@@ -0,0 +1,118 @@
+.. _vlm:
+
+Using VLMs
+==========
+
+This document shows you how to run and serve Vision Language Models (VLMs) using vLLM.
+
+Additional Engine Arguments
+---------------------------
+
+Apart from the :ref:`basic engine arguments <engine_args>`, VLMs additionally require the following engine arguments for vLLM.
+
+.. option:: --image-input-type {pixel_values,image_features}
+
+    The image input type passed into vLLM. Should be one of "pixel_values" or "image_features".
+
+.. option:: --image-token-id <id>
+
+    Input ID for image token.
+
+.. option:: --image-input-shape <tuple>
+
+    The biggest image input shape (worst for memory footprint) given an input type. Only used for vLLM's profile_run.
+
+    For example, if the image tensor has shape :code:`(1, 3, 336, 336)`, then you should pass :code:`--image-input-shape 1,3,336,336`.
+
+.. option:: --image-feature-size <size>
+
+    The image feature size along the context dimension.
+
+.. option:: --image-processor <size>
+
+    Name or path of the huggingface image processor to use.
+
+.. option:: --image-processor-revision <revision>
+
+    The specific image processor version to use. It can be a branch name, a tag name, or a commit id. If unspecified, will use the default version.
+
+.. option:: --no-image-processor
+
+    Disables the use of image processor, even if one is defined for the model on huggingface.
+
+Offline Batched Inference
+-------------------------
+
+To initialize a VLM, the aforementioned arguments must be passed to the ``LLM`` class for instantiating the engine.
+
+.. code-block:: python
+
+    llm = LLM(
+        model="llava-hf/llava-1.5-7b-hf",
+        image_input_type="pixel_values",
+        image_token_id=32000,
+        image_input_shape="1,3,336,336",
+        image_feature_size=576,
+    )
+
+For now, we only support a single image per text prompt when calling ``llm.generate``. To pass an image to the model, note the following parameters:
+
+* ``prompt``: The prompt should have a number of ``<image>`` tokens equal to ``image_feature_size``.
+* ``multi_modal_datas``: This should be an instance of ``ImagePixelData``.
+
+.. code-block:: python
+
+    prompt = "<image>" * 576 + (
+        "\nUSER: What is the content of this image?\nASSISTANT:")
+
+    # Load the image using PIL.Image
+    image = ...
+
+    outputs = llm.generate(prompt, multi_modal_datas=ImagePixelData(image))
+
+    for o in outputs:
+        generated_text = o.outputs[0].text
+        print(generated_text)
+
+A code example can be found in `examples/llava_example.py <https://github.com/vllm-project/vllm/blob/main/examples/llava_example.py>`_.
+
+OpenAI-Compatible Server
+------------------------
+
+We support image inputs to the OpenAI Chat API, as described in `GPT-4 with Vision <https://platform.openai.com/docs/guides/vision>`_.
+
+Here is a simple example using the :code:`openai` package:
+
+.. code-block:: python
+
+    from openai import OpenAI
+
+    openai_api_key = "EMPTY"
+    openai_api_base = "http://localhost:8000/v1"
+
+    client = OpenAI(
+        api_key=openai_api_key,
+        base_url=openai_api_base,
+    )
+
+    # Note that this model expects the image to come before the main text
+    chat_response = client.chat.completions.create(
+        model="llava-hf/llava-1.5-7b-hf",
+        messages=[{
+            "role": "user",
+            "content": [
+                {
+                    "type": "image_url",
+                    "image_url": {
+                        "url": "https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg",
+                    },
+                },
+                {"type": "text", "text": "What's in this image?"},
+            ],
+        }],
+    )
+    print("Chat response:", chat_response)
+
+.. note::
+
+    For now, we only support a single image per API call. Also, the ``detail`` parameter is ignored since it may not be applicable to other models.
diff --git a/examples/images/cherry_blossom.jpg b/examples/images/cherry_blossom.jpg
new file mode 100644
index 0000000000000000000000000000000000000000..63173db0da7687d7841fe4d85239d8e277d81259
GIT binary patch
literal 351679
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
V{VH2k3I;0X2c-_0k*v~e|Jf<M-i-hN

literal 0
HcmV?d00001

diff --git a/examples/images/stop_sign.jpg b/examples/images/stop_sign.jpg
new file mode 100644
index 0000000000000000000000000000000000000000..9af63008d617924eafa4434b14866e9d2aea6892
GIT binary patch
literal 144183
zcmbTdcT`hp)IJ*9*kx3N5d}ty2neV&1tcm>Kza`)qeu%SN^c=EHUtC&1cV4kFCic$
zAT=XZKtvz`NeGb=N+1a}A*S8qe82VGweDZ{-ot`J&RfpA-?I0!pS>geF8l%d-OSk3
z7_?^(2($<I0SQSU1JI%0emnTvfkOum9z1;b(2--J$B!L7dhG0}(;}jh64FwV66eqV
zDW|INr_5#9^XD&VD_*{GRYOBVTH(gc>(}&D)itjD>SWL1!-tO@J@&`(<9}ScaQ?!z
z|Ie53U(m@z`vMM#?%N{++Iw=(zLR@|Js@ddoCo&&cY*%TwP)|X{Re(Kc<Atvqd*1h
z@1VVV_U+rdf8T)v`}YI25kNU;|H%WVE?m9++i9Eo2W1|MUi&Al@R01Cx=&|pN7v=l
z9|S)+d_+wAkFyf;7ZolkDrsnHX<xsgV_;}xY;xDs%+B7y(aG5b;`z|a+sD@r77`j3
z9uXN8{q))M7x6C>64Nu@WM*Z*&B-k)E-5W5uc)l5Z)n6eHGgbr?dtC7?d$(MFgP}j
zCrnI!pCZoA%`Z?FmzGy(8=G6(J1q7t=jSiE_JH>Nk66Ip{}Jr}A=gPjuD$#B@7sUy
zmt1@HMgYJ2PVPT&;p%UvZrdEZ|M;}bwSNwY-bpL0`*c`V-FE%VgW%C4VsaX@@*BTI
z`%kj}cY;0n|0UV~3if}?MFbt&w+C3feJ4R+(8j$n??mOd+xs+Zj4y$PMQv^!kXKdw
z`2OG##iG1hhs}-sZol7OZtI=?x1_aMIG>n>Hs1mdJ01Vx59zjKcG&iujf36S)If$~
z*6v$)c>W8E6rCQ;{kmk;!04a#JKTG2<DN#1=KdFpuf}Y0J*5;)%f`G*3a5(F6G3i-
zVWk1=O~<ibB(*US7av{de(=dj`HiMD(VD6Tx9S*FYDce@_{~3ETun|HqRxcV9axy7
z7N@^7lQvZsiKG^iW0*Nub$+dG>Pshdu(LgS(xT*L$u~xMifGE+%(K}+4Eq#{f!n65
z++X?G>f6vg&aiLOt~2-OQk2$@3lbY@=OP{9hayu}P5ok*=SgzcMEkbkZM!VZ?bH|W
zLUAjJiv$uox7}(!r6e2o`^<hJC|mb#A)KAE1pfJZ%}aUjOQu`jw@zD%j+@_ImdrH^
z@*UovQc{G<1=aao90(VJjyin)N?zd;hYrHOV2e9kJ!{GEtQT%)RsH-LGjr<x)Rd8U
zW?y+rBJMn%WV~?`Gsh=*k)aM#ZYup#L3WH`DN0YU^1|6Zys6VJr1R}A0>Ll*5n~!Z
zET<=s#n`*&`rPzgj&PttMa_@Lbq823tzq&Cm`+vuT7s3o>dPOH$jT=P;POIH?gXLp
zw_w}d(Iu&e$?U+giq6qa^0~F~AR#EY>GwYUz@1a((wUo+N3bc~XO_GGLH#Q8y@jB*
zKuy?)%o=w`6p0M~IT)_uR($rpa_#p;l5L@<5TrWpn0vRH*@QY>%U-#z@PILR=dutq
zbha}4q{iKX<#7aU;wv&G!6$XlVua@aJF*bcaQ082+ibro!)7>#m5be<gj*~fWO9Wd
z74s(si{6HHmZyVBy7s?~mL>(0ELza-Ba%-F5QJlPwQo?cbkigBcQHk!edLsSwV4W^
z7JpM)XMJcc7Q4HUIIDIB98S5MTwl+Wfi@bp2|?kc2yM0z+=5~^R4L-4Ea4Q(v1nNI
zWou7V1_)@5Wks(`Dw@Wl);a!7P^N=)F501R8-FUah?iJz(zdJkQ?sazJUGCH6v(@b
zz91>T5Q54wABp~`c_Pr{>Qh+$Qp7{ETMozsf4KFW+V1g(kTWQ{G-Kl1RDPV=?zX_&
z=!0Xc5cH2D-t@3we|1u5FKMEq<94I=#VHZqhS}r9ee6Or<e+b8rH(NoizJ9F)n0Q<
z7J@F@K7qW`w%%u104#)_ZA0xErih!+giWX>ZDp7AvHl!i6N^dC=v-#;iDQDUdhjQQ
z(0M_c5VQxQroM!cZ|VM9aE3Pp<?ij~zKQQ<LAyI^;$imDDRwQ+MS9x4NSs;h4KD%N
zFCG^36Mg34&$9*VDG(%LSqOR-G|pv0p18#}zA)RD7Jdykd#+Ik${#V|$%ZEZYm|@O
zpKK+PyDwexRmLpZo7-?xTX6Cvc&TCH-)L>Z>46h{YCKtMA!x*>L|@`LlG-rw)$eNS
z->gS#uaLXOv;U{7$3TUliO<sX@m6c8uLTe9BfB(kTT?5P^<*_3uOo=*P}bfSN3&M*
zwBp!27lICT0S$(w*IyyWVUr@45F{lVWzD<%WH8lOoF{7`1c5a~j+p{C%@&?0e|t^M
z)0|^7g6z^%;PJ+gUE08H(qK_VT~|QAhDcVU8Xx4z(touYeXoun<t~54b70qAS0M%=
z@gGWg6`z242)5$T0inl$7sE&?_ju?{jM>2rbw-&~SN3Lc0Z=0v%AuPBW83NHu`px1
z+{VL5O6iu!ec;tkfyX={Xp8uCmLmi$VMC?7t_<;9rLw==d=9)_nsoqZQ<irG$)UR+
ziY?X1MP7|L0v$|=Tn<5wz!EK_9&$(A&sL}&959_W16r7XrPAbZ{kA=Ct?HSaPP(7#
zd0m1pZhn=4JmY@T@)$zrF_r3m7x{rI;H$CZ3MiOqdNCE=VYj7wMglqb%4*FNjI$JU
z!<iE!gO|3%(#jjkc@<qc(%jI3?*;UU*=Rpyo~EG=uu86oYtq{OJVFKQkqLbBPNpb$
zV|^#ww$qXLrS*~fNmRsX`5yDVv0t!O*6VyCS!TMJbaxPg?GTBcOq)^*B*$&mP<cud
zXf%0MC*6&#6XZOhNgB0xGX7?gab0n)B=<%|yIz+)Su?ak;82?;dI_gCQ)ZaN&aF<(
zs*htWg<ff#G^kq7%){2CJq}rlx<`r1W?scu9rGiml02vvx3qv2f%L4Gj^tFzKka&j
z*$N8E9Hq=mFMIgk7StP)&V~2JGIT_UgYP1IG**bQm1p%YZycW~j$j>Up1;z}lo5i0
zT9)V21gk>O{7&qx`nLAU#m~bnITc##sjZnb>%z5_is=Y*L+ecxLkL>i-Z;piI36g0
zvu#Vn%=9<y77+bk+s@dkF~I_`)ycKW&R!9=61=XLr|4Ly8>Arry%GoC0Q%lu_z36=
z$}ZnBpjbdv_+BWWf{`uS?$5X4tZ>$-=M?r>H6r(np?ktTu?d<GM6+!OEN}5mqD#}q
zqG(X&ui-s%{TE41v^(%l%AfvRiNH;=?9q=Ff)I*xkwOs8?&u}(QlkBnuhN{kOt;#P
zEieDdx?Xe2;rp;P?RV41%7dv`)Gn;2HTK+SQy`!XtNY>m!Rp{40YTUAKD6@bd5I$4
zU;@_P_^V5q5Ckc>Mo7vzD;*%xT5&f+zOCMZJJ>roa%ZBV{o#}<F_#pgPtVK~-A&MA
zlNH$hcWx|9wGALBWXuI!-Pe<MOlOQaakMeRha!Ahsf>FAC*Nww>K_Fpif^P$o>nQW
zJxgYHLbkvAG@))MtsymH?$j`0o2lT3Q0;ZRfm4RS*{wYWNvbIbs>IyOJ80+mO)Yj9
z<w~t?^Yd=bTyP=_b{>41Lm0~ux8#xp1dpU%ElX5T<D?K2t$>+Lwm3ijX;>HKDDmY9
zRArU}K@U`t%L<i^xt;>LjQ~H&(7NoTep|3<8)bV>2wI+Gjj3_1AWG}eZ(C2h=GxFA
ziU?GTOj~pA1ZM`_9-SDAqURu|qA`!u==9jB*a9vCy=uK|^&w!io-m)~)D&@-B#3U_
zTM#nW=5KG<WTo#b*iyRhpY$;^i2={aZE7qy<i0AlIgO}4lkCKpl)PuZ6q-gpcJn%I
z>byV}50}5jDU7*qm#CEPCr&z;9l(vTar<iL`kicyB1oMyx>T%L_h9TnhKjK-s94ml
zV$W4m%d&5KCKA;x-~TphS@icgBb}_jPt_p1z#;18Z<fCdwfR4G)Zkw&ozkn^6oQTb
z)6!&J4<39;LUx$vlg<t+`hGRry4z9rF_Id;2xV;9{MqGX_jpNtNC|n0Ph8qF481w3
zu~Ndg@*6Dj9)jjJnwW9lk}_M7tpC;mBrj@XfA?)^X)(3(QqZMdT|V*Bo{!}he{i#@
zUIO`|^uKS8cL~5_JR6?_HO*nivs#Ws#l>Rkb*n=I$!GYtSBb3|g|u&Ils!@v-ci>#
z$%}US61s6YLHte4sx&*|U7Y>4xBf^Slem<ufjdBKBBA^{T;YthIph_^owRte6xkwD
zlS=O8(|f7-5&7PpWV!U_4fU|9d0%d$c(2smiccoi7yLe!!y$^I+M*Ah`1yj$#&QEe
zXJFqM31d~`^BE5-2nGr7;}u);?w!}CFk|sQ`;0e4?O(!9TK)Eq*yBzG$PVR+PFJz}
zN-%DQlhuxpYK88jfu}sw>cbFd^+1@_eG8}o&D=xgdvqbm!+*oUWyeB8bKXEYT?o3g
zGdNjtE5f{O*WDmarky$WyxoqL3xKQk4+Ff3CRE48M+Unux6(wFap5IG5Sx5$zgJQS
z6u?(b#szyQY^CNYmBc`f^3&3kIdLN>3NTK){5xqiz)c83av9aAquv~cu>!HoeQ^7!
z)*_>mCK8-l0bqtw@h=mRR3S(Rk}fwXza<|@9xIV>XaiFUhwd+H7~^98>&oP@1P@g!
z1SN5Iz$|-c1j0Zy?|h7QD}n}l_#HYe!a*V^%yA*;5oHrFSgB)4NACzh%6QzAwTddz
zs{Mvpy_~+C5L8Z|#!)ITV<&@9wcw4P&8nG4dYBzrm}|#%h|X!5<6+vm@9(}?JQSod
zbFm$%f{RD|H6x3xGTG90ve$S?){Y{f&pFq-YMVabG{<6`4x^{e@2rsB(&q*lq+88-
zEbT8<ZT{NoLQtI@#BD&smIF+H78y-^HECwyJ7Tvd;<j6jAk2LfP>o&CpUVVy4qE57
z5R?#$V>-Up&R^D4+kvi2d>(%y1eF8|=>9a%SXbm!b+Z1Y*_h{6jEP2;PhOJXCO9V#
zM1HK|`)`QLhRAjTjQ^3$Lu%eGx24Gx{HXMkmA*){RkF;iJDrUGWSe$R=5L9ef+#j^
zK1Z8Z=>XrSxi`D(b0fcNcGWtTqUqx-D_7gXc1(6-UtgF0WcZ{Y3-V0Doqm^okz(43
z>hLq?Z6C{s9{&gOOp>B<{m5^+$Px1n+>4y&#YgS;31HxvGB3YlZxL;m_TKXCy_8lN
z(O_+zbN}|VUr6f{$G^|MDD4IH>C?|m{C)b&`Il9wsynL|5e^o3P+DGPi~9<fmX>ae
z%!1i0A|KO&EK9p(FlPnyD?wAuyOlWRP2InlnQ`#B(%y@(8+v_QTzKZc*~*qPXon^X
z{&wl+cRo#3B7=kG{|twzDVnU?7ieC=gHsaW!zN!E|Bh2U1XH(Av)_wXPfagQ50?(l
zSyZnbHcihjxr+Gd)iNyvtzRrWQjI-cvdY5X=$a1t<ppnJt#>qo@kj0jl@7}`J|Y=A
zzCKer_-$X6teMAKi#;;!(g2_cvf9zKoc5ljO&8G6`i1u}QN2A-##oQm5CCE;c0{h$
z$k+?$ref60Go38rGIFopXJp5{u~)H~mn=rG$V9YkJ>jk7tIDSOn^yJFQpxXCYNuqJ
zj6Vj}t6%d8^x6G7`=W8VCS3!D-ejRSD74%YX)I=gL6Z>?qr8cG{x~G54Hch9<_(++
zaZ0s(MvibS{B%}3YC5u|Mev88ZB)KHCSd2#lWhcfdv|O{I^<?VnTew3NRB?eVGM=J
z03f;tdJ#Z)(t;c20u-Mu1a&I9-7r1g1AvOl9;ICOk@c<}`~HXqX2%~maKDMxKZDNN
z5h}k5i^R3TTYcGs9ic*y+xDnmIIeHI<%J6+cq3>N@EHH4$!Q~}&7xhW|LF9~f7Y16
zW!h+0d@E&4?w%HK%lhRhxk6Bj5Y)f2*ahdT?VN&Grgu)|=e{0z)+{S<{)IcXR46<E
zfb`R@`f2l6(a0%P0G|`wP{*?7m<#0NCc!}qNmLU^2+30N+}G&rwXK2<_3_2df9mcK
zm2>o6vyp0Cv{{;I0OOlM3yQlFvUVE5yg`dxTd>N>TM1V97P}BW$7X8Qt9Y2?>3dt{
z*8W|pB)$k``-i3*yRrX}GA^B=^jfBd#Ny{@mqyc_-qpU@d9uMkW;HP>{4=bHW1iA$
zlUf%%`YpsC4wNJpO>K43ob$Z}Hwk~FB?&?M94cxc(m$#_TY|qoQV$?6bQ1kOrZVas
z;t38JaB|hkWi?gWa=q&x<el@XP7I7&BkA#JPJ=#$O_RG4z<pCI7l88QIH2$PVLs=#
zI-^5aC?6rn$S@B{toSjh7D$0-ToZy~{5KpQrrbrQQY%bJTbdV%5eLpZps*O_*PZ;6
z2=gGddo~t<78yr3LyMAiGdA_izoc@vqtb++xKgf;5Y%kW0(`TerdHMQHG@SH{!hKn
zzW^B`&kyGVQH}Rw$!>{rw>uvo;|f?|LXe`#R5q_v;z0TLBmlm}<z))^;I#pPZEAx8
z#|(0mvZk&K96<oROM9oJ*7uvVN(n)KagexMBy*Ob;HM4iI<Uju_&VXf|3+cr>*Ru`
z4N(Bzz(YM#xhuDt4$+pEt8v#x%YzYue*ccbOnR1Nz1k2pVh(d$2d+GfNaLh2l5+%X
zPA}NH3GiLg2UYwnL-V~ITt7C?7G>j>@DlI;%D+_9luuludIwg=Q@5+9C7&OK$=$62
zRB)doWT9rxS<TCcTQ%I&rl>Oif<UGhFnD7_|C-GQ(FNl%muV|a#@^8U##aGH_$S4D
zIh6$ugrGn$vlUubCjj%}^797UxxZcNm3{#K1#R&Kp8wsqw;2}H?}v&-5y?0lV0uPb
zS^^<R05;C+_UNwApwtcUg&<zsYvN~IKTvGHG9As5Hchmu8~*QkYQ2TPBUv|IeGTk&
zB~ia0m?zeX{(v@cA~$|UM;z_!UTG|Nhyv(^UB1FpjiTT5je`65*v4-7wb2C&hpjV|
z`;W~nHoXMg(FOBc(9Z~Y?ZK>6RcPC-+65idy{i@ivT=mSeA(+8q{5qf(XkXtDW`&}
zK#Y<|(_d~zo+2cEe&YDTeV7g7IUTWsv;A-M5c3QNHmuHw<To;J!j4B3-BWU2@byY`
zKw!=(J6PR>IWIVIkR7-3Qqk=f&_YnaZtxg;_enD4^W?dWIOSBjii|6={eGtF76iR+
z;^5cF#i%+7LAIn!L~bq5Ed&lP`hx7Ze3|kD*o^N1Q>aSxQFg4#)vFuhcW#x+rIG7n
zYpr1tywS3uhemLwgDc{3jSNZcCzFYcu473pT{F&~3fY_<Gi)&-QhFT)!y)HuQn)Vu
z*ANc(v6NGBT<);7>u%Pf&)r(G9CS8l^-f`Q?8HHLrNqlqTG^`Hv}LjAl;OdZd)Ymw
zTvr%%0n<Zl^xh$twiom43|(VN6r}$7;bASe)vjwcI=8(l`OF)N(0d)B{IvnwPt^v;
zT*p1NC|NBxcF0CyB4D~2yORmKWb=ku`UDf%)qhW8sGz;Uu6VrGD;qZKqBzG%MD&pD
z)xz4QRQ2#Vb0j`7boqv^=3kZWM$nLQ!B86oyZC<PbTV@(5R!d&<CwPC-SIW<9X^wV
z*6nHKWnU|DjhoZtxDGPS@-EVXHEv8K#$UbK*djPvl}XJTBDHGZb1&ld%6^JtP_~Av
zZX%sh3`yQxht8ca<3u~`tB#J@FV@Xl80od~&P6V%)nWFrG<&S>GQ;y@_E0+~s~V=o
znpina3gA=yugCN|91AWt4@^G&t5U6>k3gP_Bf{pUmzW4b4ayMroF4mJAW?q8-p}9<
z^w){H7`y995nN4Fxy}~=wYNF#XhRj*2r|~dB$65x4qhKG#}A3~qLJ#dx~lT%iRTfF
zYVKz}68ROd?liw~JYq81XpIs2z`1{;^in>UIdP!r)nxiwqK~5x1j8u2ATb6iWw1Vq
zml*!^NzZ#j((IKNfRVsC9DGiNw^hok@nj;vTY}7j=JM&diOX+4V|Za^3ykOj!AWJx
zY^PZY{3w|uYsvN<#A!;+pu$^DS2C_P1+~p!&WcqLeIs<LbU$4)M)PSOVkIj?II(79
z7}(=X)Qxpptf=XtO-GgVuHg=Rw#6(3d7L&e8kKzQTJ21Qb0XaE>(}6KWOk)7tx6+`
z6~y%%A2;au7-}9fJS-siQUiyjgXbi1(XSfpk?V>6(%q47aKPP@F<s7QyCA%?ABXg0
zsF`MQvC=%5pG+RhipxmdHP$3>8x;6#lL^0w6Orks@cRHNs_SZP!TkRe?+8ImpuNe2
zB2b)VJ;p)7YI(A87X&|%l+gHYj|)POr+{0$dWE4Mnf)y3c32g7J$d&Tf?U8RAMBoy
z{ja!uCl}G3CpI*f(}|WAiHzrUX!v@_LR$-V`O?ni<byhD@DeU1N~xB0@TCy+9Z=jW
zxbMH(=7V>4i&sUt@0Sw%kAR<K4?`;X$#Y=NyoHYTOA}t5z&<7#@hzl?{kH5?pHemp
z{1Um8Ed5;ojH&>JbS|G(JGETyAhK5bdo8c+rs5dSKnT*ucXa5_MrQZCp=ebhy>^oX
zhzh}%jY9y%`l|_9Bu9)l7|w!}^7H1T+gLE@hsbBhA*|F)!J|c^PqMbBTPubFYx~-A
zi7$T;N)n`_V+m$OF;_;jLlRHWN;Y7l7nx}|av4WrUV#^LQ`<(R+t5{!XJL^MG>B#e
z#t0DkZv!<)IIQS`z!M9}3ISNjk8rKDYR%_};ehQr&Z5ePiz~_yI}5FxrTM%iEBrV4
ztanF|XRLqsm)=?f9HCw*%Q`@c5g{nnKE^jfH&mm+;$r0=STC#Ht!QBSV6wak5|UVG
z|8y#&u-qcV;gv)xd#or;Z8R=0GvctX)xn>WXv<`3P*wO{3ZiNuKGez%UlHK+MhGfZ
z;5P1lT}`H}5&R2we_FBq<XU`7Eegmr$v;vRO$|<K4L?MSv8BB}CL%ki_4N~a5y852
zCr%ZKGbF}w*TM%khF3e>FkHos{4u@zTqbob4${@;1lLSaXyXp1I%p)@igL6Z+jDz<
zH(G2(5WCtDbj!%EVr(ttq+t`rTC`Q;OltcZ5?Hi)@|=gL^Qs~319C)SFch!-u&*e;
z_X2RfsQ})ghzddUb2!et5R_tX()$=Yfp6jyg`hJ~0SP*5SgI3SMSrHGs4G)IQghe$
z^(fTNUge4Wny~cUnmv!wF6%b&7cnQRZ!N$2@NL%D{Y}+Hj?G&&O=$+0zhOdBBQa(1
z%>u<IB=+GGD@q!ZV)oOOCJp1LLjBPj!8>x|+A;cp+Y2o%A}uzwy#AN><C(l+J^?NE
zvnN8aCC*VmH(cSqTgKXiY=$YskQ#U*)&miME6`tVj_&r(4`2#t7%h?CZ%2qxEin9v
z%I8|MUrrR+QE7WwOm3=`P9BZdCN0=48>lu3JUya1jJ9@(Oh1>6Sf``Qt#aJ86!A8(
zwZU-uxq@~8La}?VtcvRjfVrTYc}QzYI^7Ukg|!{&(Xty{{=CYcK-))Uj?3e1MpFcY
z7Vy724=6TyosK5NVOt@{mxTNm_R2${F>Cd+JxQ8f@%%*KTg#%9Wr}t+PHEgTdnp__
zSFxWpymgtP@?d1n{9(stnzk`cS<_9C%rK-G>*lFX*9=#1VGWe-b3BTsce3S_z>AB$
zv(@v+;4$^KNKP|T^T_$HpA;+54c<%Ewx~`T{^ay6A!u_-F_cU4XJ)cgY0XjPQ^qLr
zs1p}oYDw)YGQ4xhifnewnTu1=IWBV}1A!gkZ*HG6-;IObIEy5j_1gG$hJMc1f-~&)
z2jHSkR;kPLg1DIW!D#pC=9v#=<7awxk%{6$(BB=9rju`o6crn78hB#r3%1fnrG$lw
z06hHYn%@Hw22Pr-={q8`il?Z0w%WszD&3goneRgazK;h?+SdXFX68zMQV(2cjJW)b
zuK&hKTXJ~tPY0*_t48A4_gx~c2fhXzZ-89<W_w1k#Aka5LDX6{pnU!XJe4C*6+js^
zAW7}WS&wpjK}ags2&uTm`i%Qe!D$)rw*f`Bx~wK6J=fF-w7Cl?-rT_Va83x&<$s@2
zEA?mjMQu`h>ZN}H!0o6<0JQ<QP_;2y;lqGA69examfp2R`Vgf%%2p`5hYDs*@CCuR
zM$hl-P*w2%w0R6Dw%SO+mk$8;2|@vLl3=0Zm?s3?!l(hB<Ej7NQ7qN}jAJw2URoP0
z=pVx^i<AmMKmG(5&If+b?fqkb(<+sXFL)#vP4(=KeO~+-%339Rert5h_FvY4@_w7C
z28OOS3v9tF=F;396M{7GQeTq>JrSVhivCv|eX^tANaSPO;$ctV6e4$4z_X{;m-u^B
zz|5xtjm|P|JnNaRdbf&veiu}0!Y9Rwg-lv?KY&Zt^!IJ58Qf9ZHQ;FiLpBFb@_dm8
zcYVtyMlTCN(2cSW<F41FuDxkam}||iM52-XgrP=c)C0PU5aa`4o2>i1ILP~?f@3xd
zK@xuJ5zj?<pMdr0r0`%K67b;J<g(0kJ?*tslc`nG$P?aW%GSYnfdIEVZuJjOgA!q8
z#r+9Pyg98wZFPN1&wOngk>AlE_#J#4`Au60x+u+q-H6>YTgGh)!ZFNze^z&|e%sP>
z0@O6H!{*-<0A3Va2s)3>O?WZx)=`(hHaPaGuEF84QUe{@;nJ$&3!Ru<G+`lG0QMf#
z9}!RlH>}hY*75Mm-Hf$Lmgmpu16(j?%4CWrc=p<3hM&7dC9}gf+$Cq?%Umxqw+phF
zv3#`l!?odJ8&mi5$f=2pwViR)amgZz=vNA3$nB>|FuO9~1Mdr7`AXO+Wqy9f8ePyE
zrZ&4fF&WPGL+9orRh^RKydW3+0`Ac+F^pK@#cOm(t3y4_#!WYF#S@y%FSb`mE9AH`
z?XcwMN&|A-v_t3kiSQ{BKQVV|u`PQrQF55)>bHr@Lgm(Gyzgi~GGl<OyLUyKD~j{?
z<VkC~=oz(CEcg~w-^ws-NZ3Itg_31zs7Vczt|5L$i{u=?RR?ax)`htBp~BA4RNk!%
zHnqsds&?-K$Kwd831O@eDNW@dBU-jb*yzO8SR!gPH~rg*wDPZ0S{teqvJg~NH8RVW
zLsmNgFs&Wey@Rfs?n~{AY6sl5vihf1I+zk&@vqOFm};dy!}_l}ox?5}%?@k0Hp!Tf
z`2vw2u*S~c?=YLA=^Q|HhvCEu&r`xBzu;z8cI|P#@b;Mq-riJyn=s|6al{D+J#pDs
ziXQ@pF;{y!Pp0-heuNP${y=uMLa}{un-)UQ-uI@55wwgTI741)ru-4ho_jvF^925s
zlYNdJj;U$kGmHMNdU9$u1HR6bY3<-}aAOWm%Zdm3euXc@+2cHaBS^9Al$~*W{LT%Y
zCgAS)5=nPR4#k_=udfPrLObO<pU$bg$j`POF5~ALDCF!*K*<IE`&IePt0;;xyr#fl
zjEYyq&{Zh@+8eEiX@ugP>a;V8-Ibqq$3IQ#|DH98AkIupqcyaZP$!(2vTB}gx6|4w
zSsluA-?(Zo1GnF_WchA$AAP|HK{rcv^WrC|wVFvoYFkVw3q4xC7!@)G5r3Z%YSo6Y
zZ$TEo2>29D3Ki}POg#amC<NV&t|?L_wIL=bY?$H#u|RFZu6jrpw_)$(8Bl>SuQ=su
zekBw-ix$6Nw@7IVvuh@f71i(w(VLoFT|g_RxZnD6qMJGeQB9`G3PH!M|IyY7;$p`=
ztYlUMwj6y+O503r`dsjh?#nN^Sv7L6fTIJRsd)HLQ;<CZH&glEn5#-tICoHUP`&LS
z2No0IV?uT)<>X^rOj@MkKYW(g^$T3^=8l*KYjw!K|I+5We9gxSXE9zYF%AG<pD@eW
zY^I|fui45@lacp_OEBRc1OCuOMF^VmD)YPB8PH}UPObjV&|azJ)3He73}h~44R26M
z@`xp@@V+Faat<T^t(x`>0RYs0|Kc5v(NY#`-n_-1L{7oFCVnG3&IiI*3<MWXBL797
z2GrE+j$ToKX5PI1`14n(2=)qhNxJVB-);KGgVg3-*fsyM(d#!ZrX&6x3HgsTqe<&W
zWP1*4O#oy{H3-)OgqRJ}n)noQMf=&3W&2lQm!mRV^+|qtPW+$HrWqji2WX*AAWRXh
z#F1f}Xviy{Li&2t@|sWrZcWYCDCw>m1{bx+$^Ezjei|4S{fIoPP3AAw1lY?IRk!9v
zx(tj2SH?Q#KjYxRKQwbaF)GK9J)gw+xr62Zjs%zg`vnoSxhM&nwWSgqa4#y4du$_z
z76`xKxh23w&s68qO3hB>ju&o?ziXK(OJxBEmM5^VJsu2j7RZa$@9fZ4zhc(sw-~VG
za2|4KejMP6fU~f)v8qEHiy4ST`+AsyTN?*t(#5Bg^n%san?*a4&yg|@-n3ks(7yms
zAO-!!f>Sq51aThql}2D7oNOIqR`6vQx@)Q_&EZ5JO!##J=so4jN3NQGw-wk+5zDvK
zog=etq&K$!3<)5iE~^S)rbYxeT+UtU8r^|G2cMGc1>OOvqA>8*e|3;uHkCk?hrnbi
zOMAHpzP9<RHK{c4^WwJKu9vKDi)|RN2)Yf1k>xgk<1zr)xnJEn{p$9=Hlhb$wn-)g
zU!;r(+>Vper1!r?ipW`IJaVZXNjdZMdHI9Xs&4{AKzD4Z#|Tb!7zkn%_#3x2+<`qY
zF4(Q!E0%rqe|t#=NE$O>t~v|Yy$U?}2mk|GapyjS+jXf(I~4L>-t4ei^q$%Pc(-3|
z%aC18mCYOF{0(QW*xNg!I}m9=O1!{3BKo&N{bK*eDnkqayX8q*%!+UhlJQqx$pCxw
z$rT%nTpInahtsM9bik_7)Yz4s7bb$Xhwyi`0=>vv_F3J0B{eo$w->j0%IfD5B=}C4
zZF<WeoR7*y6&ry}{#9Uris`#uJEy6eka{fuGC9=Pwo08!-7Fq-pdqieNGCBDOlDqV
z?8kR*R0rwpSmoe4T$-lkUH3FyWVYE?*d^AxX6R(fO_Z%~xR0<elof~qyJ%bj*!%uo
z7fAd;{YnFljb(>doA<zmJ9C|**|dr6`)3LFv#&<^XlL7{exBW7w~x7^D<yN7%JJuw
zH%1(7_P%eKRhqc!pr&t+5%J3m)Tg>UDwIOI@QDp-L#OdQh+_jbWvv`2e8{B_xgDQ`
z{DO^=w`L6UiCs}zWI$J8-IX84Qp3qn4G^M5s;!6nXFK>h;r2yl4(wl}77JXj6@I{U
zTfQ;RfKiHT%V4PUFfOh{#qj1Kr*HjwuC7e$F`DMZrlY281f>HaF5bX#b=t)x)<q2X
zJZ{@XJKhkZYd7-_`(5v49I*)KQoQe;z%IcYt-Fb>*|r#RUJ-rmCI?^;0-CMUHLdWb
zAY!-j<3+5zMR}-a|KlwlB^vt!m!rZe^>Tw;L2Seh*_Etr%J49zpESK~QI^XXmFZOF
z20pDN@DWKL@`N$vuHDPVB~}?JE7M^&96x<w2AeLW1!>=eHhg@I7{pvQ4-sQ>e1XUX
zJy3O$<4d)=<Ce$7r*B3Pp@5bVS;seJU#@L|xn{rER2dS~`Crz1-8sR5xru$gfg&*6
zaBX>%C1h5fUkK0Kw9dx@!>&qYs!)meOK9H{7PMhqQcGf>K;j8;3Cy(p=ln(>tYpqS
zqR=Sxpti~|s%@%sL@?~#8%%1#Pi$6KZXt+I=BCov<>Zod*L|oMlr-_Qd<}tv{?m<~
z9cUH!s8kDU^4O2}7(oobTYiy{gHV-oMP^l)=ugE(yPA^XCM#7{-jwZDmZWJ1I^)j2
zwHVy7-LlDFw0Ciza@vJ;G_EDr(eQOq1Dgn1o?7r5a*KtenqBVjXc2Pvc$gM(^&VjH
zEC@@F^|B_VHG^E;d8o8ir8k_`T)WE8VNP-KPkMP3g<B6R0(rNOmVZG(TFy1T2BX+H
zxWuHGJRwMJ!y!f^^R>=bwysUJD|p?Gytc1+dd-~@-h%S;OkiINsuEWpQ0Z<%&J%ur
zN*gYBaV6`@^50UxpNH<MYAkRo-8xDVDM~!7Ua6x3w4?RS%HYo{<sK^jEsZmB^)J_)
z^ZsTU1xpz;EAea~F&dt9?`RzB6=ltaU#!hORVwHPR1WcJ5uo1IcHDMT)xWbM)fj0=
z-(mjXBm6_b9H6~CDS+~77`My>oDTgFbK(QN?y0{3Hf}V7`vyn6h72x3=&<CbCq|mk
z`&vuqlrd9}Kg}wv_g-VOl90ivbTI+dwy0pDihVG9RtS3Yy{TZtf}m+P-Z}3;+^J~3
zbaCWu?<c$3OFhoGiBgX$KyTKd8>gNexm5J}0FYIAEQ5jHN3EnV?9W1uNJ)#nxHleR
z?7Jso>~w41si<^1`nM4-_EuzH^ZJN$+eB@UiidQ=fb8A2g8Ue#cV_Ypt&wcrXdRH{
zSQTTcr87AqvGh!H$R39ex;&%nycqapW(gDG7;hgsS~>bg1uhmwq$t}{l?xmn2BcsM
z4{!sBgrN{0qni)hu6{raZPpVK!rX1<zE7$(RrN<4!>wU0lJW2CuC>n>YR5Ake84xm
zBheXDZ^24U->gcfd1hoBGzaq0DK+fQhBkSI>#y|YMjj*7uID;hGPASoz#1J6?<j-L
zR-<tztXP<#E#u)9^bw-z<(l+Gku0N{x4WIv4LsJ!Qe39$sU-Gs2eS|l&ggA;U?7}o
zm_Vi1h`3wiR#z2-#nDgtvwduhvwTtrs6~6hN%y4h5I0hBfT{Q{q`?jEK2=Puu1=Ja
z9wm0EH8u!-8u5>Z{NzD>IySTUG)gw~$>8i|(jvUA#V<D{`C^d}<Ok0(7D#-w{JKd~
z9Jf4Qx9k-O>;BrhMU4+t=B?xsqfX)0s|&i_9rM?niM;`gw0a;qlsK?){7vqg3Km5>
ztIah~)24;IW>Cy+Q~CPf+r3oQTm9|87T1}^13+F;oqUcE6iGs!b{C0n)Iw-Ew8RIb
zH4h2CX$EbXLF<B&sOehMm<Gl?@dM^%{LSQLYnb?r0s7nr{&e_&-VnDh%cFZH&#!7)
zeELIoa2@YU9byfkTq^jSLY>PT)oaoEJcN7kCsHZZy6O2C<)NY^K3G{<>92X*ic4R$
zSFv&WQ%ITh6Ji%%e;mf#KZclcnjDt|A1Qo{rgVq00v9+#n;hKch!9i_<K1nVbgC$z
zEldNPS|wfK#aWNzsk#>IQr}MZVZLIA)Z~GxnZAG~NOHC5V?KH-aC%6M{L>*BY}0~o
zuD0d`;FQ%7c)<A_Z%Wj?jvI4lgx65LEx6})o4EE)k35Gv|6xa=9E~hri9BXHgiaJ;
z^PjuOHvTi}F2!2GbpXg?=kE&BCLfZ1ZW<8Hx#@I}W8V~>Hcbx9rly!mx;Tx-(I%+n
z@$}TMmDF0^Cf)LQnCSSj%X)9VYW{&1QqUJt#KpLR=P}@?m)B-T(<9%UUEp}bAH~t5
zP80+*{fy5R|A~d{KtTho6D(P_qk|XE$nS*XmnucMD24uW`x`crrptMqu12!Rc5Q`C
z8xPBaf}0-m8~J@P$wo8om_^sr`oL{yJ6PSrs>pBCsM?7285xe7!4M2<f?ETLWDDKl
zYv<gR$aCBoC{sC2t<?#(-Ij3}8-{Fa4vgAv^%^wC79w+SEp~SzI);_Uu`M>W@BIXU
znY}~BLQsQ?PW(_bjneIr{MYO5@}4vVA=y85L*=P{=_2Wlz*TLyd7>=O93P=ndhWJ!
z`7GC{72g?(REgVho(L2Ss}i`lZuf)FF|*ilat=6lcne;^a|)^__SS);+P14$1s%<|
zW2DJZ@A67<D5XFoDuP^-;XKAe+ed2iDY;dVkWp6$N^pS^I`HSDPxyrxCjfG_62g=r
zey1&ye~|P>zQ8}?G{e>-qh6#5K~~3|t^MNMdu;3V34tVkTuPYzG%maf<LYwKESWKK
zx&0puBTt&@Ra4uQE2k~Syt$wz7l6S!qG>w8WSZ^Q0wqDR`^C&hm1R8%n{<Ihn37!0
zb4yf6!*a04r7^KjbH2@-V7qq7^6tk~ZSEJB=iN#ENCzRvEV3AyYlUKl^87Ru#l}`f
zGlHnxnH{qt|F_u|TfrHyEJr)YASQ4@dzjkX5!K5(4v(qBwY7FYHt!M%Y(5#g*!ky@
zbplEdg|B+IuKir!tRk%aZ9S6Z?_-eWP6a|pOBf1Ya<y#q2Bo#^oO&6O`TI2{c;U}X
zZzUkdcM*T8+E7_5`e=yfUFnT0i64LfZno1$l3*C_C%yT5lHh=I{-0+jN}+6+AK>LK
zJevP`_S1qrnWypNoM$t;vOIz;pdZrf5$H^%ytBjRZSO~Bz}dO4KT`m|(ua$`n<xz%
zJ)hP<hjSN`Tx}I>hRwvW35Q0$;JO;U;@IS(+YOA1go<x)1OaBzal+X+x1<Jpekm+G
z_W`o^JV0M5%^#{ESxRr1fO$vi`eK#wR|<L*(^`~f;)S3K_CTT^;AbCj83ixM6)>=#
zc0YVNTz`0rB!Cyx!kmkmc&0$Dn5v#LB$M68+xkJsb5aL%y)+#Ad9u0XtN=(NDX2N8
zsb&V3>6+`B=FQS*KcH+dX9(piS7UwV<XkmlOzgSew6`i_HD|e~<7Ud}5%OnTxa!W>
zYP3gc)lARNype2~8iM<7jUwKxDjh#_B{s_^;~(=xdaUV><;!%b&F<(vbW0IzUb#Nc
z$j1E-%M-fEd-D?A?Ba(ZzhCPR>5`Iyu2mwj0VlKO7n2Ld+P5c7-ow&W0V2w;R(@<A
znqya#KUJ+<HeZO*%8<(4FBYf9J+?j^;f>S!-tvQ``E9q@wSH{7b}hy~5Tk*lwFcNZ
zwco69hS`#P%Uq*Q_Tg4t(M~t2d?9^xXJ*i$0QiXy?iU;BENY3W)u;;9gbi-c9={JP
zx7LRpkM_AVZC7Wcs&s2?Oz$SLx&#ADXactnJ9v$kH{(11U1^#RC*vSHfwGoQ&be!a
zA?l-$VaSw^F>P<D8*Eg_X8(B_E;G2V?F~`uk*SPJ>`BdMb(%X1U?2DnDjMIZuwGi0
zS$eV1o5{`&ZewXqz;vF8M~LhfXN}UKa|;vj)P;xZ^eSYuks}X%h)}U~uEAt~M%`jd
z#qeF29&cy)-IC|5$nJVug(tWba89a_hmrl6bf+Y0l3+gpNDUj}<TIe_V)Tz6t=MSw
z-h$23P{6No1X#KaaW0`?ZiI7KfggfV6oMq9Prl_H1bmt`LezM05G3nP_abC}VnW+)
zZtId(s{V6{U`U7A2g%I$mfJ=Gi3(5XY<bH=4lGV??OxF`KK`oe$gDu(7OnA{D>I;!
z<05!SvXMNKLy<o_U=j4^jc9tI5R~Tl@tuH8tr?T%oblI#ev-D!eUV92T#{C?!GUE7
z%~eiNTK-ew*}wG7^5>}uD^2_OQY9@w=s%*uHB-LuE0ZIM{<9!&)$YMs1Z+US4^v6o
z$^<9K^a2^<j+k>14-r5(`cKEcybzI}mE(&7F*M}uwVt~EI8=DxN5RguZu5>n#sC)!
z&#CIqX8G6V2^?$6My&ihzyY;QH}o0Au2M_K%#=iXJb~doG+W!~%B1kX(RDJTwGUdu
z5=M(t7rilo56t;mWEDu@1f30I#0O1IaHoWz2nUZM)8Inu;&9GXLf~a>s1lz!2Pq9H
zbt@gyfNH;`gg0yE?FrrHIwS!r3rR9=;o4UQ^6c{r3qv)HTBhE3C|+iC4(X4m2hqwO
zd+}^yF?`}07JBqkTt4jH>LXkjI)A+8oMpDxW>i79&5_h}s*Z9#`N%gHa(6kuZal!B
zPpg&teVRA4IpF?%{6fb#uQGyjEp`ywH?y+on_Dxo^Sb#<qa7w@TFHireKx+`HdXq)
za<g{0r82$uJY!i1S{0{~-926;MTzIu3U<6A<8QgDZLh-H+7=<!n24IEl?GYjkhia0
z+)64EQJI~q4sF~6FQ7_@d~ZrS7F}r8oL*wSNyn&ocCWh|ZWXtFLEF(gxEj(<ZrQHy
z?87Ionk81YxH1T&A+6`UBn+wvV8x)Ls$%}nnz+^2hN@+2O3hA$OJ<y7*=h{yuMYz1
zIDRf}KtrunZKfX*ksERwe%ft~PgS>S*$mPjR*D@Y`B!#~&Ei!?rFY}#H|$~ej~wpe
zTmJd|u5?)QFvK)a4uT|lah$l=^TAq~(X867SW0y3MmfoCN@ft1nN=1h0kkMbe3fv$
zz6kJq%8pri<!(dp%e7pb8kf?057!{*#p5Ej?ocB5xhoovCCRn9lrY?j#7xP?GdfCw
zjUh>$bB)ufO=fjvei0Yv2a%b`4u}N#jZQS8ibQp%Tq9skMKX)X4oXDdC!(6{oP?-A
zFXdL`kdXi|#P`F~i`2eU17ni(F?rU*)}mYnVuGm-$CWn9KHino!Ya66L;taMV+ABx
zH@+Z3Wt^r-aXYsUWOl_)P&C6La*ayyuI}I{K5cQ0LHx>ItL3R+A?0}={aWIBLssj6
ztcEqQIz8r=DNoZ>gWAq{&w;e|H$GXU1XM1ngos}qE}dz&j{WwnN~`_TH&c#SN)GF$
zCYch}1=x`)VpK#bRsdNEkh%dJ&xFn$uhk~!&@6)10M8X>Khqt0zu2f??Q>u5#w}C{
ze6Cvk%<!9v?1W8#`)uBBOSpg~g>7PW__72QUPazHewCR;klRX^<DXC0M1F@UUD8mL
zd8w8+nR}^~p%0ZMD-!bbi$>k#Y+Ut#d}eCJi@H=zuZCQ$<cL7{+?j1hedODTqI#&a
z@2KROs-u=b34c(rjf>xN9Pr1CviZcVl3IffVDc1^WZ2dMH*;y8Wzvz3z`eFHI<qLX
zQCg1ZLt{-Wg&_N#$jO!$0ttOxNx_Di4Unh=$qcXT7qr$mG~^sLl0RFrchodD$ajx)
z?)}Cz{T;o$nq;RS=4>djfLwv{LrZ*8*3Hqd$yK(KnaCF<%ftVeg)FT#YxWO8`ff-x
z#Ff=;E2tfrJhO4jJnDz}ca{55az0j>r}ey>?d%%2JhUSm9Z61q#VB^t2Q}|hT5@w+
zH63dd1|bvi5k(fqoD!N$Ww*4r_BvjTPRC~axY$+7?>xmN8l<l+lv^E0KRo~h-J)>(
zuz71-nhtIqh!qDrBsZFPixt^f`ri>0`k&Xm2VGYxKEKs1z^ppDq7;%~owOp>*qNEi
z&57SLT=P?u@-Ffx5+2~+@aoHm*z@ZaY>zsKcEzA(V8~G3fp5!Sj*w_ADfQ`dbMhQ0
zwKBu*HL}_e<{k8I^ii*ssZXLxf_gQQ>{MZAoh;b2>!mgT*28jv=wEpFpJs+YiQKSZ
zM91LLWaPMUt6<2m$Wi{JnI0Bqd6=PTYx6zcuA_yZst4%IA4=HK<v6*f7XvEr41cx3
zU(VO6vy_EKuj#n0qtY3wcu0HwhS#&!YDfQ$EI66dc6|i4eE1cD+2&#6OZSO^he-ta
zK6KIIACErJ@dXZNab21XG?E3)V700=y4xRBhh2)lb<IW9yj|6uXwF^}zbo)w+@wxz
z4s72{trFOCTkcD1_-(0?$u>8Krz|Q~wvcrxiYn4{5v8vHF5q-JuI`+9GHzD|S@v<g
z7$nKE6MPxf>vZhpbOsLOzW=FTt$7$i^bKzw#uo6loEo`J`D6*`PC*#%2(hTMGUwB_
zZ_D{pa*kW*;y9!h661I`ry0HGKyGnB=0OYu&rboYgjN`@s+8XIx+m#WREE~~c_{O=
z-MPjSlV`n}h&w;B`EJRJ#uT#Vx3exb=VF?<*dbTHpS=W{%6!Qqv?^2ix7L>`3gUjJ
z;<n)HY@U*LHCsg&lf=q@h(z)|5i~kaGSY#HO#nw-T#<t_DlEZ}uj`%ho|RFnap`?u
z+6n~+0uam^W!palpYDg9$yLa?R<oE?L#VP{@ars7XV;|l##(lK{IKy`cBR`LxzUnF
zSLcUT9G@$4A2s`CcAuK2kjdU#XFF+_aHKfa7d(4%Ov9a9v-nZl71<*3!WwyM+9~N=
zG{YW0mT{dNVfwL<mD}@yRvD(sxj+`6iEXp!m58fytHFst9?{mw#f;BYmACJH{UiId
zx%;F<48RI!-`nWI#lS<{gOV{TxzE#Ob#6bxMY&FV6loYsik93z`<HW8-q(hnR&t3}
zr_n1?4Qe-I7Y0273(w9H7y*&oGPMnJ-h+?KhPk|j2iYIo-WC5GT56%tvbDs-Y#SLU
z+;gWI|LoCr69rb4Ry9+;Efy{4eW-Vg*^)PfBNl%y618=_uV)anyqy5o7*QVae;ZrC
zUVYIvIfbp&KQ08_2hfxQ|7YQXouL_i-qg^xM=LroA4qU`xY?_re1ekWy6c~`aiX=s
zUB+)*ht3_V-Eh>-Fr}*4mc7<9@ClslcreBo8q9~QZtdpaQpzU7%$1KSSggo*BM4B)
ztX`Fs@=_(sj4e{F>-+|mo5ZW1Zc}4J-nX@-Gv-5aQ84QQc{}6|w)lIfd{p+I;MVAs
z?Snq1{#j2MP7bqz2Z+Y3ekiZU<Xb7SnR}=FrM>vP&T}jAA(w_xR}=)ydj{|%|2XQ`
zgXfS+0N<ZkS6s0B*2qQY^T<oU%|T`wf?x7a=vi&Z(!5EXlND6s1c6m6LAMvqN>0Fq
zS?L|wh{Z)W2YRfP8hean-n6^)rxTYFUD)^QJFq91S!J)Pregtnf>NB}PVyn6_@#H^
z4S_1Aheu{Ojya|Zz(HFZD+-JryE3t)p)6R+>P|hU+&mu7vjJ#}y)^(bebVNxwzwVw
zq!OUdN32g)tRs7r_iQ>~{zUc+C;_PVxXU<rL8)L}sSAkX#MS=$HKGT(`3F!CUDq49
z`wZDbWAdrhkKG%Q@zMs1u-JeD(FISKV$AM11B<OY1nLh*$_vfNZG_Ws0dk5&P4jaq
zA31tqJTGsUdGr%9YOcSt;A{GfR+x*|3gjm<ehD9I1xKDMcJ0Qx#B4xvwG#p~lMT4~
zpQMM9BZ8*>ac)gb5Wl^VjCayqXxJQw)vo8xVNGtH$xH6QC+Njg@v|+=uXpZD4pJD2
zTYrf)V)^daJP+4Wix2$olf(x9rsw*1|FDmEFkblv+wxjsn{s$1YeH}?Q$F{s;9KXz
zB>t!y^u_jFP4aDec{}%76@v|1!)ycJH;#NfqZs62ic5&d<{t=tP>u|pNo*?CQ_$0{
zjR^A($okgL{YXG2Ne(;WRrO4&rVuH8UA}~fsEp=wf_%bv-^t(Ih=UUo@IaAublLFC
zZjE|x?sIazu4`m`NDy&i^l?*5A;u!vYyG^&Yg726bu-k%<R(C8hmP5b`?-@TA=)$E
z?<Xr#Y+$awyw#UQzmk-%qjT+#>!bYuO(&XU*d(_NKe@WT8#FUEbzw_YLK+BuG<e)s
zZrp6IWtVt+*9^@W9zD(|;8{@XCq)m0%>HPJYRh$q{*GTKG!uD7{?c4mG-fwLiQ{OE
zY#jdS2>n}y&~BKryvoI8HaXxD(gN|9OQ5ZTgm*g_QG4Wzujlc|ep?A|{peM7UFk!y
z6WM5o2j?;X-w6I`UX0xaE0GQXJ}e@?7>-1!?H+wCvi%I$Hx;`jz}^C{=K0<Rl2i^0
zc6=hM|L1|9)$Zq4{XcF@_1=-S*|Hz&9BE@$p@w889Smps3tr@1UsV|r8AOJsJD*i*
z&aI!8RSHC>i|I}wUzF+7B>j{K=`tzzE>2YLKk{IP325_Uri-m=?5gd$YrR;z5bL#+
z!N>11^FP;~M_&91Bsf41PfE=eCiw$aK3oh)HB!WJu_H+lPj=MHE&7UDC;D6ox|A%X
zW?3L!hl(yH$bUHZpi<T9ClJ(WGkpjiwN2lmVzUZ^T)!`t#=6q0>mcfxn`r&kHfe3O
zl(?c&%giGVFPE=+r8eG8z;=2G=m9JF>Rd@&TFBA*TC!L59euNB|2ArVsUCdAksMvN
z64lwMwrl>0n}wvX=D^3NqUvO#kXu6&AJMv8vaaA}84*XWV5+LZsgyAF&xH882#Nu+
zS~;+i<R>vLbzvrbEfvnIhhbIo0{==4Mag<`nw?NZ8di(4t<79b?-*2D<J8Te&p2}7
zH^d*8Et*Yi{N^JWLFrS4n*<a*m(ciA^UWBi>Lm%6*gpOl{S79O-0orTq>45K{1?@K
zj+typdX&#OZ!5+PH2~@(WEVzgY=Z2x{$Dh`XIN9&`!(#$I6798A|ndSfQa-_n$q$U
z1O&uL4TPq20wGFoAu|>b5Ron*gx*3xN@xM10wTSJ79i4lA}t}L%(LhJUhgMzof2|#
za`s;Ly4PC!A^S3k2tXn;KATCTx$~|Uz3%^o_S_?$G*vLU?!6&yJAph;HzP*3r?vUm
zK{nHwr6Yv*TKWQorHP<bm}bhcYByQ6*I~^rp%`V7Mt`DrG;x?vPs;%6qoaW~LqPC(
z*x5+V6n|rIC^+?pJNGp3qtk#4*v5o4U8XDf=7Y<s!_1a{Il%{Xb$O45XJ2%B=W7dk
zS-;a9<iCdGZuG@<?qut2`NlK^QPl~4D=Q3}mXf9*CmJ27@IBx{;w!-?V|bQf(vx^8
zF1?#~@OW?mTZ<5PGfmRP6N)NBE;D@gu)RFmQNq@~ZhXTNEh~m$KKFSKi$8GcIz21U
z9nnl@sFWSIlSa|Nc--W9t?89or!si=n*GsVAbnKjN2OC6pBH@V4E^1L-Ei<id~F|3
z3W3LMTv!`t=LYPNqGXrMPe3z7$)u^=&)AGMcOcSCaKY2WZG#AJiF#vC#<ypE>qD`7
zJr#q;MFNR~0)+@d$2D_Zc78CJCEbftX}%UddzuR8-!}hc6Q^KST@sS*TNQ!pPi*I?
z4*gzHuSEpfIr1lNhS!{h52ckctRb_Vt9N1iDC<S%+2-iPT{Jd`s#gES);I^TMd5DD
zpB2nkJJk@rUA$KEQICIoRX=#aNTDhs&co<Wrxr5F1M?)1U!yOJ6c_mP)UP)8WgUbb
zAN98O&tk0Nbxbu-RE&TEd_*<N3pwoT<U`$t-B#Fu*5YBc*45%R!A(sSo0sUm3<kBu
zohSQk<Uli9eHoewp^YB5+z~pRY5XOS608Q9mre%K+X}2=toEDmljG7e%$WFTZzG1K
z0ZMwsdZBDqyLZL`oiF$nD!Dw(!r$4VIj$?>ea$ez4J!{~<Lih`E#o=MB1V$a6=jYK
z9!WhD$-sQ*Su<6VP6)o$>MMOz`0uem?^`Ac#@-kSlPvcH8h60k%3#c@XfnT*&IvW)
zZNjjIO#aprY@QZSyai0;RLvUi?Eu}8_Ey$5CtAc!Cs}AEXTGQeh>XITG6!n{e`A-^
z-xFx_q^N|qK&H`RGL{5sBZSrFC&DdpES!gyZmf**qnn<EMY$)$vzAK+J(fC~%7p27
zyD{fP=Na;c*-V3XFw+bbbF<8$BpT?0h#NWZ^?B!vByb+^Hz%m-yQr5Hs@);Zp1&E!
zG;gB>u`<vbB@7M9#zhUC%}^ar%8_-~YZ_!I8O7O$7yLR9FiF}h3MD*lElS$cZdOjO
zHb;GXVfiB}p<>PJS9ZThzjVJml<s(D(dnF8V&#U>&l;1IfsdU{I$(6%f6!bQBqDFo
zlM_Z`lj0wLlW(yK+ndwHu5I*-u-Oy-FA%Fq#ff_o9T5k598(8o%!0R_oDDw(MT4#I
z4xmcyabq>av2oW#JY@jz&^axfPu9Y(wH(xl&jh_ZmdmTs3C$A<2#eLX(N-cogBIub
z4V<uaOO%)#QcJB%KaES@F31E!bb@=teea8|F1snLvPL_L^6ZCh?#ki{dNox)y=0Z2
zlI)k8EYr)dcLq)X?~X_&!sa_l^?zlRQFAf}Ljy<Q-ztO<=2Z=`FC_)6Tk7xMVUL9g
zT=5RjTQw%_PHo&HV%Y~UZ;@)0K*ZN9iJPWdMvSR07+zGfWBP4Yt3-gOZG(#Wb?fR6
zHxYNQjD+ECrI-iDYCGL;M*5q??qHtIx%k?&`5H1?<L!xcw%Km~sLj~be8cg=FD5#A
z6mN*6MlFw4y2oeH<*n8k!Wa8qcke}R+uE@|#qP;jEJb|Ve$#xb&<)8O_RC__<v1UG
zx0V+U8lQmv0zCAY(DagivUkuAgP3|4%QmAtdnRbmyV>RmE2x|XZPHh#mX<7?lHg`v
zIgI$qBAvzyR?lvf4rv%I@phrhol<QvVjZwooK9pP<?xxE_4qrA&KkdvwVM?MzLxgV
zfoeXR{b52Ql_;6tbq&eHK6Y;V_gGJJtK@_1?PbsFAsHDkzY@B5@Q*xRWa`Oi6-JYH
zz+~KtvL4WeYCl_dOe~!2^wjlT(H?3i?zwYJbxQ`mW!qg&XILnv3{CZ;kXN1Lvub%&
zhYWTtEITB9A)E9fa4KNags)-a(i@k=Y)<35#RhX~k=0@1j&R2j-)mZ3=|0i!zT|(b
z!;)_2D0}e`%IkGh3e;lOngoU__xmfWBpDATZG~s9#R~;2550H5tI2O@Y}4>%4hVHS
zk&O*dtkzz|u4!69w@;BK%T4;V+u-ZOTT8{{EjT-Zx@CT4UH0RZ(larZW=}zmhAlfF
zg@j7VOOoeKKYng}=eZ?6=9CZBgxiB+yuof+-ul|TJEmi2=I3ymI<It27fO@*layHg
z+vpOjT&ZQ>zQI67E}u?uEoA#(XUZ$p%=t3kx+}SytAMk;&C%7QCac%&V^x<dmh%@a
zCFpL|(iA&(3Yq}6Kj2r;>i9wp)N$61-Q@2Jegmf49?(G=A5}OZR+vm54L|)76JiTW
z4u?GPS)Glge0D1N5Y4n}+eob@pL=#@s2~!u;AUZf5CxLyjxQAw5izzo(H2lc@a-Lv
zzFTGCv)d%ndB4E+F|1Siwm_`Pi3Vz)zsK|r6NVN$F#I~D1^(A!6qm~$WA-swbOnph
z%Wc-|y60dRsOoKQu%tb=DSBv1y;~zn+vaYZADbk7>1TTCJxVw{G^MtiZfs93`#mdO
z;tjh)NxK}J0mFlL0Hn(smJn^r$Uhw_ZVkQTkSSi+U1`u+X$)4Scwu&>8aStGx-jR$
z5})(_JjPB%0jb2hmsXFElmGwASI~d3da&;vkOgtpIfs9bwQ}XIT9aO5mQ(|I2d<~L
z3plrr#FZ=-T{<-~Wg_8|FRBio+D6=CV^*>Kj}AFX9H}ILFLJyrA~chJCot#Owgs$U
zYt$RxMQmq!MM4t{!P9L*vH^8o!Xe)LRU<3Ye!}cMkb-zM6{zrEezGUGjbeDaw9j2j
zzMD2bKBWjpEu>Y)6k9%&HSVk1F4rcu!;1z=3R(}w`}_I{u#pzOW#-(B33pu-v@OKX
z%(i=ccTFueEyoiBLyeLn8N5B;$_Oo_xwT5!k3R%A6408e<BxUfwG^)1JWL|5qRa6%
z#Pu@^$z&DFV2#1o>ObZ-tFN6;lE1l)Y%83QesFTN<b{Q)-<Qwo!Tw_$K3uzhQ7HeG
zEuLq!-RV!dpn4xgu)#kLK-J=W-3}0oZ{A=7XEC$I`g_)h=T>)mSA8!@0ioI394|uC
zNw@DHyl9S5_8C+Os&+p-IN@_-8$KZA2qk5QLb(eb#B|KrhM#~`6Ur=4kK^M!Nai(>
z8?oF!A#>%93Xq+@;&`BY03Q+mdT+()r~ZeLVX;v8d?mIei&akj>|o{lbpDR2=`jik
z!QCEX-a=8@K4duz!w$<_<M>H~yCW|~&AmUfUGpY$rXdSJnS!@Zb)Bptl&2Pb0TikF
zY%!gxl*Q3(L!=S3PpeMUn3TDH$K)5&f$Gb_M~^21l+{6v>=>&BR^)cjMNZoV4AVP}
z1WH&-p2q&otK@LfA+t;hlY<)wmhudqB!M5im}M{67?$=8lV=IT?riMmTk<aX3;%`#
z*;KgO*71}T1;PipQWky;`+gsHk?e}QIpk`*EAQ1*u2kP{N{o>5c-OU(zw+*-M^hf-
zTdDd}@*h|!6%OI*3ZN;T&$Ke$udyEl{_pD0Lz&s=k0sveojoJmN{u}6e!VEZ-I0|i
zTYq||^Cm>4DZ+<{zt5Q)$n0I*a_+@=!<`6t%aA2D&{#QOr4*ghM3kJr6W^w9Cys~S
z&b>MuB=#i(vz<81sH<2wEHT_0B?^Bm2^SIfdHX@hg}3aX@fRlT!#||hw@)-~J{(u&
z-&N)a-E!#S_Vm5B!piC~Be$=9-jZ-Kc@I3!7BS$ANAWuFWKA#s8eWxPWv?BO>a<I<
z1;5S4-=QK6HThf~PDq9_K)3TAii~-VHze>5^!&ZBO;&@$(I4Y06MrH((JXZ4NHgWT
zcK5NNG8c8iDxCp96Nc15CQFLT8V+SYyt@zXP~NHN>9H3{XYxK~z5zp;yeC>0H9utq
zFuetjd~c@)z46u^;_+*ZJhy(Cw+-1Az_#r7-sNrt)Nk$5oQPII=5I74)Nb7zVCEOu
z+|Dm~KRU${H_P|A=R_Ngs3PrgH(nytoc8wkxJ(lU8_Hru^Vn60)mOcW?VN-};cyP&
z1_0s6Iut7u>?uLlP<W9~Kr?TB=8mf}(DEjn`j68dW2er|&HQiNyu1(ai*Fn6{l{_F
z8#W~?I%3|{nHf2HZD(HkWhtyRw&V#@tP)1lJM=u{px7O)cTWza`ju7988^#L4PI2%
z7qmR<D>LREd(2bQLC%=rq(+|LX7)=9vS>C1co)@BNl)#|x=FD=;oq2KKBI)i+a>tn
zY%Ynbc6w<;6{ftV1iurXA1vQ5&akyxv0k!p<@V;c3~kTu(jHih%>C{*7emO*ZT-mh
z?H_FDMUou{_yS;cnNumg`&D;DG3e!5-|3nimep+)V%EuELZ;j7E~mQ%X6)>8iON8n
z(-<-F%=W-!1zv4?5;(cq)?XH{x)rhcA0|<IH1X47!g2c+()6_H+fTUWkcEg{NR0P{
zbdKv-qL8{>4TqAHZWe;XJ7Q`jfdVh)tNGB=6v?vr)%(dd!^i_mqqIfeDW)`EL+g{@
zf7h8l5}6*EwzCW&J*|nLShp;8iJfPwXO*uHuIMo<ooP7>O$f7~X2XK0j=OApPQZ?;
z^}8(=yz=6oXyQg4gT+c;L9A+uZs*xR26u-Q=?f)==Qx(E6C3Vc>IHJ4Jy->s`lwa&
z^lyY$E6MEg3>EnL=mxCJ+nX=rnIy0_ZRuS7vD^?XU$4*ZErU!z>1&Xw(rkS`vl|0P
zTcLg-P^azu*#^$fB~HH`zT?hHEMsK%DG5TJ4F9@YbG}KC)YM0$O)KixqZ{m6`v!Kk
zwd1%$eCp->2YaMLU5<ec3gi=^7}1C1*PM$Buz!!ecj6w%V&a2Oc4^#Zle|%EFx*V!
zhU^(ReQyD_P(6;9e;+|Nf9mQ>ol`sZw+cVnRQSpHTJHfRe?{GhYDc4CxTh5?tOgg~
z=<8Rvx5$;|h0LjQj$z`(e|!uevG#y~xeM|&rIp*m5OS=)96I0cyrYKB6wgR(Q2q2}
zyXZyx+#iOld62h;DfBq9i0&}Gjp=>0i1{><aA<o;yuBFELDaD_GwY9N$0}#TA1egn
z5?hRnN)I3f@8iQ2#862J2ERwNR*b0d?_qt$r8)9(N=GMVz*)mQLF|tjkUC<V1z5wA
zhgP;H$$&MHS%<rAT>{~3!l;_A<;s}|ios7u<Fg4d3JUr9Iai_*gCl0dY*xoxo<^8N
z9|i!~@uvhH;STRQCKv#dZt(iHD!-$XBgS=Tr{UFsldw0$hmEeYezc-#=dSmDXg8GB
zaZn|<b0WIbQ{%;yeSS@SMAIm(?_|k=C~kDW>a|+>^mB@n9Xj@ojum!bMwvHpl`m{P
zFkWQT{$u!=!(apIt%jX@)H#by&c>o#qK4It>08!1&vwZ==Kmg3)!j^Ed80bSgvYeB
zD^&44tk;yx%jvXlq{R(Qs}OuGvu%SzE(lUiXvv8Ri>TVOeBp&+;0$g{W{4)L)sQvg
zV74&SY*Bc+sARyMWzXal<JYrgywf9T19$Q%R_D`y=W(wsj*V2vQfI-Gi6TA_MnImI
zq{tR`mUgBfxkvc39@|R!S8G*pgg;AjAX1FBesUht<Ej^TqY&wuxt<}gJZl7Bez+mi
z+C$$X^*+2C&B8fqt9QdfBi*cKcZV4vOAWy>YJem>W6pS;1C7X)v~>`Q+%xY<qF^eZ
z#0O~umZ`Rp+df7Gg#KpCdHO<Lx7?MxrgPsq)MdR!cCkvcIQsmGc$a0RvyDIxPu8n*
z%LRf+Ub$yY)#Q-c&5d~VuNT>xC2UJ0CJt8JYrq>d_ryGJrt>B22hXH--{pwYVRm_<
z)e&Uv^O+dBxWua?-!V1v>)9Y=DN5ABYK9tA$gjsyvT$kbmu@O3N)<`5%Bt+Hg{Nk5
zGjry4fAh@`3PW-(YzRX&X7Xt~@uGVHWx<p4olwgKXI7lS0sh+XA|z->)+}$8Hq-8)
zGcG#7=XTvW354bNwINiIZLj`-9t@F9vL#GVbF85nypq@Xe{Kv+rxt?P2R|WrT^he5
zDsYmZ;Tf#3TRF(4RptElTBgw^--)IWbY%PQu~<c?Lm_|cBrKd~39QV`S6sazXHAew
zN1e0wjZJ0x*N(DpTaF$4kwBAX6M~_Tom;WBi-D6^8aZA^-@#hxP{>2+pPU1yf8Nji
zxd{6|TD;cbd|8p>90DfL@p`y6f~0N1`$Q7o?F5Mp>m}y0r|elxUy!Y5@%t#eOCADr
z1$F>PO&G&W1~2j)NIORp(}qo2$y**Vmv!9GcwXmUniwH3jEfVnizRqapdwNLy|XPC
z?`VpKll>>sRSUTBk&xx7H4W|mc4&)@h_)v(ZlDU#4!mz9fak;pO}L5S%(lM$@cY5%
z4JY#*Grj+}#ssR0t^f8!QvN+QoRi>ne*PO<@Lb0nEO8Z*%$?;}+{Ja>2ZIjQqkt{T
z!~m1>)gQF03Dr=QCLCr829!{WgP<a71xKit44z-wHK{gK@lXwC-(q@jLR+O7ZgdW-
z^}lnHw#)?cHmH+|;D2_3b|zI2<L=18t_>P${I}CWT4hNSF*N#ryX(flzW?OJ!vn<V
zYeb<vqs(e<MmP`_k7B5Tq^Sw;a&c;H)uBDf;Vtenb)yRL0V79Z_j5J|UmYLsep*w|
zMWoTnWhCer5HPyR+qoW|5&YSC39@Oy-6&ZAg0n|4r1fl5K~gKgwS0nhgTdj#@7_|C
zevtJJ%c5NC?lhgVPBL)HIxJ_6Dq&XNkk4iY(m6XA_5$(Bi;YmhnfYq-Ddr3&s6q=A
zg)&H$Tf74?jYI{S6f03QEju;FN>;X|_t^{j=#IsiGgKD%m&{I0HsDcsAtdh3!ynV%
zS@Zy12pO0r8bJLl7|l7+I9~#8)SxiM!QEC%j=%%n;AhTwH{Vs{sRq@^*PlM{7#V-E
zWTY{3Bm8|SVpC-<;I<M(S1;9!jsL<uod=5b1Y6I94uM14?ir1g^3<?>Sqa&qN2=s8
z76AO`NH@DJigZ(NXbJ?HC7$c{z@#5~l}4J@B{T<56Wpf<?y<>l1~~F+H4+lJDOO#v
zhUtjW0W6b;9>E0VuZyZm4)wo@IFRgW&c0?R5NPnKflM#Ii8P#bNk&*OyR4-edLjsR
zTW?6A8v)^IWAlZN3cNWu=v3_r;@$&osJvM4EV}Ls51z=%;=#Reml!@Vdymq#<%tM~
zcp;Wh4?kbd>#jjKzpY}IE1H5xsop9PMxVWkr2mu<_?w!xn#3HcA9k%_4y(Xtdh(3X
zool+H2uoRN(EBtnjAlqq?|Tg?NjHm0PVK3hUTp$dOlkMiTqz`^&KZ<~4k{CutGhib
z_vhjYyKc01Z09qHj-Gx$Ro>YutC(mpp<5TI))RYwhv_v8aw^Q4;v%Y2^S=9_$<kS(
z#ycqE*KkWurdq_#h{VOKsk#e%(kncXkzIymP3P5dHoRQ%s|9h*KZ?$-`}-!V+=S>B
z>wsf=Im-%oTeo@kY=_rK3T$CAb7&)+F?6OXtGw^o*GtLO6#`Rl;sWj2F}!|Vb2XNi
zOM<xKk$$P|+QVwvWvc!i5MO6pz2W!(1Quxl$ljRhz2$Gw)~@PA-V9PZVq9UxI^O_D
z-Y{L9DZ4sZm<zujxh)REPwEh(c+N4g5Sj&e-rS41u?Q!ywW<mr-V7mAA@3~<bM$kB
z4&LG;I-HO5EvKDpK?Z_PfqPl-iV3`df`t)QIW{xZR^=3P<GZS<4%e<c{Cx*na9ZZ<
zjl$xUzePD-=Jv0@9+Y0wG%pX0SEf}=13mcEDU*j&rjz7*mlV!ZVq5oAT})6b#pC4*
z)1GZhqe`6fagzlFows2+(qqo-22IkOF@{l@j}80XjVt4ScCJA66_<F6%U1u-iLJ!g
zZrEWB1I{#M{}<O*y+7key(4-pPgFg|Ebj_|>U75<?zIz5L!Dh^{jT!9sF_+m67KQ}
z$xhTkwcZUX7I@e(vqKj+bciB7%{2WmV#uq`w`60DSKge>T1XRq>&B)uR^`bhk+p96
zhnAZ7w_PT;ZS-<fJMGRg4a=gwmK2%tN!%<gR;Wu?zj)UtCt^fxa>221;t7reAu9+B
z*5Av4ELcUt_9{WF#g%AX!k)+E^vk$CbtYs=sMC7CK~qxI!sh0j$d4_Jb5(;iChNk?
zB+OQRX-Gi_$;I$vHD(_uVQs;%->dY5ZvNlasda`Xxb_FA7V2IHX2)uk8|ls__qJ8+
z|265&9sz-bu?0iRr{Tsoey=loSf&~)Aegd&{MANA|L5$xUZ>BQWJcx42wx;q4h_FT
zTz2dFtx@|<#Is;lk;hD-7?9Lwg847EJm4>7+tUo25Y5_YO^?Te%bG8-Qq#-D`l82M
z{OyN)IojcjJHt!f@x5ou-`m1CX#Ie>3p+2oh$`ErvlWqBe#{2YOopU}i4_!0dtYkP
z9|;ATw~8tzS`>PKuj)(qP^DWey4#v?rlBtCii{&HFga)zzrJnC7RT;>R=I@<9&gZs
zBE#n?letaNe%-uEYj!21Ys~tp8}i^xsH0#4iitLTh<8})vw8?~t4`OfJ3VLD4CKuv
zjNWAK(VC*Og&ZB)x@V>LbNV#lDPlUyGA^~r*0Mbd1L0<q|7UN?(cCn)P(OMFP0MDu
zC3vu{yeNKhx({cn#)<@MyLW3_5%7D%9Z6^)@|iA-7mD1l!hI~33(3%No1q}C9}GF2
zRSk>JL9Z|Av!|}HA|1yzPuh7*X=rq*@2LMsG<|EcMboj=pP`UuOE%OaU06mO6Wgg)
zc|*uF%AEXlDnBr;JNdB9u;LENquy!u!3Jp-F+BQ(f-qCoYgpd>_m~E{!?<!&)&j11
z<%@4V`tmDoZ8(=%S`?I_HO?lNBlCi%OH++Q$iYPccS~yS$dxC;dzNpzdP%X$Lm?BE
zKZ!`2lHI^Ssr|-t)^aRoMCKYMorVt#Q~REEg$|Q(&uE;c1~q4ks2ZY4K{YFDVJhpD
zk$$I!-NvM5AKV0G@UQn*g{usX`g<)JlH@&7@EoB(Vzse;+1X=16V%;G^*)AP1hLiW
z-<)WVq^x)v&(h+mciX?cy`M7fHWLn^myd)35%e!)nFm-;Xfp4pJkDLH>~3)qzfuN|
z>)F)^GIMfyj{~gl0Ri{E!G~3}S&s1O+$Pt`2U>%45|;_|2w4tP6nlSW$kd~6fQlRC
zS^g}=6Ap8d^rp?RORtnag0WLrli{b)G53=BSfOD~bpxc`-2>B(PM$-`{8ehly7Bx$
zm{Sj2xB;@a3;Oc)_5c<+SS=<58r2@!j{JQ@Q0%~ZWhe7=91{rkU{38NKWm62v&tQ^
zgjaHP@FvyL(=<a)OY7~q|MntYq6bsKg#~>La|Wk=$?7G6>|w?f15?RD@QV~dl@3dV
z$z?%eN{T#YwyAKsY*wZR{N1kzFUtSW@bt%Qw?PgAq|yPsRT}wtk}g)3L!}L!?q&w#
z9*J8QO;$6ABo?axc+K`g$>;yVDvyLFmawgKkMN2e3oGFB_aZF(gMl|$^|wS)<32yN
zBgIo3G@erILA5rBa3cKQpHf$+1y=d}uNHnB5`8!qZJq9nA<X@EfL9Zd-4^)Ea&G(>
zsL8y7`0D=e1ZbT@0t?A3Yjk7RHM%?im;I6CMFdnR+48OgMihSPuAq>}1v`nKuEuc!
zm8KOjQ65G4&)p38XMgkc#jFzUDs+PDD(lx*n#qlhDw*tT40Ug$$k8Yka3hWD9a)HB
zf$GLotBb%%{YyhugZp$FQvMm*NH%A*#Ch5Th)J|_(gy)Km@{}^=Gmj53RRs?zKWRD
z+A-xpm9pv;bltA(El;^gi!JNFe0f|k$4;D(AT@BKQrcK;l02GlBxEsmZOV6(yHN{T
zYF()o<cn|Y(hADV<L6znThD@k8eKxwwG0V1yTRJJXIfw-SSxHy=(pXHXXY`Hu9W-d
zWiE22g7BW9ixQaHo>YS1?tSbt*-TqKC7_21tCwGVdo6X8F3a8cT2Nn77S;S}GL12b
zQRP`V0r7cmNIz|5vb=9ht0};CB_kbJEa&A(wakdPrpN>T`f;wV#VYG}rkeS6ZdnuN
z6;5WsEo}0wk<hTU2LO$&GDk0gb&iH!#!E~GDe_y)bg=EDd&bVBp}v>R4T!gzhNEMe
zyiL!N!ZClYUs~G3MCF^r?{Wx!)AkhBl^Y4rDCyaIVKd{;4(*K=--0@M3$YaxcNQv-
zRbmEPEXMVY&L%U%v*?y)Q1NL}cq_1HRA>1}n-6q`TyzRk@985rhMxkNzvIhCc7P;H
zZDaOYDztPq-}A~&KWs2JZ8gI}l$xCdDSMBUevcrO`Trc_U@IF_{|fWG{zdaxc}&$y
zXZ!nziL@_D>W2vFxE=tfD(`KpI9d;;MK4*YhVKdHrxu5e#GWc-*XbjVV*+&$<jHFN
zOLX>1Ok0QCSB*qN-=R+4sO3)ljuwhzrO-NE^tCIxw@hjI4JT$#{l~Z>vl^>?a6|h;
z`=KncD<PAxeWHssit4S$nTSmUx)vAV;{{gWDZc`VRtc*HBV<~0lOuS$)B2^9CgSU{
zP9DODDY;!HxxDU1X~X+Gfh^ecHvNNLDSxGfZM93f*O%3jUQzblONzH`Z>LgIeJq(>
zX1y5WTDDb(%SxvRYU1$2T7T5oV@gQ9AdcrzO1%{MmG;!PGY`0f8Mwkxj+9g<DNCzc
zoUOT8M*4A(TG?5D51y-1gntr+eu#L##1jOg;7bh%ivt+N{7Q_g67xp+QFX%j>df{t
z1Gxdn{LLK@8=Iy^WqvNyQJ)Z?w*y-cY+QzUr}gFF{o;61yCW!LPE~>@L}#3e|K)2Y
zAiR6C8#Y0H7L)IZ^3YlpC>LH*Z9r|Mi5gEhG(AAEe*8yY9>k*CC!y7AD%0Qj;t!zz
zx3LHuN;d<sEeMdc#jA!khM&%U%ZQy9=u!s|;IBd!hEmM;T3MX+6co7WAdbwj2mO|%
z!-bz{%;x*bj{pKtyvH()r*J?q8z`#QdaL<1KTH2F(M;s!LX~4vI@^!pH<qH8%1@d9
z8o!S!c7H?u2{E(+uh%7ODv@CRMuG;;@ucVZ;UWDt#UhU_!&P}AueQo}ibt!Z)$was
zR82^xASyF=v`)2-u-lRj-zbYpuZ1-_Y&}6IdA2S0^@1s-<W!*G|A!2x{)8uQZTx%e
zv+-yDKM)$R=))(;`(PCCxfL-o1?p=e+y$CISMMRD`u%7jfeqHAU~c(W0>-t<KTO2|
z=6ybGzEVwnHh~TxR=mHM)Q&jA9Gy8kT$KgfIeZrMb@Ri7j+<*cp=J>iBT7A_8Sy#P
zx+6+H$yBaaj`&|*IdLN4PIE%0;mG%oF$#4eCik~!Y#_&Q&&2`{hOyrLgL@_B&L3{G
zN{_!R%8yO@l5JY@$o`aDLz<vLs#--{6M947VPT<Hk6>ed>}lPF4>B_Pzw&ho=D!<y
zv|l;+MNA1P?iSA`dR0*6f*X!7wHtD=de#feYjL$V@diSV7bRy^O(h>r)Rok?+{>AB
zo4q0jYG!%7qs)T%8HY7^a?xmkd^|gb@pSXwW1ZnJi+PBkX@0|$Z$o!+Et<LjV44@Y
zRX^-}Ny(Hq9G0k|=kNWLm}bSj48;e29Wm^2{#cu*sh#l4DGdqP8K71PmHBcf9#>H-
z{Q>wO^g5aW!4Rd&C$Y+`-^G+RZSlH>qf3@;NJtdDNUZ;=<J`0GQ*oKqsN+fWJz#s^
z9fJUEuneXS#Jy-|s^;ACv#wULPQQu4H$huDDx|3`%D8QkK5D_2V7I-CsWxQ1#BP~w
zar(3?h{8Ev?xd<~C?hGRZ`)Vr*y@;CD@dKY6U`ihFy(bBxvfBuik($kE3moI>nq5y
zV$CrY|MF!_OSct-0Q51=3EM`b$&#&hN^iB-2&OuMhV``O308c0^NkJKr&ce@!Mo_X
z?Iq5Z=bbse*<)61_svB(le#JFOP(4pzT~gW?fG?47W3<a%olt#D~bvKMsL=8gsn1~
zp4RLjalIi9uu9(iXJQmZ`I}AdHt<*#C3&0Q-DG3BQ~tu2Y8$VC?0H?|;@kuE_k=j@
z8`s*GdCNcFW}tg?Ek{<D*azyW%exm!m=;LIqhEiApX@Ps7)d+I3voAn8?&c?SjbP5
zDSj{?;QsmAXxq94((5PCd5%XsN>MYtt=i~=TF5QBe}dk6S1`Up<=oi50gCB$lD$6<
zkfi7>Jwf2P5htQrQt0X2*wa@9P|Wp<!kFH>7{<E6DEH{pHPiM(nY=v^4ex2-v`B$U
z!8`^Z{CdSJ(uEmh4$=w@zhPC6$!+rhru^wFeHVCH?wpRa&h>@y&ei=S-lqdM6Qh4G
zJF$YsoAMy3Yd_67brUR*f5o)XdaiyG_bV8Um>T?Hb?mpxJmzefRy-+?G3IVGth2JA
z2l#i~`IUmZ2<`7Ibwx(;%P$dQJFDt_R0YkmV`tqV#NE*#5_7{L-lXR5D|@n-E9SrK
zar+61GR5zs-LrN_bq@XncF4cQoCMpA&ph%xb1GBW<jv@Bx&Jf01<lMhRk8PJZwh~}
zD4K7GOM9-HMWw6S{|R!3{x;jipODRJTh!OcuJ)X)6PbKD`dirtCFVM)pnc!jL<>$q
z$l4EeK@gWr5)#w^+Q+*u1ppEBL9x@<k?FR<RtqnxD&E-e+oloi#^x`vX?G}Gq^^q_
z-gZtUb(r+3ygEr^{iS@wxU}H1^rbg5RkN<R3kH?{9+O2DrT3zUQ1IlrmruWE-zy_H
zFQG(yoT^)}+m^e%%KFvFmPQJ@6;bX`4hTUl$0~Lpe?eqXmyi^Q?fxStJUAv9L|_6=
zMOi~1Flt4Hj05nQ)3<TFStXYharmwR^mw~7=B)Rgg;8SiO0*wHQozI52rPXxa+0(?
z#^$@pMSa60u7;KmvBD8GIsz_wOazL67xzkFr#g1^HHWN<J^vJ}GZu|}cs$3uYLaKg
zQ{W<g@*~X@YzJ^-X+k##?Bp)3Dz|mGQn<5qizt=xb<(n1xsy*3+r^x5rU^R^;H=;|
zIWE(Qxh^FTT1ovv3d&{MnP16t><pIP<lnNp^}u5Fl?YDDF|ds;?QNkmYB=r17Hm#E
zC}RkTnP$O78jvfR+mo>bd;8H>{SbFzW=q8OkMuwG-jHtTiHvos_wM!cHmxz!n8`x6
z6FVhb<?)WdmUs8@^Xv>JGXM5GA2E_j8-GMB<6lW|CdN_v_f;a1>;?{{+<DiBy++PV
zSN)^0aQ%Nmp$vs@T9c#~edVk$k7=1-2!^!=KRPTO&Ri_GY=L%48W_eiD=5AYqV3M5
z&`3l?!xeGgBZ8}kMw0)EibQsznkrm9)6d7_l{%)$2I4iiL-r<;7@NlawaTTdlAvE>
zCzn<Ar+~NmtV8O^mB3TYjhK^O!F~vFpH$H&R;*x*Q1AdI&@o=yYT$Iz*x&k@9?8}h
zMxir!AGbb(VMWif(t?yb2|9ypJ`ez7b%l%fJ(zxfsj2E>ehGKaULZHWGGk4*Hn~<5
z>7{IoE_xCarOL{{M7@Kakp|OcF3e%R18~=xpnq9;&UVMnu$E?a_Erk&*+b&XEq@*Y
zlTy$R-Ax@u12vr)!;-h`L{5K(c4OSZswwTJMBVo;Vyj?gijBO)2Ad4YE$y31)q{4g
zxSN<7GRmZ;{*sw`QdS10$totnrJTF$j(50$>1d+{GrgWH;x0+p3Gd@VEFQ(A2?E)n
zU-R^;&k4n(hRuSqe-ypyQl=l@9yaa2oO?W(W_1igggGW}?N$9iR?JkG!(>KQ-kS>D
zO9zF|0ZDxpmwqesQcdqw%@%@td8S3Vy)TMreGq>aQ|rr+=G3B=E%5uQF<<ZQh>bWM
zFogfY5MS6eTa(->=xn*RH6CNBQtxx7PIiT7P3u9!`#Fy}yh)>c%Vl5Y_+P}(H`R3y
zd4#|GXSV_evahowBV9^zZ06%4D&s`BD+pJMb`9U>u8Ekbh;i}P(sqNt*&BBgfc9_P
z^+>xUx@a^|`=*#^U*aG?sb{_w7rvhNg`D+ZtJ<{F&ryC%>B(3{TIZ~_IMsd|e7QTP
z$ZZ|z)25ui<e#zL)D-K*DjKz>!h<vHE3xH>@oD+yoCbz_bg!-CZZl6+JC#;|DPcAI
zC~C-HK6WIA`&QtrU#SKm4c=^MO6u<JR6+ts@|YuWAg*Y_Uf3L7W3Uanm99B~RT`*_
z%)*I-Z~G<={WT^r5OOCMN(jyF@0&=6`up)*M<V*j3l9s*S%v89e81tBZiOy2rj}&S
z8C^s6^*_juHLUs(6AQnQ`>WsvQb?-fMt=6)yZVB4@e<EtZ{&Uy+yI?x;R{7Tl;|=v
zlKHsIBJ<tvvdc}Z4LrP_O}>{2K;|NOIK;n`-&2VZ8r)s-jd}|Z*oN$Gu3^}xdz6|O
zH6V(#{xJR*?x7G&J}nyWw9XLwV?-+^A}dStm9@2FJdMxgD0WxW|MT!#aN9jn%PSIj
zkV|*rk&z+(9kpxfVixpdXd)?8H~=yS#jH9eJVUuvdf8p+ZmMl`=$QrekWE6L^@o|R
z7j}H|*A8HDS~u1&#hZ$#=JB`zN7U%b026#XyEpW5ONOluldZs;*sB<ndF8&p5up25
zX0w6qFdh<>%)T^T$Eh!H6W)`XGOW(v#v$(x|AE&sdsW^TeuJTWJ{oDtYk$E$DEDM}
z0f9!|WVgn(pLF2G$d<B*qA7=8z7Z0GGMeW|TjbH1g|7yubF#m!j?CY0P;eMkS-WDI
zW*zM>XHgPCAp_a=T|VBZ?67418|USGrK}syjnk#rKtyL9q6UE1TJwjH(IB8dwa((l
z6hhd9*o`pz=Bvde;#mQkOzY;~TBJ+RIoFfCv-?QY3cG4vCJ5Sv1v&qF%rGXBP8+Yr
ztJQm4k~64yOnO-XN>FcX7PmQ>cLAq>-C=<`96dhtTtA&&yfJ11O<v(``vIfOL*LM=
z=7$gYSS-K@w5<c%dvq6IAkra4J`Qn>0)9S}=Cs@D&2p$&j%iy}PWax*`b41I`0Wj5
z4~V{x9z|Ru{of1gtj@Uja&{_W;G40|L?Fc^2h#`f83^WG1g-Df)Isi!DX2`Iq%tat
z)VVwGo%ai-wSDZ=Hh6>JIStA3$UXMh%t~{Nbz;BKe2keo#>=#U+tW>!UmA4~-lks%
zcG;<hj7l{~?`clo9C>BBm4bld#{jMiCi-CR+70<<k=I-tTNdhEbyuJuuwQPbn;%md
zmdF0|c9Wx8@M}@(Kq@1x3A4?2(+XMt6xP%qq$wHijQIE1%?qTAw!J<=9?}aF=>5#!
zhb|wqxnk6CsPFM9$<9I3II9KQLYT7+iT>=bFJF5YwsJ@3+Ysx_)1a9q+S5pQ<BirY
zAw9kB0}|m)xdGN0O!fZVR^33`U%+r2MpIFGb(9d7&l`r-)-<qS-(q;EAN?lUQPK0;
zdR9Zp+w!Dqa_p*`#UK1&lph?~YYX@yp5D<mYUOsKf6!X|m3~R}A63^&MwXE#k7CE|
zz>h>uZMNSr9_6faH6*Fsru8Fci^96>68}E*W1Di_QG%Y`szI_1aV!G%q{!<>|HUb<
zv!tMByrHf+pYh6cd6ai8q-vbh5xV5~JC+T5RNFj})Qz-iY4Uie$d~)MG9X)Dfy3Bq
z$)-fivMyH+piUPhM5)@f`pxcdyE*mMy$yXkn)B_>IUDQYDW?v`X`W%a*s>!|h5F^@
zk@-`KiG8UHZj-Kz6)D_eN37;<s7vzfG-3MqwM>WANz%tz$|F1E1o-M&BcmF3v|`_q
zzKnfP7#g`fU9~N;J6PUc(iy@YzntY0PD&6<;cBuC&0AxqWwPN$TCM#Y>5*npk<Tct
zb8@(Lg+2R{sSIpr!)gEcw&+$kwmobtm=A{tOS#$ow9T((XRnmP^n!Q@1wkjCUGe9i
z<LK<1i*GhQ>daCccV`WD$F}p@C)$RWQ8T2y2@I%wG)8&fGVP?>nn_KbQ*dYoXrs-2
zJTSGeY;H)CQ_o`SXyYW6j5A|-2bwme&YMV?TOS(K)o2?Nnl1Ia6c=U*E4>ZOfpx%(
zwGAGoLDi^NW;_%To)&clMXk_rUqKy|eWg0#`R+mRWS;ZZJ4Cl@y18bB4<*uL6=GbN
z9_-iFnZZ=>#2{GB$dO)lw~hmTzv79UD7}{Jb}w{`_F^*-^Zp$|7{&B;%sh&pWKSrW
zUaXqqi8BxtAKGTK5R2~Oa6G58YTE=5jbR>)qHe%E3|e*g2>6W_ya)rmW5?%5v%brT
zr49`}wc4874dDzBneHefBHn^kh4i~Tjptat*i==(NvF{mvkYSzo<}yhIOg7vwk*nN
zjNG$~S_aQ^LdqU!POHi~3}oJ`r;KQZURiP6pSZpi9fKQA%_rt~IU8glYLT-JD!fY>
zYQWCJXqc@uUD&I?6+!eKQ&E^Wl9d|dL>S;eSyl<(?!5jsR&~Q@s`i7Jz&q}?F^avA
z5(4GrR{=N#dnmu+f$na?P)mzqRnbJidHPmDkV-2Wp-W&$`|(;C(`N*R!C2^_9)<TD
z3Qn=+nBDhPV^N7t#D|T~^;wB)j8Wbb|8J|L`SYlwQy{MSeuP*%&-uS&Va5teH_=S%
zQu_xn9G_lhDWjJ6WbfN2=t(1`SyGr!+u0<g*2sftTm5Sz#2O^aYl1;>W_dD3X*!`-
zAsmS-7XD7HZX58cnc<zhq+K~!D8oxlqG6VI;BuHYl{7cIF>g!tH`Y10mvJeTKVGNg
zqMYVfm^;1N>U|q~0%{qqRc8NbEZ{XI9Jh^FDXC9XR6|wn?yBB2vBxhUn+@<T>i&J5
zPrTrqVn454&26d$Is@<IqO(m#KuAW<`a8W&sU2v|xQRR~3dz4&(5*DMirxrjT*dB9
z6C`fmgTK>ObPsGlXOima8h_dV{20balK^ExRO`+uTBj?k+JHDeXUt;=hcin0cnvU2
znH0gJJMVcQ8}GrNx$6J7*^U>kjWl0*>khbRPO&sYn5!1{bSNDpC)Ug8z_V)FaNyvC
zEkG3H013h0V1>a=JHa}KXuy=;f_xMPXKS)gh=Vb?RR8z<EkHlB9$>d_00MXfI6C#X
zO#B10SjDdY;uAfJLDnuKEM#b&#~%N?<b_Gbi#%v`7B^a$IhW2pPX%ix+7_rrd|{}t
zFE8GE!KRzXi%jEJa?TxZwqy&PNbn*2F{+S$DElqUVgL6=y=qay%hT+7>o@Q8c4hOe
zO#ER+4(qn9{ayxYlLcj8t7oqdrZ1PTdz_^zb2l1F<C&x%B5##a<)AeQ>a!s+=Pq5~
z`(ChhiRu{_0O=q+woJS?A^ckmGo!R<r=Zd-L9wLF*3S0KjZ`Elszfaf%!-QSzAnal
z{BXo7m`gY0GH7N3-0LVdt+n(sQ^(QYeo(K1EtG3Yb!U09RZBQ*smCFCD^BMqbrxF4
zT~5!zmry2AG?TZ=<7MiOR&P4FgRunb3f^n2>YA;RjmLI6gt<R#u_rp=QaojkjXf~|
znxqq^%L;yTQl{8ob{*{Sbly&OI_N1bJp`3wrO<JslroMMWFc-0SnM9%AI}z_k8Rkw
z?C+-O2D_*rW=?)*vpb!iq&D?nH!bOYy35c>)!(_>R5spD1e6moXkda%6z8;Hn#m<4
z(i{^&A#P?)D2gw*A11uI5~RnKkqZ%74Osg3n5pp^F1YEXZtRWXn>UK`3s0=N(7@6{
z;T7D1<v2D$5F1n*Q7j&o_gOs%j+FbOUsI)TB(_?(qK!R*@T5+`FbDmlRH=Wa>DF!u
z12MzAO~vuN^U^<k#|J+g*`KIy$?8qa3ZB7<sgL;(6i!K2HyJJMO)NVSN_i)SDYVdG
zkg&9G6Qa}e<v=lF6|7%lT_H?>+v$z@eQ6jBex`aGe8iWR$!62~uOb}}{<nD{B#sS%
z)<&%c_#{DBIxO6$Hx=7We0M;aVH9p~m7Al0-Gsy;1LUT}>_O?bgjya~3`9GlHNIRS
zIw@^!H~k2?x=@d-iX?wW0+D@vAO65m&hpoWR3QOGH?zKE$LjcVO_bX7aeadOOb=;J
z8zI|oZr|7ZC{SGX&-x_I?4NsNp0KP{kQLco1Z(m^ql&kZ4rb0&`slqTAcFbek+tQY
z3#QP;7;qcqC1@)xRgcDe12rd_o6#fcO9ex)81sU1+F-%w#}nU7C{qV#ntUs<0V8Po
z4>2-47TS8Bp(A>s&dlV0r;I)GpFdAAABjyGN-<wVN=dvDG}HgJLuPC`@YfDCPE-Cn
zi&9w$^I-#71Hs%8Gt1+Iu)c__dS68Tha$vOu|lxYT-nbwwIWzB@4$F<$rztGoRP=E
zW5LP~=o9N?62?U`a+i;rftlt7#@#<Bm1|jY`rWf6?Yzz?ViD%o{`fB((l+KF@w}>A
z6Dns~FU<=v2`$)-We|^R$E{j51-S~ZX%UcTO_)#*$w(d_J-n&_R($f~L>+#|r-{%Q
zpBjw0zW>Mgw5d468muZuZ?Roui)6$T3d*N2ZX4!Pg>%m3I5~Bv_a0tMp$}}FX!hH+
zZqw_}vCCuE2x2Z)zlFwTEstEjTslXcDKPWP`}*sY4b#Pq+6zyRltuS^BWhOS;IO9E
zm5YwO57!8{0i4Dig>R1}LRuxrmz@HjylvZ2NvB#$Ek-c5PQ5@w=34RFDAXayRcBhi
z22~JXXJ$*(IWNHo7?dB!gE(=gdqkmzCEr#nPjViJb2sRP`Zx8tbOrB!vUs}UKV)f+
zR#X9$DbO<${GBz#f|LVHkDuW{_pC?wl6k+_Tn|~8+AHZJ*S)34#eaCkCu0{$B{tU<
zrn?dy#OWBm9jnc(tPq;0qpP*mOt0BpC9FcrMXj4$+;V*?^)P`M{bPJ=Z7i*4#Y*-I
zL_oqMD92%wSH%mpfS`{*+|_Hc+o8bcWQGmm=LhR;H>>=Euf|;+`h4NZ^|0+OEtv4L
zg}9Wsegc&6r5dMF@t#HGdgt57R?qbOUhX%!UeZ_}4K>Nyj>WMiWR&8kDmg??^D`LM
z#>}|T>T5cxk{>onm5aa+MG6hUJ%c5>>GV3PqUP&y6D7vr&c#?sy+m~>KMzM*uWoVK
z0$N{Txwg4}_j;!4G<8c|?{Gr-s_Akl36jhV4xjMWj!Iupx-ey<Uu3_IKSw%p;_L?<
ztW<;~>qfW36*_a6Y>QjnXOw>|R`q3PW_DP-upFs%=gSGJ_fI@@F%P%NR>*#mc`soF
zEP7S8;B<1@Qwb#~yfz_#oB;rh9EL}EPK4!rOlz*stFm3M(IY&G8Tv`K3c{r3RX~K`
z?*p^FR1(z9>M~Mug5pwU32i_gh|=(DPFE+g-j`7g-l}}Q&axscW9Mc!?KCcxAzi!!
zlG|58W2wQoXI=2V9HX|OorhV$=w;W^iq+?XkBpXIDZ0eBd1e)i|L~oc@}H|4JU{4>
zJGEgwSifpErGgW1@dA?~#=>DGKG)VW6Ek&LA|nU-S8Wy5g(}?|TJpS28o#(cF3fn^
z@lK7Ljag1we8p+3Y<P57Hvc+c3gvQZ?)5cF&5bsneY(S$B<6#!1Jju~>Z4%k*z<O3
zwe?Mn)BR`t)W&b~7K2p3g`6;zX8STtn+Y}tn?X)DGaWdOAHSUmqEFXU>f8!3F>eS}
zHRazMh{tx@9DPrqKfjr|qJqS<TOV1Jn=*{F(%(YV6qb9@-}@&}V76&^lV8_#{#G#Z
zLWI%IRpH1##*lc$>7$9h=^CRwS@8u+oxa<uUkbNLE5TqHGn0<6qWZG1q-lztPxaU8
z@=x!rDI6!d*uiUY)ErNCrIeL1Y-%gI5?5to7oj?#GRt60znr8f`(JC9T!wxr+ic^D
z8vJ|-z9oPuG=ik{PLZPw7jD`|XU@S=NI`W=;|EvzB@}Lj_m6{;TICrgXWzf1VC|CE
z8VGW?UTr@bgE1%~o?!Kb<N(A>>yB?p8JH6cjy$amP#G}V-<m(!C(d$IrC$E{L>nz$
zq3m+K@66&vu2uP4z{WjDt&KrhKDX}oRqKDL8nRNVtG@S-d)C$#^%i|0KM7K2y!ASc
zc!+54I%{4`ZN}|cuBArlFib)#6LahD&pY4%YcJd?j9N8my14i%a?6gl4Mp-d`+5c|
zV`QJ(p%a=K${S`K53UHgtIgeTbf}<J1Lviue#vJ^-a3!YBo(=*+ssZyy5X9^T6^QH
z(E!YB9@Q^*BrLsBWu>-ZW*`R+PH;6Ufik4qFsXL5@k)|kgBL#qn2!~yh_0rV<Sio)
zIqtM2{Yn2_wb)2+>E1T%m1<KmSfM)wV2Q)X1D`&_Q|fg0LL<TJ^aX&W-(F9Sq^2S+
zWHjz>1e`PZ%O3gP0(5Ej9fk#X$EkBgNt7*$6nnT~7Fd;WUtJ7&o93f=b^<K%Su`Gm
zcB&c-DN2Qx1QC)Co5%gG`P<Q1myAt%)!6*%*-e<(+O+0d`8jJ;Ow5HCC$}sXX4`r^
zV?k7@Lk1*nVYgv9l=VkFSq?nZd^sy=U|y?adUzblXACzq@D|yF*G{-T|NWxSpT$32
ztKoK8@kEvYmw&a+YuR3J1yfhIIVj#Ib&pU_`H$^eJ|dWGp|;nV8WmkgUc)kqfq>q+
z+(z%OZ;Hc+87db*J?h055OW{ND%;Q%LKf0PL-{RU`1HH9zKM_WBh3wSIQ3_&nEL#>
zX#sAzT{=p(rpZk}7(@-bh2RCfb^veMP<x0I?f@wQ=b+58(a0l>8yNoUzS&I`ZSZPg
z{<e)5#<L6<@Ko1eHyv9amNLTM^<<5JXCk@fa-;DkmIrPg(Y|xZC#lG@;m%F*Q|J4u
z%mmmII6mga&zNu+)W5gSs!YlJNVM$XiHtW=KffrJ{g$Qj9U(tjYYun)G|D6+_uZef
z;xyO#Vbq7zyRhs1mrH|3=(&1(23{{mPUfBhQd;*TUr*6)f75>D+l5MZ)vxP8`>pvc
z|5-o1mZjoepk(0n&vma)V|NPB$BCDMhcodjW-HcF$_>s-Cs%RdJlBe~^Q*X$_|)W?
zfY(am>Hs@is-Ek^u0zegMj8)qCFtZd#?(CFZj216wdL9D-p5&UwDwHOdFzlMQdnj5
z*Z6A4m&BRdEZNF}-Hy~}yaloXFj0nk=k5BbL>Q=tSYQ9o()B0PvGt_=>K8BG_ER&y
z>`fi4nvcBK?rB*oEi>aUYSjP*W5$7(z#FI9eOSUpaZc1!{SX;C9B6OH?n(h!%!Ee8
z^NPc8-aR7qXw@pIGWtiS-Qk<}X8+5tQ$FoV4P4*vZrdEW+zVJQB@B(=y}rnkVgN?E
z-&+L23I}8yE_X!27LS|&aMnBN<=E9M4P1Lxs>F6Q2VE3!xgskZDmyQZMx36qd}Zp~
zCwgae_-(&}vdY%zHMp|T-Q3@nA(G=kwr%eCQ<2M$cHg5n9u!Ie3FSY2pEz{bEpk%2
zADpw!m%-~-)w)k)^cK%lu}z-KI7lQlRYj?UB5kQZ5~nc2+2ZW(ha&x8WLt)Ow`5gn
z3J1xK@DuDEJ}b>;T;ZLBo>aYeJbDSkgjXxk7Dof7e6vLhqO|*Pb_z_#rooGQ^A38v
z#)<3%wsb+d!LIkvo~eaJ6PfO~vCcy^<EBpLmaCY<KA^*5&1z1|hHJ{uX-U)L!b$Et
zp~~_0Pmd%D5bAG7FoQR4i!+DwSFGf8u^j{a|2Sqw2<N4AO;tkX*mo;TEk5~utx`-^
zp9Vv2@2QaFAKD@>Zac3xxWt#3*WA*?N#c}xdS**=H(#d^<~(_PBdEGKx$Zf7U#50{
z&7%_-*%9b3o-TB$UJM1?4|rm~Jn}YC%-OTbQtadp-ryml3B?Xk+4)|@$H(%|AZ^dD
zPdZHt5|w+NnK;(vod3b({({*B4f6PBI;x}c`*_E>E5Ap)hfk`_cI+i@8h;(TS+_Bm
zdfh*u4t94Qd$xb!Omq-N;_D^u5)e(#I)x?I_`g!^zy4SjbiN$=s9y-d>?@X2B(~Zf
zirEI_Li3JYC0;=yT8>t)YVPtTICUsoAdX0(qryht?UrP2(mH;q>0M#@NfuxN8&zOU
z8zSg5JZc$nsT-_zjA|hnY{>O#S<D;Now5!QT^(IP;^fdvC|bk5_WEs`jV~(~Dp>H^
zJDD<LmSX>0vyUJ&c&d4=12^Ib=Q=38e#=Sy_n0G<j4M6KG*dv7&2=TfRF{0Uh++bo
zRV+QT=LKvaFaKN>;zw<N&?`uRheMQwK4AR+A4y*x&t}?w-*;v@T~tjM)uHMg>)5BY
zwUkU36h-Z|X1drCk=7P_-fk3CLyMwhYL^JLBtek2s9Iu=kcia2M(hz;`n%`*`=|P8
zBl0|+`@XMpopYVDaYf}AVoS3KO}76s8zEj}Z)(yAn4^KYpH2Acf#E`<KU5)H!nr?0
z@E-1}+Hm-hAnvK2hUcw_7CF<i(N7&NT`G7bBX`Uq#o}r*S1gCw*0w?~)f$N}`@{*u
z*|CO@rV+|YG4$(D!t6X`ZIgdCUVlh=q}g6;m-K?NII!ljbA%dl-|qEZwE}R`Yv@c4
zCW6E1dG#i2_MCIKeSXo`&$fi%j>xdf^R^r`(Uj&dK2Zumx#2dyl(kj=YfW^ke-||l
zlBO=x$c{D7gMyaqzHo&~j_85A>Sb+1y239f>wJw2cXzjXj*rc==19Dn(L#ae#kI|N
zaGZ&J%C^KmLl}Ci0X9W;7>(s}S{};ZH1kWB-vkpCj5{-fSXTbPNq2{RX+lr`l}AZ(
zt$OGCt1_z>cTYY5KJm4HaWh@6FQV$HwdQUN&@SZGR-tJsfr0N#vw5-I%G;*Nnv=$-
zwqPg0u6--*-}-;F0x~D|cz&EoNA7ymq&W>OZT{gaN6=<-v{8Y<Uons5M9b646O1Ps
z!ror8EBS7eDwX1wH;2?+L&@WgSzhn`(xv*CBl}=%z0I}gL)xr2*FDj@{?$x3imAqP
z*I3J}T*}QHE`qipjzRQa*NFyKHGdz<%W%D<;&{X;w0eV`5av)8IAq#9*y&eol<tRV
zd3(Spc+E{7o>o)4<vXG^O^nk)+>P%kjcd{#EFnv_t5t(LjcvK^Lh*LH^{Uf+gxLQm
zm?J$ApfZCD+NYbqzvZL62DVj4b~;H}pMA5tk}e+hG2?lURTn4EB_r;vmvC*FPU-6^
zyG8ybKA*5E&DKM4ujF!kp%aKpzT?0W)mz+C+t4($>Q_(pWj`G1*u+}1T+CxE>WY`5
zeN#Jjh}rk(TGU5^ueJS#myliy_*fn`66s{jX&J2um9TuIq|0!HW~NOFXbDP_#Tf==
z=RHzupL{>y%UG&5@wB}HCtfZ|No`aJTWF1;yG-exT~1eoPAqa!lBuNE2#tp|KcJHv
z@#gg_3iWZh^KzpNe7__ojpvap@@US~_XB6`r&eN8oX55FG!aR|ntZoI-1{=!1fzPN
zh3n<Zx!H-~72&6C3}3rKjiot1DolZNUGIuz533<9f=L<ZxOl%Z@E*9tC?Mn7)f&i+
z4OaeJdA&%MSnVI2jN)|n%7gOtn`HM)oLa)O%7u;7Wxfv(d#{G(I8F`?L?ZE(6$C}X
zEwp$HU$LrK%&N*_DnBRI=~v{lQ~#nOV$3kow1s>y(CN*B937VR>MHgm_hxud&DiSD
z`9g;@#g~NhEyuj$)|j`qg7amqG9P%iCYJa~O`<=-o3cNL!W?XjW2wi??p4P<CABy_
z{hS@GQyt8hFhPvFBFN%>Lf|o5gY%xtNrCT3Krhb<-0-IUQ~^9G85_SRY`JB5N<4US
z22s=A63N{gRn9`45y;N}TI4FgYn;esoO+qj&}jQx{Afsr$=EffX9!R7wz5pC5^WAH
zAvt8#WUnYSwSN?M(&&w#R0JY^Jhd$rY#O$L{32DEyllLgr&><~wDCU{sb=UVc0`fB
z5*Lgi8ZPJF$yMRU!|?UL{3vJ613Hl8n+__@qMleRP5GdsZob)$ZKQJ2kZRnZXwKsm
zA_#iz(rdYK@uraWtAs%(&n355L7PnMZ@G0&n8Jf)hu9b?{*Ee!wvph@euJgSs%{Lt
z%i8g!_<0sV`PA2YH>DxTrBuyVv+D{qUQuM8R(OPXdT8qbk)na+_yrSQ@g(P)u)(PT
zH&`usb1WD5a<|h^$CBd(*dlv{QsVT)_7%pAK_3EiHb;JyE9ih`lJC_$&&|Vsh~En4
z=05lR=aPx48!BfFf^v{#iqS205Y07MZj8m9boxAi8rLQs+~3RQI_JsiW@Z$<SRHru
zaos|pBeETDC)^U^Y&Ye&IAOhMyOx0Hq!304SC{^Wtz!}9C&1aDg1ZHS3O(W-_a^{3
zR}(y{nC_jA1POUPulG>SjbkTU6MXYKvvn54vICx(m|1kLA(HG)m%E30+`38XrTr92
zl_;uS7xp+$_1b;enQgUJ?Qf<`R;sVbx=pa7D}9zj*<Nv_3-jrjZkyBP>5XF8Z+30L
zb4+zH^<f5%gXB6Pj~x{t^2gE5v~v$Zqxs))al%apCm>8HLzoY|{5L5b7EoL;KA1jf
zN((+jya8rO4Y_M0G9+!Ye*S_iCpDmD|3Ay;&qR=i9i~xGZZN(Pp{z~-Z%Ou2dwS(h
zVpauQ!z7li!&tjVTdh*ua(n<#R5NY%o;tyyAobVD!>_+GFw1a>_D6pVdlM1fJ)ZWs
zG2O{#AeF4t{RNigW*q;u$`Pa|XTpsip*-Znd<E^dhuCMT2rx5mo(tlV?)YS72XC@P
zW?*+_<ko5wnpI`vmSy__I2{9~BCCqf3#;HkCh<j$Jumi-)u=Fm;2}%@ZR;qA7^k|<
zq@qUboK1kHn2@l4{<ulLlUtn4Q=8E=o`ypqT#{FyAXqDxymo{Cf8F7wHm5vsJQRGi
zxog!{it&_L>VMwDq1&BeL5cDC50p+x2k}VWUKMx+KJMszAVIQPua+a$=nKPk81<(9
z_SU=PzLp1+8;&yft++RAV3R6#Dgq)$X>T%QsTR0ncr*cmJ}It4-KZ-J)m?PE@uj}x
zUCLa&KF~N>64Lk_Nq?(QW3cp*EuwvUQZHm~9(1a4%RA_txK50yVm1){*|ZYf9{?co
zvzR-exj!(9+<nI00ymw<G7(&Z@;OEz<n`a#-;08$0yjZvnox<+Dcns++p`Qu^7#pM
z==yokz|Q`cSccSta=xG+kkBAPh|<^kO-w^~1NQZ^0T$gqtB?MCp#o55vj*9s_aIFj
zEm(UTqZc<``fu-hACFuR{wQz(GsfUGhx>qA07&cwfD$s*{2XV*2{GzffQWeBYKh8J
z{FjA_3Jbgem5NRe+mdnEWOQE9T2P2yn8)oh4hp*{oEKQyY0L@~WO?FJd;STAX3rI(
zYU?Ie@eZHQbwKtkbiN;0RDQ$Vv#3HZDrf!;<dZkknSBg4YM~^JbMeL+dAE9!zuby*
z;`f^ftac5g5>*vq9Ian0p3?1Z%FuH;ZN=JMjiWj(`HNK@&@C=I(MeFu`pI5DR;A&L
zb;00nOW$%OV%DA?w9|qIdUm?-=bEm<ye8ZH8nT-{{=^L{BA(Kn<ierMuw*Ok9-Va1
z?t80w`T>7U#TTE4l(c#j{F={>uK6c!sFllgL;Zyw$RIsK-v9hA_Z?#`bR+VrZ#Ezu
zvIRJAgM@rU8FQ6rTff-f?`k<wZ7=mx=4#Yi>~Ju35md<sZ;y!gwS7>|<4v_YR&=U4
zo}V!>e;fHAc;(!l3xrj5RJV0!5{5B)?j&M-`&+zQw<xlWk;qk-p^PT~_=YA3Vz0XC
zO<(?Zk6_{V7YJaq-2wXTyu4rm@%~(-(rrK$7KFdmc_3X@i2j-yBj!A~moGJyOxci7
zK;(&%p+u^<!>!{i{$*6oeNG(+0L<7$faP+|$t(8F&2r)ci+G!Ao(EBX1sJD|dzhg6
z4Jz-5=l+kK@L|_6&`pGS^H6oA!8d&WGr@OY>ytJ$@jHm4{ZG1FhUV_tQYLZRA0QIP
z{M(-wCTlj&fQ*>p!*iExX}2ddX@K6Pnfe{gO1H|$b`>AJHRShl;17cn=4G#~{ycGZ
z^etirX!KK0yB{3CHU1}hF4;-)4V))W7j@!5u6bo*MCg9ovSCE|uF;kjusq8hpxZ#6
zBT?x75*@5G9{tT(^cQlyV;Lk)6`?h@Hd36U-NDrD%vbZ9MsYN;MgZPkl8Nt6(%-|Z
z@sruSeuMV7`w=Pr|3t=Eq*;70NAB&XyObhD+3R@Jg|<^Yn#GT*dwcu;SAViskku^s
zvj1*)nerD~oED5_qMJM4iBBtic@mC=MVx>$OsSo3a`AOm;^9?=oN2<t9v?ODg=fvz
z4-9+IohUcs`+8>et9gI#3V%1kKbv!VRorSYFdCyu`^SF!1)7c!>x+3KXpL{0BUM8C
zDIO{7&`5gL&GC3=)bfQTpF2-y|5^TYd9#5kzne5IQf)J@B{alfjL+^8$7&&0Xu~rs
zY4j6;SR}PkZFuCms9WdqUx7rX=@+A|dsc31U$H%V$$g_cOvDermoz2>3g>-YQsi3+
zu(tVOgr_+FH3;mK?iHHLg|Q4MOLbr^N_$HgW*TU8AA|1QX+o_pkuW@loAxv!L_S)q
z`Qo=+l~)kmpeiXe>~mq^0?G1_-Rt=m+ZO4xQ(QfS2TxMhF74(pVpUP_p_(clMxPL_
zbP3gAqyqKfX=GC^KNVP3@o{7O!jW%}{0IiAdPZKOoO(Gaf)~=yk9p39#uS>ulb}h)
z7=}^Ylg=*iKts*Y+)5hqg-mMrv~C?z#H!SwtgG^K8$E)f7XzPu91a`7YEJCtOZe2&
zSDW`BDCHoWzU?Sv<L4@$vFq3+-WeHn0r@#oJS9H0cOKpodn$g^=XZiFnBW8&Aj{X{
zgTp)3UeXUymiaH=??g|obw060su0>g*lc!5=p%M~G>n&okNkI$GAz>iga-J&xZ`Mt
zI~g8-q@dSFr7Z6+mfJI&UXlw)Q$J!32SNd{wrz+{JF(1pA6OBY)nzt*(zH@w#*6M;
zhnk%lMzfG2No;@G40|f^`+@4Wl>FfQ%>H+8PH*Vw@+nTI#AoDt;#lXI;)4$X{<TY)
zmeZmvc^GR!+6Syr@jwB07&BRFog&^jk!Olt6`D;@l2#vjT}L6Msr8c&^mG=Pj7IeN
zrIgTO)xrwF${8^A`?h9b^UBcP4|Bx>RsRTjkfGp6`Ix|6@N8<g34IScVYJ~1*~GX0
zUZ7o|aH7m2@)M-ZyT2_IDE7e_Pz4njJpA9<4dBJpxEF+u!Bz_{p!K}g_tLpw4w^Nq
z`{Mriw1Bc(i3i8?wW=$}==ZAtxIg1%NTn>M>k7tnsUhk-$T!gb*h`y@Y&c#*mjI^<
z*kV57z)5wRYodHnE3arXk56~_4OB0|pyz)#P&PcP1lz=(R3TJq&RcCw<y)?U$*tBC
z-UjngZx>+Ml6r2>0!gx0_F-OxVGVr0kU;uT93{y0c7@B0;~o2Niu+zsWAl<^)cWrV
z?I@q&8ljRzoTfW9<U^-Y)J4)sj#z$->v2Z2GBU-nAz6Vixhw<KL(E|mCU>j8uqq!F
zSBFU0V_evqI`abDpeeTh1qvNtP7+7aVm#fqML-4lTjZMd?B;B0Q_*o6ygiNNk^(r-
zEV$Q@D>gg5KK$v92JD<?iTBWDaxJ)|+apr@#;$3JUj$>6agT2Fk?k;pJmc%&9s>)U
z@)M9@Kw`yaXuwXcl@9=8=T@M!y|5hZZDt`kz8QWvADv(h+mVyJZr2!t65O+ldlZ84
zBc|kU#bDNW)jA_T;6Eb;WUL7uHY5SvKI@G<gVdugo{l++FpDHBnB-~JM=!k0wi)?J
z_Ry}b(2iT$W)qP2y#DDisM1Kde1~OOti<r4H@xU(x^-`C|8Hj?UpJ%ad5f(Yw0b6V
zm8#%kE^vw(veCGk4hZS@)G)Rr!5i+DygX{tlT}yunj>?u<B@>9TeHIT$$O&$*S43)
za%dS}9nC$SH<hoA(D#hQw_S44YTw$aa{HoiA}x`7ZoG`)I-YfT+9xMCCwMaR>4xr?
zzrT!r2x!9B@nHr2nL3;CcVFd4em^jPd%gE~8liTlA;lqi$amyQ4N~8+tV?zB#yixn
zGmLtKh4GqY`}P=l<2)Gc9hn;5QHrYLq?5A!PgArsH#f+8?|353oOR9|Y20_1K#%&Z
z0nDx7w<=X)a<}cDiZvSOY6!)B&8Vy)h#_mX^KE{E!f3hBXMH~s?wHcvbiH0GPN~yy
z0%3K5mq?Bsue|V!%bAx$d5<o~L9f?05Nu(ctD}PxwnT{fml1|Bf>(8I^U|r?Tdw1y
z(#%cL#`$@o68XbOz5D%UBAWBNi|b|HYEqn$_TA!C#G_jDHf9Qnq2M2WzS5)`2D8^G
zQ^ejNpOHp%6QU=rs_@+4jQL-=I?|b0&Rt7`@c*_C_h?{)kvX|lK3;(pWsII5`6%md
z{7>HUZhK>(7Op5M`Fq%ydTlc%O~SKz_bc7?0|7HOs>HJw)|-8!Yfg#GxURJ6;f%R&
z8Kz8Ew=ZpOt3vzAKsN^~rQ$4}WMh_F*CVde9>(XxD0i-*rcQ7gqp7F6KlJfFn7>dg
zJ2RanijgiFSuwD^$g?8YnB;9|7%~MkbVE;<ohiIvLwj||Soa<80w2C*FH~5auLVwO
z%;J+}Yc#icAN-DiH<vTXqVKitGWrT+Z?hdIGIK2*ihbPO_fY+553*A?Ihnwnp$V4u
z@`~-xEoB|>P2CJ;Hr=2%u87)TVb5RMte$dWF)T953INTN!gJfRh3^D>E_^+aZ3I_L
z8=HSHK|yhyf7XKZy`r#K-aqHhwdwA=0<nmJh&@_1vihx&l#Gg^gy6}@marI`U|s)`
zK4`ZupF*~g(Rl&FOoGodHYYVrAUi;y!l*>o*&-g*t<@6Qxw-jYVI7#fcq-=K!r$Ls
z$yRd>y(dHP$#TzBapAim{C~ud&Gij?tdt7?C$_vi;qYaYEM6W(a?#)P`8spIr=yRB
z+sTXtzV^<{1iD3+-VhZ^0cLGv_diI3!~Y1#xM;{vuu#t)-LXlj%v{s{FEYXnJF~?Q
zQbiZjx=Uv#jxg|BZ41dFMQkSB8bJA6S3E4YDh@ib@CEqDuMgLMIu_E+G0N(uXseIo
zQcZ&4f#O>zw<8o}4+-I=st^55ySZToIeBp>oAJ*8A<l#vX`pZJhv<RuS_x$pEsw_r
zZe;``v*98}hoIUCd#*YAR!?(X{Z{<^n2?xZ+(D@q=$B7MaP{_JeeYxR{?GkfAv0ps
zsY~f!2yXzFc(<b>Q>*-+>q2%!fwF7LT5y^9DK9e`{&Kq^PtJYvU;rK2#UIYovz|X9
ztzn|pTW$L{KmghE#bGRG#Ru7(iyU-zco583FVJ<Dr?GXD9Yq<hys6|Z$lindIO#Eq
zH>vu6*CD(|O7Zt^x|fCdrdU<y&mpsL&36PK*m67D%(<!tjf3Ggdo+}xWEL;?ji=r~
zm_z4gRQ2Y_aNhmk)E^MOf{|gFaifoGd96IW4a%6U<>2Xw2oP_9AmsUxs^_OQd4U2W
zwO)`Ue)l0T3JtDULloCHFaXSs-y9e>lnc6_WJH=2a{{i$?A|FE_dmu_<V<w&;AX6u
zDDT!aMr4*vqCo6{zwYL%8h&1Z=0UekQXwYxY{|@XbGN;X**0<N(+@13=Y<CERR6cG
zIqg=aTGEw%ZBi`jEG@<U7yHm^5q1-)cv&uj1~#kGx`*>*{g<2~6O8m8)aJEqL-Q*I
z9dkZOm+-JD*7_7m;DYiV4dxYFMQ*hzqc2vokYFPq+rV2WEtZ<MO&;1_xn>MMTz6_@
zFt)ZuC8vYZV<WRqFXmYecC4L1cec?Du&DsVe#Di6DVnshD!4oNk_g?!j?Np1e|A-f
z)5v?*y&|T0^iN<vG0_wDEuMp{f}j0`zh@o>`OE^0#>l3$Tew)`Mv}LgKR(J{>21;%
zGuUFR5tS?a`NK602-RCA5r{KDI&nU7s?Gz+OP7zpERp0us0_n_SvKM7`;{5<NW2pm
zc-_!V`YXV|X~F2W%kHcUH|P|0?EysFYzxHz!{U$C9w4*G{RfX4X~a@^G}T=(gzR)T
zB2L7t$i9Guu(1+<CmF`#><-Pw)xWqqz7@9|tw>OGI{624mqxPE9_D%Ol6csk<l;Rt
zC5#bl9=heK+iyCbc0mV|vg0P*`%jwRf`HxTZIsYD*Kt2dd`kbl@P_|QNHh>Vy3T!M
zO|kbR??c$Y--b8`*|7VU3d?}{kL+$}@(yWb*YV47TT#HChHn#kY690v;}=7@viNg&
z39@dFt;{Jcdzp93c%i0G`W9~>*K=InNUsU|{Q#~)AJKU`xgwT&h9w{Z&lu<sWcD|t
zc;|-rXJ?=CQMv`Q7_f66CPsNLE;ZTn;FyfY-(wH&ACCRGrJk}Vfc56J_BUb)wHnMK
zhZxl!V3le7-{e6%N&r(#Lp8<B4{G+Vz7iAz3$3C08F7mDqs2(M3d+UlxP6LH`klPf
ze5pP9Vk{P;jT$J(y3%_?4y8D<c9vCa!-MCMM`#4M$18uyZ<0xqRT575B{bh~@s4?T
zZ)M=s%{qpz7<sfzK=_!pQ{mmaV0Qdpho2}R=|o3O&dN<8L{A;A=(l3-jJO)Qxm}n!
z5K?EvX;lJ!ipvykGIc~Z9LkR+=D;acq3sZ~_(um1$?Kuk(wEENilzB8lCXZ;1|qPo
zD<kdij`I!%yTc>0zvd~x4a`CQ@y{y~bs_aJ9)*;3T5<n8Sf53<;(nH}ysRJb14Yd=
zr_n+)Lp(s!*WD8)_JT*d0QVJ7mJI0@K_UbmM3*zYp9bMB6-Bn_M*Gss{PS3gM}HJS
zn#ljMkjPsKi$uyA{;!1xZgP|)4^ohVZzdTXVNi9{uKU&+w)#@h2T~)nmM_V}I=IWm
zO@uaGbj4d7n)017Q#R56(U$rH+3v!KQ@}rmtH9)&pGx2a8XMhfef0X0dZ5OizZdB<
z4ul&%3Do=Z<FNX6_kp5vG!}RwA+Cq+MR3I}a(rjw#DC4Pqbnz4C*?EIOM{f{qf=kD
zO^+RF@0V8yA?Ryn*3wt2pdyd2<krOG9)*y6pQxSP=Aizd-$0qhs?z-uE!j?2V2qY;
z>I~Fr?0AI*MMsZTKik=%Rc7>|z8|oA9s&4T7x_*KKJ2<ES4#TwKzZcbGPg=t!P%j3
z1Xs(<yi>?~`gHGAs@Kn?DIDw6LN;%=lC8A?$o|JtQ~Kxg&pB%Z)?MhNy56q`0RQpw
z<nx~{E`vFHX8iJSI4M22;2?^@Zf1(P(lX6_2m0mDZ_dsBF+RgZ&k!7jXTxzGL7@|I
z?^SGjKU7Yl!#+;g?_j%>gO?V#paGWBy|PcU)(-Z+)~spXP(UroXIK=lw^uRUjhGjd
z&4abb{V1g9hbC=_`SrD2DzCK{)BV9rF>NoMfvy9WS1U`XnFYmkluudS!0-RKS`Oy>
zw~e9pFeu>`F+!ZV{AVy9P8G|ka(s3GlY|gXxRrE>383Nl-&pYjpf=mQV$&WPSJs~U
zjxyPZ9+<9!#k93<PTO;>Ir}4LD`E;n(y+j&lT7<vczGGL<y?x|EPS#DXErCmZ^egi
z@v9?0yrvE#RKz>=05!fk+T{N_&vMHD$cBbCsR;r0xUBSMbn-jkGC=F=c~}#;NH$!9
zW}{3J?KH7_MRI02B^SX~&{I91`O#7>9T_~h%GwGB1-Mw+Kz&EQr^f9`N$|pl$g>Nd
zqme?X?+30Ml+E1XMFzVd`COSTtio{@=%-OT_U9oXW!-qmz}8sa(>|-uEs~bw8Ri`i
z#Y3<6zI$^)yY=P9dNPm`;6pd*#puufDMj~-fM3>S@oDzn)%rVgmf0L54N999MR%tD
z*zimFG#i0qa-4PR5A|^L@n#O-@tyQj#LL2eMn@YT5)0%<%8-2jpzjCDJ9lvZXq3|U
zF7YlvAu?n38*D}TjmH&x!BUQ2p6D603G&Ty8y|l<%Ar;5#B%=?1r3ClgMvt=?Ym+r
z+n;qs#~W_LNdR<C`&Q_R{;(GvZ+yRTUTh+oH2;3!7X(r|mc2Dg*}t%oe0>xBF_#QE
z1wPEP0?_y@Qw5?Jv}{8;3%#+dCbZnVaz)BffY~br;*;D)X3P0q2~ArI&&#=^8~KP_
z9h=ORkMm7OpknouG+u5KCgDS%;phjbe0=+|)8#vyD$LJp`H0XFvCH7oG^2}KSDL?g
z5p<&Fs{;#{7{PhFa-C$FvTFuU9QDs?Yp=2FAfa_AXswdqDVKvU%{6=l1liFx!DtGl
zR4RHWDGYNIj>^v7HIy|U{fDkaKj}S@mPs#{i+-9`VuJ`QU37w}wYlYbKg$SeXeH*i
zSsvvvoHsCb1++zt=mI$I{S0IDanuy|q=pX#vs)tbOFtR)u8chrW?<j$i>^;cx5$pN
zUlAmY95%2%ON^IpHC-p83an3@)`C2bFM7?rb6zQ2Jd}bIZh6dN@$T~Vn6-Fc?LWm!
zX9&%IK!)T&z2!+44FSUbQA(7jsH7^ItYDe2ms9EBv+E7^mGT)-8_+?Z#vQxh5^yNt
zzMzLe<1qrzu7iINAg!4mTW!5W2cN4(jM(|j**mY_zTH+x4a?O(lkKB3q|G&q%dc{H
zV6l|ULpV9EFFf7uY&_x%OO{Vpyqay6@@l?m$zmU4^3HBJc{S29u~i11y)@5qZ>iJD
zb7idXd_s7i#LoREm)&F`FXs%qbHh@OxsrbIps)|1WduG1wU@2R%Z$;6wEJiSBIfug
zkwLawn`^mgs@{5bn4rJmTZO|GO>ojx{ruTVi4e3xC)atk<UzmU8a*KUOSE13&zWVS
ztiEBZhC7n&!Hue1$ma`-@PuT>n!jZLsM_<y{1qSW%<IyzJ%KrmplOqmcZZYL_4w|$
z*2vB>HHbl|_{e%{bvxuF+~>a|_b)7^h3aUHIw~KZEQy2U!;Pc0Z$2Z`%;Tmt_w)lQ
zweKge5c2|O)CE;Fr{Toy9h_0TY74zm@u_=rE?R{WK@~!-awq6TFo+Z)RtCn)4t`k!
zO0c*OzYP9u*QK<>$=w8c2u(q1f&F-qD>5@~MdOu&YimL>b+S#ePjpqK)ppb@V%|mk
zn`_3J{Vyx&H`rPltzL)^zukGWu{RW#EOFVPiqs_mdZatSK7p>U-Ibfde#cVuQz*I9
z`8SIqJL;W`OB0&3Ir&sVZ`12oBK-o$h@z7SzMhjFdY+#Ue-+%Tt+UZpd4Z*Wu>Fbb
zZdhAAS;p}2>d`<D<Cw8j_Uis<dNT1Dk*a-<!GNdLmyoi_@Qb+l3L61_t)Gx5n4m@J
z0Ou=8J4M^^&CUMCR*skYxO?(kHF0ecjK?UaQ0DDhM9WXVvO%0#anxC1GA5#)Ks*tm
zJ&Ekb7_ARkh7?Z8T28P#mfZALl9XyQU1b6xi6V^0D{qacpu%RG2Ta8^Mr&psCWKS^
zY{=e#)9!P_goul6p&T71(K)I^1&l~PzDop_W-2=rW5PCEh-YgPN4_vlm2oGNhm0n{
zR-Mv^_IPzCz$1mwDWO}_o>8x>@V0suacdhp$n@TOygS||m~&xmjcm47>YR7U3qtF|
zYANe8L%6FdlbM<<O->$+)H76pXANq5h9s29_g-AhJQar4L|`8=tQ1W|G-!)!FjBP<
zZRpIPf)(a`#6;U!C;g}NQZ86<trf>Y^_s2o^0=|}uMEE*_?bo1N{E4ELIEde@qYR0
zPqkMczM^PqqNO}`@e1u(Cl|^7DAzk;-|W2_AB9%)IHnl3Qjgbl9R)`>!K3#ziN&Z+
zu&*X~B7(e>M_<s=+M_+X7m0xgDVE19AuoWtqq{BV?~0s)PUCX@vZHf{KZU)h(~RF#
ztLhE>yX_GrI+oIQC$xUsM7@KSnlq=Uo-wmJT*S{Ka$p~Vbj;h@Uw|`JFqyd|vu|1=
z?nGuyLv}){U8-!HpNK!Zd+@;|p&BbQ+8~gla9#E-%HApO;;qGHrWo3CBgT#E_^aFk
zQ|O%DsiZ_%#|MSVpHB}Wk`8mWZuT_7Y=ap#vjQh-<6UoT%QAsj^9PBsnAhq}QG<~J
zD=nkKXQLpRmL%~(FG}-5W3w#$&BE1ADvv_8z3{b0$!H^vv5cNNn`;63C1mF28kQa}
zM^2#edQ;CK1O#sKxUIxkf6O@{s4RB@&i5iQcB>{);6TZOPGUpM6@|biJPtV5qgz~e
zEQ~(b%jxzz%sq*vbhyou{A?-Fxt5t*aidW3?YGBjiBGH|CdgR2J)+Pc>kaS4;$YWi
zb=RUPJg1>C7XjR}qFQ%?7G>%zeYH+DQ_r(AqdCR29^0S?c{%4-Vjxt}GJ~|<BI?Wx
zH7V?TSlQhRas;KRU)`%9<1BB>#4A@#i<<2bk`pEooJ{eY%gylsm8v;;$F)yaaGnxK
zolB_T%>70%7ThPLuwD{=#>1QaVsdH}9-!pSythJ@Kd@T`cNo?Q!xdZYYNc)=DrrQ8
zx5Py<xbA4s96z!Y;f8z!is{Bu@5z`@VncaJ8kMab?cr&QnDVsYNMGTT;<u13<~D`z
z?>jlHPv(^_x=9?Y4Sr?FVC}md3P{cZJSB}WX;%{&;WEO#(o@Qh`x`S=Wjt=kAfpKm
z@;Qs&D5<9+`rlUkWuL#4<!RgUFEA}L9ptu^kNwPK%<Z&&KXB@ZYg6Q_6~?^q&$lBQ
zS@YrILyHb-v)2EUnyyg3l%#RGDmSKXAyiG!P^d0n;0Amk^3Ts(zp~^{K2~yF$VBL$
zmq1I0naKjzd|L{uDk%TotJ9Uh?BxJk*;M4z*U{_^MNe?OY0NYp?z$!Ti)V6w%k=Jy
zXqi%s?!<RIqD-9^xd>ioG}`hMR@Y#a_s6)z%06^7cnEHPH45^rzN&C3;Rj&q@gE~0
z-tjJIe}rR=_+~C*jrSS<jA0(BzyH-Ny!5B^Q>b<DNa@F7B2pgTRc7kU^Ra<H#l!TW
zJgU=400a+SNqE3_5+D5YOqCjYvj-S9feBPku?)X;fY2xNmbv<X4_vQeK6f-TpM&fC
z(2hQm>mXLt>=FYqa1zFNEjFkBdlrN8)l*kM^*oNA&X1nU>Y0ssi}`l0(3)+mC#(lT
z0Eoe_zwzC;;8zfp5j0){T!T+hNfDml-IEGhlosL+-@^6@AQ5<>0m=f{?k1rb*z(nM
z<7yT#Dl+^#0tT2?ciP^s4lMaYV4cr!0C^eWbFvBYi#+`%dzF6q5??bR@nc$H;zua>
zaW1x$2!XcQu-J4do4ql+gAQN^NQZr_ToQ3;i@8W)H2vKYdSgR6S~VM3tL^}+LXGI5
zye(Y^t@t2kDT<^2efq8AvUzVe#nYoxjOI}*qY1$KN8tuztwN6(->9TSwR&v97`OU<
z-xUB-C0SBV{1ybRZ&uh`@x+bjNC`b#*xQ}^Zke7ot&?wv@$aPu>Jw*AJ7t$hr~A7k
zFAzSqBKvs}^y|s<vDd{U@sA$#y<>l{e=VA_*IV^yGq3Amis1HW;O5f3{y*d@%Y_7%
z6c}I~Q%qJku%Xbd7k<NKI2e)?K?vD5d@jFMu+^dW=_09T$=kIyIoG94jR!aRj8T2F
z%APEIWQ%(y=gc&R5Mc~GP7{EoP(G{~*l`CjR}8ajVyg+bKRN1NcJIq@ktx1)e7Wqs
zXuqUM35#C{Zdd~eZW3L9rBx$B4~-SNqVsy7V8)u%?|-@?TuNXD+av@ke`vZ{^5nrQ
zUl&)P3vZMjQMq5!ak-<eda&R^1;P@<<mOIYG5skCSERS*O_-p4D_YCBC%&-#h7lfd
z?#ZB)`OU9o|3=BaO{ib^zprmjCk_XWOgR6~@9&|Z+kcb}S2X@}$VuJykAZ`x*F}zC
z7xX<ArjA}21W6uP#{b8x)%PQw0Zs4X_XA()$BiCDpOs1~_~Yqp*=@|D->a_(&Zec#
zTDqmO9zb*4BNdxOnw?IcYE2y#2%W$e#w`hbp6V5M`h??4jX>oXLk!j(R-;dJQ@>a}
z>GKl9)%GxPmzO_Llpaw_`YrLj^fWR1^%zTqTG@YYP&DeXlO_efy~03ZYR*g>GWDS>
zv!bzqsK}R^C0xt<NgH<mW5|DIxpM`_s08#<9vUUo%y|P2BR%pOw28^D4x$WC(e(L2
z!Dw198O<_H`v&i*`fmm!3NdF}YeAKZGna!!+|`T;Fb*AUf0U;F>o2XNU$}YPbo0}W
z!3(j!9fb|LnwGV(L2QLBK-gV(Fu!yPoroL}lOVSB^pS&X+yWHgDj{>@Cv?Xjn4Mir
z7k2-=B!pL;Gq+usQJ|@`WXGQR0Hh>Y?}7NV=lg;8^wLk~7x=i|csb)LGD<<XU5^xo
zCGT81n&gCLfx~60W{aOJ5?oQ;q~1lb#B|pF=p#9J5e<zB4?ok%I@d=r63jO)StuYL
zkVf`pqd#3#;=x(^?@8vvba8$mU|2NUq$aAPNoidKQi?e0V+#L2o=y{+p{O<UbLjTE
zR3&>rR1*Jv9o5P|j_UJ#!w|V0ry<3)(!vxbZ!t82ky)Lh{PTnBYvBNZ*>y$4l1reY
zP2+P347IGNj7zk5KmU&&)A0%k_D2{1!4?dWR=lNBD6=jj6c$t@2{*63;<3@HXw#ds
z1L*8|&HDhonL9OZ=sZ>EWw6pjyXeo&wNCD&ld<0q#AAq?riW+O#eS%LO1sJL_reAT
z*ZjbnZkB$1E&d@2Ip-5&+D<n**?*;9dB|`{CAbo%HDG&Rofv&7NX1x!b%t!80E988
z;;w?G3VPdk8ea1+#*B#p_ZuU)R4Dh)7f=}V43KB?8dk#v>h7!@ygXX!VnbvVI+=`q
zaU|cy7W_O+AbQ(3<Py`<%w{?5ki@mvcY`q*ohXT=YPb$C{LKq@mW{|_qhp+botjmy
zk}~ng+*<G&^s(GhE`$Y2kCJQq!5I}ig>9UBX)YzeUzE47ce*)66J=>{5<){*aDs!=
z>F91OA>NkoZg=R`+SfEO)k`*b!BFY&QYVW(>(cN#S|$Aax#=F!d{yu)B1yW{)m1>C
zEuN^}h3WEgYb$D&zHw1##Z86niirP1YLBA7A6TQ6r<=FqTr6d(fh9#}#d3~J8gc4Z
z=)5aV_SO5)D4DUj#w{6cEW6D`*Ua-7au+*K!4kHKyFCcRX&4!$aeoV&Z7`acnA<sZ
zZ%?z$c3N}%UUGnY5WUYgJ9SLViD=as$-X|Kf2Y1U!36hWbSl_8F)L}HNUi(|{q@z;
zgVq_J^s1>sT}I{_Z`r|miRT_?CyaxM-g)s0%3d-FX;rd=1{{f1UMe#5VEg^v2ZGw;
z1c}Kzi*8vAUqbVVu7~3fl79FWHZfLp=qf$f0(0tm<VGiH4Yy8sJj3kC;izPpTF-Et
zEa&QPf^Lb-<xkbu8949N2TNq{;0Va+wdw3Ow<9qIO=HE$*u=^$sj1zLNbUUMKbB7f
zKbN&YHceC;EEb%qqh)nz6UrTJ?$CLfnp{n9^;&S0VFJ+H$L`L&)zO6YC#2>m!-`Vd
z@P{u1yH&KrVd?k5vK=Q1`R?xVu1h|z5dVOuQvFs;q>T7ZnP}sVhC<(3-~-}iGD23~
z=62@7SkD|MAl=NZzj}x;GpJRcc6^fCXd$?wD;SS7K{se<|K8~z9tN6`?j-HdNzH86
zQH8Hh7y+v;B%?0g_XGPQ_8BGtVb?HvH9ZpnyV*t+#<!O7gsfsP-_GH%L(ok)TB^t3
zPfvMLV!Y=ZY%=TjH5JP+(e#LY!Txb)>B?7^0yvN0^G(JaegxiGpr_qdcun9rC&-+*
zf(UF46YEZu`#x^%=AP--L-sT!hpySv!Y(%|2i&`nY4{nxS-n-^=>gYt2>|w5G<4`@
zEJchR_%N)T?6$QVrM-m+#=_wFiV_WlkMl<_eLwKrv7)?Xpye4p%(iTK1v_s3a5Tox
z*LR}jQe~0yz=V=0bv&DkuGcKC|K-lAjq~P=3v&xCef5#n&r_^;=q^m@FkTBTtHY=*
znz$N%X8!r;R9-L(6Xt?kjns)9NtSut1D#%S;(tiw`&rXZeG2q#gwStNG(#O6e<`g;
zIvJUVU($B6%%B?C7;>{w0*Xhks_6?#6ug=;s=xHQyNS3ZtB^x_L>X#y%aHkg!0HB*
z(8~42s}p&b{ZALX^m}l^#E2yZLx*3snYz?XVZEg;Lwjyqg2QUW)_Q);_Vg7^&NG{c
zC-irh7n3XIs;OH><+y?~^w|M};y9qJ*)$x_X4HdZDwtuk8?*Yn!m1#y)eFntLb<Az
zmGE7cu1GaTh~~;9&+d2>ltm)cMhZ4*gINJ|xC<)Wjn4*n#^@=RHWzbb&Bv6zyt_{i
z*bf6bN3a+978E|JGu1dX|9tRLBv6HsMcB3t?OrM0T^C#WNu!=7LTkqls%$m!k1oU3
zwKq##66ez?vL4cx`mDchHvUWx6LW0Ot)>S-r>k&Y>!M72b>3;_1Ae?~70g~66J+IK
zUYd3>Y(oC+#)2uOJCDNfsQ=p%@fXjL`)VqJ53k!P9ya)yXh}jO<F|rg%UT3EM6_mj
z0aZ+sqLTf)KSorRsjC$ZU?19#l)aD4FK*hbF11%f_INv`1R5g4fN^qzybt4&FUksE
zlsC^hNt3u>+A(6YU}7cIY^^8k7(Mrw3SSP`OINCEig5v@AN)`p!n;@u^Ym(KLQqyb
z_b4KlmmBqVi?oOS+V-hgt5x*)&Nw{qur;kS$}=T)DW%N^!iY)!l6|<7HsWd&)w4ip
zSeS$w|GXj>OOCm)?`+p?ZXxs3@23pg&@D(Wt?n*D(LHM2iv#5c5Z>O;m7*LUMNZ)_
z>*JUR2@ZF&O$i|o*Ec7<yd^1MF$nsLRWpQ`?K&&Y3<6IEsZ*{Vs@!Y=jTU*a&-A*7
z;9NBU{X9m`m0)&4yO*OAQ{R-N#SWuxR`>JZpo{iQu07P|Auns7{&nmm+{W82IjqOl
z$dS-!YoMG4*Lqn4>Xgc4s_&5ElOv_6?(u-unhuRAGPn2C%USPy!qL)Ca$NB3@z(9_
zefOU07%(YI9@IJiQ#0!xyKS;5#U@I-GUHHOFQwz=&T%)x+t!^)d;K@ltVi-Ik>_us
z;x{E{`8W1Ofnog@wi8ic*Gln8t6JQ33gp$+L-bP`DU43*Z=6<yqAQf#2pi$b$$gs&
zy5^VvRy52h`?O`fopoI#zqA3!MQ4)bKwJ4&fC+XR`+os?%hBb<BFGZq=`;vWufTuB
zuM1yV`Fdxn=KnC!{i1&khn6<K1g$G&uMOi1A3X4@dR|wv)lhC1`plhj{&5gHdcN$u
z0;oMO-PD(OYf0aJ-Fc%|u9$lp1KN~@`I6e<sSizCLkr>le%W!y5jaDS?$xzKFRw5A
z&pZ2tF8=nEgwt87=oaTM>@}6Mz}m82`+mhh`BYcfE&Uk(ICh|5guRN><@3v5c-+!<
ztB>o0tX5xpRN{{Ar(Rl$xIPz%C7uC>hP!DEXy52lsTX^I4M)Bx`!C2`9W6-vpi)sj
zPimDg>n^4aQx*t6+JisqXh`kA2uo4-Wp;$ZIQ%PNSJDKSa@hLsYD1`z7;YSghIuZY
zGdT)*lEBZ*JD9aeF1@DWhC*`nT;HKCv|@Js&@DVH{&cRbywm&3*E2uJhW}4&R3=KX
zgU$e@Zc#BG#%G6S3k>DKtPZp`kj)1Fnxz?YSjFl-yAjPSuQ+If*wOa=;En#l+mREz
zcH;G(YpsqEI;1|;_05{~ZL7fh{^ljY_jUkEGRHCsXat-gbc5?mxZcD@+=|zW&UNsO
z`#qSP+#+EEz;N`p?Zqp3FY@y>n}*EbsH);&|Ktk0vr(a%Fz?LqQz0W}_Z4y`Q?FSh
zvqMJhNLaKVqYxXMYt1RCnRA)w+VEW_m(+@AK(cp*mXZTZ(OBXw=l?neZ_2uw=3XaH
z5xM(!MVep31eum&><%9SMXa3yh$-0(`y6O^ped%}57F_OpJxw7JGlP>J67`_bKj84
zXq89t>MaSAy!)}eY*y8$zV?ZJAD2q6IGjfmRKRp4;NfR)@Acts(1Y}2V#;*^Vk_3*
z2Q`bs2i%tpbDxmiC-`~sJ5epYlBTP!OIyLd)i;Og7xjCTpC~if?d(YdeNRH_g(E&Q
z20#dR68AhzEL${nfpilMIt1>LqRdAmE&_Z0Oe&?;C~kC1wjM33m$p9s!AU^T4(UTh
z;(*^*`1m+)s8Lb6*<BNToSjuz)z-GwalL7B3H>~)e8t%77qmYC8zre&#i4Y#9&k&Z
z*@Jn9{b6hBInQ^S_xPMUv6RP4uPzz?bQi~n@*K5*wg|Po--QzXVs_@-L#~Z7+-}I|
zbZW6LT#Am2PAJfHJOai>|0*f|!5SU5lbcYl@_+a(Q>)%8R}bL2&v|yG1OKryKm9*R
z!*_wDPm-e_^H0_*@#~?22=px67?g%8feb|UO<M}8CtMufkuomdppaCc1=<(i^x{S)
zMmhwUW3i?UcL>ZEd0eX?Ci<J2!2;&)Wx=J(=h`D=LgRW&vOt}w2>bb%92_kf)6kG7
z-~zoQJ#{a6urk)X{7?4Qcrmmn_Txb4)P~P^J?&-p(iO?*(E`<EUA})9UIJ|(g6H8u
zA7tDLH63H&EMk$PhKzW?Hgspv2#@sFET{!2mvW9N!gRPD1HrM5$o5z0%xJ(r&rO=8
z`)=5PCQ8p)N5lOcF~R;m^&^z=j`~A#_|>)ZT~ld!pPP`PN6>k=(KN7#PWBW}0x!35
zoXzJ>vAU^|xB>0td<A5AzDDo!Q}${2w1PxIfA40~?Z79+m1(6(Baz1!z|#yS#dCZh
zy>56V`tv{;^k1~qYDmJbgLz8@aF$dzpu<>V*(U$Q+|RVr<f87_zfuv?`BpN~l`rdb
z`$bb;y%>Y&L+#$$Ih^ok_AHLz3Ux`;CerMu-k{|y|AocAQJS?c^B~OQ0)r@<j4)^~
zoeW`vNP%YZlsHpmk{~Kv5~ul-=Xc(S2KU0N?SF)5jE)EjEZ`2-g-;fvFztD%`<!Bh
ztuIWJXnU3}&&wcQ@r)#i)kjn;S+ZTT)q`dpore%Nc&4%EE(e&OuUX#%PR75<2#f&R
zxJnp~tiv2#2H5qM3&o|%e~Kqe1{Mj>|NFne$TG3Hq}BHWOU(V`AvvXwl@tc1Vs@)*
zYt%V0l!i-0a%pM?>Dz-xg98IgpI)WWV~rpi4qj+_5!#^Y3f*)4+f4f=Xg~*iKOoS)
z6#VKIa$RjPXm3NB8@3DOFKB>cW5w$|@UI!&Tc4h>W$|Jg(YbDF^SZp{WuJw-XX2Bm
zy2>X_fs#jjZ^Uj##{c>aKjXWpSljLY(PBRHtV0q61XtyIX-)p#g!hWUl{u@b8PF^Q
z&f~^hMNyNcm;9hPnd|2Mk7RDN(T1LzQB+WQx=I-1;zf5w@TqR>9{r^bt+?$kGW00R
zG6L|(BW0l}3k!g_b+(8xZ&`ew-MV1?H6}m1Mw8MFx=w_eP&w0f8!+4;fJj<|A4*oo
z=S~}J$@Hhpg+wyFotOGbzpjTSDNl#cPj;5FZVZ}q!7o-b(2QN_LHAS>=i#;U%s%EZ
zZN(1VbpnV)cot%7K4%g6SH|TmI&xgR)EP}3ApEK#rhSOK>-uV(mJ{dpO4IimJS-{<
ztI6o}pAz`V2KjjRU^%<EttFe#N2j@lOG*O#2N%e3g}qEq;L<~Al5~2)_?SGeiQ#jk
zMEj*@*U%Ix(T3}m!>OCK?`<gi5h7T=fL-#YGU+&n!Zs+kbs2%oD(DIb7kxWm4|(%3
zaX&22dCxTXf$ew_=jjC-?T2L>Woz#yFt;EqT<%x)6gh2w5z|*Un+%7i8imjFwfeKb
z{J3*;0rjwsMMz!o^zsUv(xZenUT%gUl^H>93QAU6vD9~TqlbA_)$ULvSAkCtoPtNO
zuO-bShOEIDoVN|;u&&gWF2S&xXv12&bbJfkAGW%OIwAyYF*0QmCi#Nc?6UIe<MXI-
zNK2@}e{0kB{;h?hs4&qJE;lY`cSP!^!MHu2RCDU_xeLBO0M>-NC$Brk5%V%K;XSVf
zY1W8&Xp6)!S)rl3@GyO?(4|60EsOq@Z?;AQ&DFm<71es*9G+EgbXZn9s6F6whR_EC
zdik`~+HP(Wf|(0la{tTIwygQ~HH=X&vjta1`$h@Kr;K=l(E+feyl%N>&z-;XI!uGD
zr&i*4Wm%XWzpUc}+q^>=zeh~CH0y%QG~2N+8Sg|_n8V|a&-w9N(d68&EQx&U87h$&
z!Q#19+Y$V)4e!{rxTw_FUkq^f6fx?FjhK4m`$ZoEFaxnJF+LVGbgfqNV%-94Vc+dk
z*;QiCYVTq%JEG;(9r}Yj+idGrVvJR(cWX4Idy+6W{3!xMdD@o_h`FX&U4qx#fW3vE
z57V{`rl8hCAZfbAy<gc_9wkHPn$ozg&gnXY2g?IZy*N?#>|=~=%OplCop5AJQ|3sM
z-OByZPtfLmfHfkV&A7to8sTNI`65+25=H9qV3j{d<{hDP!PdPtitr2_cscBLYyQgB
zz=J&<^V~pXAZx>U*>Xr@NFSAd3sb;MupNkFS;YQEN{T<2g^5zV*fjC|KxNsFPfyam
zCQ&1z<4K6)1zB(-ZYH|X3(m3RL&Gf<^0g>Uf}X8d0>b-Or}A%W9+V8Ls{CAqNj)PL
zUh260!GiY-6BH^5hEs7S0<Hmc0Z`P&=+UaA_g(lUlKsi3Z0jBZrf{&fPD8eD@jVu9
zL^|1IU*qmMH|}1oo3~{E+e^EiXP%{+FZ_}d&l9*j)5vgDEa6rZmDulkTTeo#T&o?V
z<a^7>gPA$-uYXVN(o6O<EmHNjTiu(#_z4I)Mn-KTb4`Xq_bKvE!20DqbN<gtTJK)%
zr7-pp##pgVot4of(t11pK5Ab#FKE+tPDnA0LZ!_$W-PNg>I4^eB5fpj_gO{!%Kg7d
z_J%u(&}m<f9UM8%<oaNkz*{2#UH@x(PNoqdN+(~=HvBZ4mxCM7(h{axNu$Rr;oGXY
z6Fay|v)T4391~?f7nW0t;n?>Bg&ktfWok%XI%EPn<dSIM18ux{T&=xTy`E^3Vvsk_
zBoO!Mx+R&}Z73=65Y7Hq(9FHc$>{I#^#j=Pb=%{-&nPnGIqoLTVs1)x@;5mTv|;@=
z-#0qt7G$x09UY@FXqGs1J;G8(7#Ca#J@JKUq#a}tG2t4~<USoPmL)VAWcK;?1lbZ|
zo0(?*d=IQ?bDB(#d6Qi~aNf9dikROsIP&>zlKl_0>GZ>kX2}=qkK7zV_E-e&b^MWB
zXkJ3q)4%=WmW69Z*8k+KYO}KSyJQa<KeogENAic)`i;dl3c1#L7O-b$OJ&22P9G?I
z>4=txobKq=&wXP3ZX`tIr<*ko_DEP`3RMQsY@{;bAfn6%m>ji^mPg-m4Jo--_3pn>
z_gn<Di6!WAK?6tAK7qXe1w`~p{nJh3(GlL|M~~t^O$<gd>@$JNq=y!(9*Ub#P6<7V
zr3v!T^~@$sKq=J|o|`3wKxi;GP}2TbHP+YJZzqE~C6?}BqQP7cch8kh+2TvOJ+&S|
zr#UtQ>|Sq{Qy~<Dd-j9r!2DCI;|xii&?&b;R9OxwczFgr<?2HcQUEI!>*7$f{G5k|
zO@fYUd<l4iUb5#MptTYmFTA%K^ja+K%N6|u&aT$q%M24y82&LR*gzQ?QPXA?meb(V
z)GVC@1f;uKH(|ce!01Grh|<y2B=zgcFEAMgl}hG&7gi%Y=YODXR^^i2JWvC<ztoyw
zqyng+6{fq}0UU76tB-OQnzgllS@L*ON6D7ufU&gs`aV)|HERS<`DX8C(e>-}sZd4w
z471qlVk<kVkv6J4C^Swt-}1Iq9b18Vj%uk5l_X1i^{}6EiJqx9dICLhgFdX-ra;{a
zE4e&gWc`q5U_z1lgg%}}<PR46vB+rrUwwMhU1(O-+vO(v^<`H!j}?;9BO95|%KsI#
z-NZW@n8QvUEr)KnD>ksUbQl<DIO<=M-=lcfC$_{*4!W6O^g=#<u$0tAaDf|pTVvW^
zeLnnV!dz`b8=-R7)9V`Vk)p9tk5JdM!n1vWUh&_u<iE<23;%Rlx?uC?F^tG*)Y0|L
z_XCes42>PtPYx!l6RxzK3w+a1bo#W)>4su{z=6^MTb2K+Lq#2cXC!QYKfwP<O%#e;
zxwHRjE=f*=9UtloO993q4I7?Hq(d8e9UAkQXw_^ilWn=Buicm}XloE+b3kEQVIH+A
zu=5ERFJPZrpI~&D)~zM@PT)E2P5p_hgs+*wMwNhc!4>E>w@yws*dLE9oiS%2H1v11
zn7O*s*Ow_%K1rp^jEG8X5cjuiagHA6?>Oh-q$%2a$7gG=%+2J;He2u$QNYkPpWQD#
zwq&fGkOZG~FA}o#Gf0zYJan@d`VB-cmcu;OvWu!#dfK-j35Qz)<<=EO^OM5iE<9vN
z2W#TY8OKR4v$4D0RI!4Sk2X3==Y6@CkG;4yP{IJdm(tEN`)>oY?rU8t$?|8eFsjA&
zFK1$OgO+A-V+r}_!AnQ4-rTl-u#OQXM<c;)0>e>dX_i9AlK=q*Q1bovP#w9Zi3uD;
z)taCCZ{GOYiPnjX=n*r`4ZAe#UbLsl<x+S;`mZkdZmBn0RL8M(X<3YWOMX?<&hN!#
zuKt5Z4@NIM+3BFwKO<)TKbF2dp6UL7zt4T&oo{t_K#|;~2;nZL5bhE}EQifu4tL3E
zGpn3W+kICQLTH3g&dkVR8-|rgnL`en!_1<bZFAhP!~J{R-^cH-JRU9Dyx*_)^}Md<
zbzQ(6c##ezW96_1!M2>Ig<3C;(^n8KO@G}l)qxGod`8jEm3|6cU{-MZk}g7y73w_H
zWWa7cJ^ciB3^3iPfY*Nq#-yS1jSm!O!2ho*S!-J3<-o-#V*Lkw(dIw;pV%v>i#7?h
z-wz);&Jx!i7FMMei1&~N^7qzu41`(Ln0Zc4s=LTcP9A@BLb7bHysL_RWXXPB&TImV
zN!A%5VFOX*nt>>Wa@ne^9oe?or(q-*8wIk*0i4iZ@Qkil%xdmjVtLul-ePOj9X3~p
zI}{Lzj(_h|VG>nITU7-C)TM=qZXG)p@+(%r&E2WCBxaH&HXf!4CfHvPKzL&JwctNW
zE*E^<L5_CbK^ZnAD=&C-*>m86(*~`>4F-WFLxi*O(|WLb;S(m=1cO2Axu=dlySY5o
zX=v)4IAtn?x|J2oMiB<<ElGRQU*>?BqnY~DQleHP49VJYR@UR%vctDXq18k08MM7g
zf)AJ7nc^I%>%b-E*2}fBr7hpr`j*O<B-1uuvM@>?jA*6AdJYJ4p!@*l?k3LOkA@@9
z(4LImp@-G8evoGM!mYH2j4!3#6>AL{mK1F4Gi2eGcI>Gy6;e<8E*5BqNfZ6Lt7BM(
z-8##;O^+j2vN}i%Q-2TZK?}(R=|fWmbME(cEQsh3{!q)MFN!O5ayxtBq~W3w$;iRT
zusL4_OxR;=9+^prJzZbLvgRg4{+fG_LzVuFH_{!p$2+$6UGU%eh^6(Cmu$od1Vu_P
zYKI|Ov0W#1fj*F0>9J<OYDGuo(dM!ocg^QagW(g2X1vL;WE|0tWb^_K;H0Bg50CV6
zk7O^%4jteuh9B~N)<mX0n${wnjbVqQLgie6Z_c`6`f}IuEj9~LTc$v&)d(#8QQdDQ
zwc=hc!)vf1Rs1)CWLCZPZOlSXx>cp$of4?@-cB`poBiP5U5ZDrt#GY!SJO#S3wjFh
zHT5o8DuQy_ZTTiDRVvIr!@2%yRrtGRe&yT^T_bZ#D5*s}*TY`$o7Md#Tt+5ytvc_o
z%)wg}H;<V<^@AKhcVOg9#`J~K^{?5EaaYyoH#QGT6>Q<mC7htg?#gk~xd#=D&o+mz
z%L*&ps4IE%cu_ExU3s!S<<*c>uu50+1whvo2sdFN)Z=c*sPr)xv*2@}AI70eAw+Kl
zP@cWFa=N+v!6^+?X^#2xdbJY$+pVnwg%qS0t|&QNADcT^yTLn#$kAB3YBa(*g1^bs
z2U2v6>$);0crgB_8Wn@2ni~~U22hOPbMH3e_zU<o&6i(on=OQ_r9pIysn&CyNXMJx
zj)IHH;Eu&Tb;q{4qskurcno}M6D?A{1m!VDc`&H&6I8ps3vU{-u2Q|$?l3$ZbW}S$
zs!s^-LC<;SetSck+6VC7D|(;GN0x;+f2Q=N=+nBM7}>PKNYzU%EO||lyU7fjA$-fJ
zH&AzaQgpBPcmht3A{wrc0s0@p(sqzraX0lYtn6fV`Gge;y{0^i2>eakyr~U1@)LY-
z0DFah#*y0!*3-JNFWvtv@^N_<v#FD7Yh_{FOF7>*vz=3O?Wfk}7@Sh!w$p~`S?IBc
zDMcvxj<m}`u<fwnqYGg###;^^usp=hX+WEVgB^{s38q>2u}&=(y4C7U)B7#&kBrAq
zp)Eo9xmGmks6q(Si;~7AGyBnpv(6PnqfG4vIaSrwD*u?q-e+dxum8A}hFSU&peLfd
zKHwI5>i3yKwIw~0p=X?CN$3OVFDZXg{ccRMbsuKtOy)@sefY_&shBlmE;99s8kBTX
z<5<*&D$y5Qra4ZG%x~NZ)h#@?<6Da|9!@3}vT2G0pR(YnhB+%?bJ07YPI#KpITN`4
z%1BOxpnb@nn`JbWZeTi>@uQ4E3_LqR*mV7?IXbg3UT<v#^LYlkp$l;wR*D~qrHOi~
zdWiM`I$XE6`-g%YYTqyHB===SWx=Xfd*z**BBGricjR36P@$a_)oBTABQAx8vjoVu
zE8)+WAIIAkFi6)nSFmDa=6rP&l5SbC6@Ssyki<_#@01ApIiAk=g@gAb4$U#ORml`y
z@OW$8^jf!qu2xC53_a^1ZL{Y1>YlRm5_}ljG;<Kc!@9#_s+!YpeOh~^JS!wNO>J>~
zgywOCI;+so)AXQu^?lhUycGsDo~XFY!gSBHEs_{`V$WTq|Ku;jT;2T+YfM_aB906w
z_pnyjN1I1|Bi)aVCu5V)1pk;i^Crwv4DGt|aM8<gwJ!PT{$I?hZV2Yrb%!5tQqIpK
z`+i@^FRGii$@NRV<G}`dZR+g36XjYc#w^1ncPq1kpmUx8$v>a)Hp?e!??)t25m}EG
zWHx#I29M3(91#*oRa;;>TQ(F^$SmJ+y1J7__VRd2S>On4Rb8^`EhPT%I--*P9m*1^
z6Or_D5suJxxGz1GryJq*OjnWPfmxjK5@;x)b{rlD$MiInNZ$*Jx%v*?fAj`H;O#*l
zHwVw~03$3>j8vS`C5f&1*zGw5^bKg};oPm9cZAiHg7&E0Wui!Muox`7L%~C!pqI-w
zxZWR(B;}r^y8Dawp2yEG9p=ZE1-FH*F#|nE7u@5MPo-_$-7MY?zbqmy>|}`^b4^)@
z^}LJ!JtE5;;o5;ZSgedqS<%7pvKmp0v9_HNLG1<zH`@%Jk3FUDa|axl(q_)4N&uWS
z+zx82G%PPAOFN#|5ktByT<(D2iQpkjXF2}gT@@h6q`Kty?CAtYN#t<A-v0F%DhGxc
z%Ri34HP@LBSjwy5o3$-`8iFaVeFAAC%|}l2nt2o<{dhvHM6&44NnL`<Iv!ij>6%>o
zzgI2<;1yecRR@CrVg7si4Rbb_lBKQAc>Kp1mhGo3+H^XRp3hdF9Y#$@dim0;s2nTP
z(dzE$^EoP(LV`O%f|DW+f+LMZM9Vb4g2;LxvJW7%O<7|O2eWCMZGER&_%(fQ(KdFx
z{E-=2!eCRJyPxfBVrD*bh_be{A48JP3M@u$pf0a8Y1WniYeV4Awo#y)m$3Dl+M@e|
zSieOqJD#*^*J<JeVJr&%0Ly2aX8-Qecw1~3R!-G_jcd7}+NwupA*!9UK$y=%uLU8W
zw_S;h(DK`MxHm!k%3N4sQtCk1rl8_n{n&%KPRDKt10R0bw4P|Xz5H@yX!8hov$_NS
zds#lGc-~p<aMdvPZdb7fbrO`Fcd4P5_XA$`UqH^DB2aXaIoRm68bJl`=U*nMdc0}3
zZ?9+bszW~Ek-@)3U@U-bPyjxERgg-bqQ8oO!0%h0une#lIJR3-gH>p*%^6&;20xRS
zKiKR4?$Y%^7&`GUB=fU;5X<R@8%(=-uAWL{|Ei4eULdC3ui|F-wA<NAhcxot=xf?&
zXv35w5r^6{pWl3X4*yH~(NWAINhiTXve-km&Ez#VL-v1=qS0nc7w6y97@f*aBJRI5
zJ9}I>bl!6I6FYPOUup>bN65GjMy}&Ux9Yqofw=kTy%XDL)Q@1$*%+xg1>rh-iL>uf
z*Op(hmy-?JeCwY|wu(k0pOV%L{)gSm@`DJu#VOPJLW(-x(Bu_6s$CJ}^asd2jAdSd
zrQVr6&HOwY1BAA=m(KR$EO339d@(=$L2wxLBWB>?iq-w)1d=gZP3VZq*J*}iJp9ko
z<gz8(`Ew~w+W{V7<C*9&xZsSS0iqYLS29{W5=>Z`fQ=Z!N_G!oi@p%y>xBP(1Jw$O
zxyy;{6>a;7V9Qn;_0j4;uJ^j$zq|IfdOT9kJ;(-deEuHba(Z4@Y!H+bbZ<CiHfzhf
zuS_PDF4P1gQ8QqJ-B{mjr8=uTV88K%$-Q)aHrwf{R|R*t@SWvEt*Cdiy6B@Y!<@_#
zk3U6@QmB3psiHG(;OL;m^R`Y_J1`+66ao%|OmtBYVs#>27dB+C@HX-cx`if^ZtuEy
z7*D&{7RK;JXAzFoU9($mC@{vg56k7J?aAVYte5&Udh|9ICrONFP~a-Cn*JCpNg-dz
zjiIvYu(FK$_#X1=S+Bk3K8i^Sfu6p}-so)n@a^jEwbZ9fc!$@DObtwW$d+}Aj?4aC
z=Uc#|0=E-McBO|i3;sM}BT&mf9y{Ko&x-1oKB{pnrs1i7`F!#1<*&ASiMz~f%LZ>>
zYRE3>RKD<2N+~v^fCrmQTMq!(fJ?lKFnxfX#5e2qX9T60vV6DULgJSMTf(6#onfDf
zA1XYmu-81wH0i1$zjr((`w+9HRR@eL8rX3!ek*0<^=b7!f8i<P2x#2bV}Blh*^oTa
zV#Ci(reKEj*j%2jj2`eiAyju8=GwjadI7W~#ufgpYT5heK^rR(Jiz~gs`)ObfsVoM
zX9-QksLF=FeZylHcU!Mqww`B4y5cA)#+^5I|F6+EGlO><BmQIY{PCB!Z^JlXB)x81
zvku!=9se=OmO7{VnlGnaZQ{ILS)m)m<B5n6LV&^()#Ad$H-{<f&ZS%O?duEFRlQcW
zLdO6n<uE8-Iws8jNQABUJr>od!{~R!bCV<zdTJwF@iRuZe!Bl?ZxM4_M*iGzu|#Gb
zFc09YxXRdAAaNs3X8u*RU^e@(Kw3-VN0u$oitJ&g^aZpsS(tY%sw=+7=;eNBrcLNr
zOf!7eW}jm(x$ZASjN_IGwcMa$)Sy25E+nd<?bnf8vW^E&#!!4%+Tdz{881be*=WCS
z-8Alptj3(yVxDjDbO(nXIlqngy}5I|EP?0eEYwK~6H*NcZ`=@>hE-m^O=}E`ai$mV
zz}v_&&q;*rQJQ|X$}6_Ev(6vMwi6>uzuB09r|PGpR$z1I4(TR`Us*|BRpeoG!}>e*
zhPH28=es8ha<_tA5~e71&zMu&m6j{Gon_RDh>mZ!VALL{M+aAQ#0hRl?t**P&?!uE
z4^7ONWeEbt_oQOW0=R_8Lu_Ec?(BToAKEq-vxr~g#Gq;}Hz*i1YFFpZIa};a++)%~
zT_&$rH1y}t)eismAps?^rADJ%hp6A_z~46i@2+1r?^Ab)P>osQoT{hdGXiM#5uZk!
z8~&4YQ2w+0r)HOzFJ!(;*j@^oIaz%qpns}nvQS*c!`6B<91E}gHd|+tIcJ)qKVmI8
z1|_d!#(=#Is`C}clI`2hCNcV?PT#nfot#+|?Hv7JWo>+an66MvM>nb+`$jM@;TMDD
zHyPj8Wrx9h;xY13o`yuh1e`-jN@hZmpJ?&eH?fukJB!}h?af-SUm)8JTxC<xxNJ2Q
z+b=o+*9%MRt(K$opXsuUIhz-bqA!&~{rP1N+@ZW@#n`%HyH#d`T3wfz?{?#nK|YN$
z@?y;LK6`0q9v5uCf_o{;=dUcm1h6$tp2=ZH(Ur{_qYT`*<sj{3+>Zv2-qff0>cbbg
zodn{iQESO+*u7}yYZdOXC0tF<lexj#K_OL&`vdL=M8z#1G0m@JUtE55(IgLFMEAHe
zsCf?ETuThSu7Mc)ei!dpvC=iG$98D|AI(@|nl4;xZMx<1%#Zjfy7B~d((QMB?FsXr
zj2hB!R#KBu-ih;qGnM1|E7<STSwg!p>|-7_vQzKl)JK2AK-*ePUXJmgU4OgqKz+$4
zDk>T&{H3WL?7wzrr^IzLp1UsuIcM4bEvifaT5F<dgVGq$-jp|A?L3YByLhFccG2xd
zwN7p(bWI?$rZ{BEGRF6|Fj)mlc_6KG=v{T{!xV`r7d+;%<~Kw4g~fix^5$z!4z`Ub
zze(&{rs~sd8)YjVXz}u#XSc(rQygka`h6r{pO?<8VR@V@UZ2>SLbOomsWDd<E9?-m
z*}XSHjVl1k0tCFUBJrYae?Y!KGuM;J!}hy{<aGQds_XS7NW>BU4D(HXSOU?*FABoR
zWq%9tqKJ;W_%(pFWh)h0Ab)r%S3Q~{9(h=dZGvq_IX}~@DF@J^>jyi0XN0tH><XFG
zNzGGo#XIM{GBS7BT#FZ1<t%$gJnEL(K?~gUS=)@Rc*0xB`$i|Q(ZY_5Vqh9D9$E-2
zO@A9JH?%U>U+mez)?6?_%(j!pn>gQjo2pTgvh!8@&j_#gKU}NhLbI?dIo~xk&b4Nq
z-xiU!!(r@%jnB(LEzfjSnp`9(%GPb9_sy1p&4X}_owJs@)JZXKhu7XrxL`!Un$5%(
zBdrHv298tnX!`H<faF-m2*}bsHper$tA?mFI8q~8uSiEWoby2HIn277N_os(Wv^Ci
zcSfDcQe0qEG@FCMHT;5y&OJtQT-3qz)f<!hR&S`*n=|yRyj6BcSzA&_WX|#M9AS&2
z*|}iU1S{+6Dd$&)mrWR;={9G)C*ck_gDwM#5WN8JZ#M8R|FZVEV??KanROlRguQ%)
ziJ*z6#_NW{MF%K~C)@(pN+5ui{ALn$JN%l%={}h8#}82=S;-0V`mA}5B8#-hmJEPj
zPr=KYV=FHgn={_C*9MRc?E{9HeztN4inW3pW%*v~YXt(<mC12zKfncTOL0dC7vry-
zjr5v<R`4e+3ZNc6UUH+?gQ_)A1rN!+Ya=IrNtSB2rbfa;!}ay`vNG+S3A3}fBfnaV
zdH9zZO?)T(lK<4JO7v$6@8;U?mhexh0J8X467H))D3F5C%Z7~omfp(D3BKZ!Or{R&
z`V2K`rmSn-!&Jy-klGZ+VzWN@_X>(9=&9huSA<A5AM{QJvSRkWb;EYO^x_f>7BUM~
zXJmzVYYd_@=f<6KTRVG_)8U(inMJ^h-~bd<`kdTdESN3yf%7k|9Q-RPml!$wB3Gne
z;h54hA|-N32CeBDc6tp!F?Jj(5Wo>%v6HP%JBsE~WB*eFnVOr9!@aI5`qIv~@uzx)
ze)dRNA#vYCf72NjWvha8UwgcCBW!~D(V6gjQ;J3|zh*_O{wPW>W~1%wzN)dIVC7k_
zDYw8!kmmA4D#zLJ)Ilk#@D^3u*+7dOHGV+&>dT9QoHx392qnSNy(+&mshz>i&t>%m
zH!D-{lE~`xzfBVf{$|c!J2GxMjkX1Iy{0RbZuvCcY}-JIpaT%WqK-7xOb^#V{^xCy
zw+V-6a^a`^-M2eBPn1n(9pCj{b@+{A?XBw$ck>ce|DJGiOieE>FA=`{UrA9Rv6@lA
zwsR1s`=yG<A6x#r%iis8`kIA}6GR(gc8SB~q)C1(?F?U#2@g$R_eeOXpP~8V3KCy2
z!QJKc)w@lFXp5qto}%NyAJ!oN=;O6J*1I&))qpFc)i_u0lk>Xi7@~builSW5MA8!C
z=023^^zFFW9^YVZZMroUT!c6^NHqBLVZeEXRnIjoy}x;meT-Y3^`T2ZKIq>0PCPVX
z`)yr<(+Is|`s~4M0e8*F@LpY&YO92Eg>DPURq^6Ezl(Vy&3Y7_n}KfYJDw$;tNNfZ
zF@SEOnxnU8cFPuq-FyS)k<ZD_vrtG*rT=$Z(y-=L0_So~&miNF-&?!H+vp9Qzgim`
zniI!8*1GgrzDw}X-VfzpqVXLysF_MJL$VnHEmr6YbTUAN-T`?4cmo@QA`O>?>3!jx
zbXh3jN?A$-xkH#qx{nOb&x;Dh$XK~g*2vMKghQbrxPAn7?YF3&(eI&(yGOm;-92vb
z6gt?Q!%&Kp$(-%b;22*&OJoCortR2$++2peC4KK(uC8NP?X*ORfd*M78ae0*Jc<eZ
zouyr*h6Uz6{z1Y|AK_v;{q<#i0V#N!VI(q&Kj|nmocWHXkUY)rIONWw><Vi?-W2Kx
z<0Q&%-IsfH+eRX@vxNNx-OViLb~i>g`oSzbauF{moZG1OT~$grhCumxWg`om5XHHA
zBB@`#B3HG=V@1Ahn`b=3r}TlFflwxXfY{J6!k4CWX@rMas}2u9q-&q~=Gh)!d~s51
zr>ttg?PvkZ*e}sR<DmKRZ^;g~$E_o+QD+izP=;CFx<8+=J%0-bpC#MQ+`&c{+OSz5
z7yuE30KNp3x%k*ArXvY7r`<VQQq$`Ii!VO5JemRq%@wi$nZ4@#gz1<GU)mQo89SSR
zo%uc@*)3Xfr-{e&#|08syZ`^XOycQsUi&mlk9gI;R1q0dMV&0Ev0H^a$#P*w-hI~m
zNIWyIX)4shY|aKH%QqVu){z*nMX3imu`u~#2WYk(#U+JljPn<c-&V6e5PJMorAnB_
zS;yKxrO)p%i5=cKmKb4eerDh~mFBSQCv51DTEjNb4J^Q;X<1c9`_~H4Uh%Wz@;J_&
zQ*z`|*-Wu1=CKv*#*JQ$<F_w4@<z;jwb5%JcXw`DKEK(>v@uCM-uKp@1_VR5CGmJM
zf-`-Yf`>W_3s%$`18>DUW54z9<*pG?FvTn$9In5LC4C?IiqYxc6JhM@LPSCJud{WD
z^;nu0pDix9#$NCc_E7{T;G+l*@>xn7g{?e=MKmslwRNYZPD6gv%R;I#G5qbeMNmR1
zF6D1*R?FHA*6<Y0w>6Cq0gpu%4@$ro*~G%sKSk#Dq>bSkne*BcP@y_~IE^uOwUru5
z9tklXHE>^1vKpz83kV&as84JkX9uN9>SvNm*z3LpD1w*Ugoni-HBBe^*QAlF&L@Mb
zA!V2;dl_>SGuxmF*&7x%DdcZwY!_$|A}g!5xtk`fch1-qsM{OE9k(K{9(6_JIGIvV
z1l`K@dSgao67Sc=Oj*GZ_p_FuzML>0<qY|j`r9N+qxFeE-!%MTO-{s56<bB_E-_Zo
zyGQb_rqxx?Vn#pLSRRJwgvF+&bWMq0kK3A>N$H5q^{^G&h_NJle-dW)E!fkErwLO5
z*ct?Zs%Adou4?xEb%MQABF&y0elG%pXemHSbRb&?>55xc7s2-H6;K^1Zf+;Z#W_bR
zS%)Hr22Qq}e-z7Kt2_INs>SBnyC`miFddf+U(3a%N6JfFO;B{{bZk*6o9CSC_Bz1C
zB{0^`eeR;+OY&*c?~7gn#5-{2l@Z{kb--w?Tc<fH(5ad&pOC*(ZumYotfr@1NSENc
z%Lu8Ed=Mn}W1CyZ63^7wG5)F@*14%P81n2bg`5^c!vz&7{voK*zD_8Ib0L>vI=8W{
z{nmUN=H@_*-bk37LTgLm^p){FcUj0nU7Ue(zme?IIG@jq)~l%+3{5Vo1+O<I{NzP}
zY3L+;Doz%ub+d8)OH^MvinA$C(EHRq6*Q>l6Fhs#gtdf;(3r}aZQ91y<T-^~KD~Ic
zT;C2}^m0`t>Dy!H2pL6_oAmI@RF(<uiR4mlbOY=+5UsOBZX9Yb5H!3iu3|_3s0`16
zJypoqb_<&I;+D9o$Z92ST1lW|av<yD<<h~VJnLy#bGC>G27aQ_yGPN*i3jze!k)g(
z)XK%Qu?gekN;43?%+$X9gRg3_Q`aImw&<l@I{JOv+Y7<`%E>u5#Cj_v1DNmzCQ}go
zkiSOS*mlJ%I=}NL8Q#F`wV@^1#DmfClmu-R6~b}tgZan%1;`f;Ys!0znAk@(i&`pt
zXnUP0px>P~5>65imPj;c&YORNx;1cr3sB}{z39^(eudX6K-F9m9d%L0mff1SB|Yr6
zrDF9COTxC_nF4rC##Kqo1@)wpE#ngN9KQ3|8fozf3f$Tq#6nMQsg%)tf2mfePyy1O
zb;Po~-mBpt5gK+me7cc!u!Hf@8QK!r^2!<gqF=B?YY+z^{aZ@Ip+4I=B%*xiU|WBr
zMsGvfXKI*gIQiB_jiJ-IyqYHFftTBQ#`0aB=OQGhnI9tqpK~zzw+{Dz-hU@!S-oSD
zZ!!5f;WURGYP`s(uVF1+?x>^g7`M?MX>sRv7@in#rDF{_MSD*OnXiWe$lb^V+2FRy
z{CoX^+-;~jJBR;0To`Kd96Jpv)AiRXM+#PjK)3ptV77eZ2;k=4XKg!P0tp_@+e4{r
zkRqeCR*F3=+KtWoWfb>`EsBc!ch_`4Kj8X!l?cE*iS`t;j=b|ANS3gM0{Ab@wkDsV
zZE|&4h)QOO^wePymP=kI^dC62l|K^BS~o56_Iy-@oBZ@D5dLu(rOs|zbYsPh!T)!x
z$V!gH>i|ZkH#uxbqfK6JHVzN%IqN|a<h(V?mN-?ZPB~rVhB@`BF^U&-s`?x~hN{jD
zleSd_*vE+%H|B>RjYy;)imEqrYx$?DrRXdG7XM~Qo|b!zMFcGnX2*M~C}BU369e35
zw(jOwD&~Y8FY6WfgOrn!UKztf+8xdEhd0XGI1g`fj&Z$knXO?iML8-75+C$bjp2w+
zX<Z}O`XoKs(eCfCC$}Wu+ze$jIFp)U$uFvb_>7kBJJz(=;O9-R_z5>rBdFwf=LbI|
ze%YW=YZvVyVn&Va_3CF!0{Co=O4q70q%7jmgR+w9eh_Y?;ashzrlE;?T2%p1LH<<!
z=I@pk8C%Z621v;^({vCl(IIL>@Ouhw3-8(r^VoX4Ru7Av4@#v4Jk1{|QL!e`$ftSv
zGI8LN)D3oPrDjAonJmT7=N&BSZ!BrCe5!3chFTiavbGT4mV1yxr1F`P?TVckTjODS
zt<}o}rNpK;is~M9VZyekk!zn~70Q?z`Ek;9fRvDKAIE}(<^!!K`*&o(o6HZL)AJVV
z1Lw<yMZdRhmXag@)E)OpZ0YCUb^eFm_i|BHKb&r^HmSWVz|{N~v79AFolP`+DvGp`
zEIH@TAEtb429c%Ed9snG3QVFl7ZmumVNkP>6sII+IwrB?ZcEM@Xc+UE!yVc-YxG!S
zK$J|DbuVkCA?CjB-1Hw!d(A>29*Kf*OJ=td$H%ASR6=tRBFdFY{gi4zC>{w|yipdL
zQrO--6Ih5!5MZe=PFjJ35Xcejl!}!gxH^C-K8Tiwb;vpjw%>5(kpsoA9~zcc9}%WZ
zul96=hacUh>fW^xg|_@U2G{ur8EY=HF;L`|_~UwhKsz<8E@GfvIE!w=6Q`Fk8)=E@
z57vj2q?<>3xmOQhRNvbt?g}{mO?9iVe9u32KP9@~{^@RR;>!a;s?U7YR4u>25GOG+
zKWhTQXAyt%a6zc=!nKylVd-MMv(c&LLBG3ZAY+KX7ZR45j;Nh)Sy&U7Jp_BOE|b3}
z`Xzarf*khZs=RyZKt17(C|Dn#u1;e=&c!+9{&6uQ5E^8<34vDie<2YHF^jc+1An3#
zQ7JUI<WQJ?9k=SB*_t)6>6?I6VdHVaYx-0ZK+%3_EV+`3f(<Z~M%6g!{}x-QLF8zE
z|BG|3=U|sV&pwcg36Px~&qgG|jcX&1xZE0woy9dXn%xklp}wSluq_qqjuu(bhx=uU
zm)V_7CYyIYM_sDUa>!$K1U$G`u?7H{+q`A3d-WTjJJC76uXzM1p?X-g9@f8}clz~#
z_19+&_U4HDuWIKVyPx%5)?6GM+Tho+!73;IEZd$^ht+8F@tQ)+qpH1|lX|V^3rt~=
z5n6cQEVMf2Y+N2(Zj5FqjH8E142RLp-<W3<a{wIbAiA={0hYuGuH9dPE}fr1*J7>H
zuLO}>L*#r~9x_{Lr5u8L6+CN}AY~%)uTI~MWq}5Om*0Cf_Cg(!#|D>joF0rBcM0&l
zL@CX7u^tO<rXqwJ)Z7}@-3#EIrN?th)=c%!E}@V39$!e{9xCNj<aQ3eT+Z%?`!mKp
z7TuXf93~kF6Fsb`S~%x=cB0_&&~%Jr-K_!2BBF>}5$xn0^~wr%?e6no_yTkBPiOfd
zlm$vgtJT_Wm}PH}?$zqrC(w<ny0U$@NUMPIr#xm;o<DdY)m!(>Eytvx-Iorib`0I`
zwF7Ky)QeBNQdw_@7kK-d|L!_}vxm9XITQ*B0F&|(l=!oxvT7_CeO+FqQ)g)5l9N?X
zH(>F_U_1k#QydkXJd8?{3o9?9#$zi-?nR}8Cgqb)i=uZF`?91l?Se1jVe0?Au<5^=
zV#DF6BI?1!JOIZZx}1A7^)2tTffA~UK)2PFUTV9r(qOpZ83<PzF7jg0#_h!;lBeXs
zmcr;rg64TrQ`~fp9`l?n-S&a5_tGDYC9aWa12*Q@#`TZOg=$`qy>R!5d>iMg<3C>0
z#U^j|^fzz*p=jvnm{Thm<Q4ntm}f$oD4{Ot%KM3kbICbgI0YP)0^_SOxe~SbPYxfk
zhs1RIE&SyPtrehJc{_b!wNm3S>#(#N1~>K>7cU6{0uq%T*p)~Q9JpM%xX0wDw-Us{
zx72%ZYO8yX*<5wu*BTso3&ZibU8E+8*&K>6ZAZqWA)=m}&Q~(u{6n1~3vDG`>pM{D
z;Vt`6_>*DukmUT5q*`lx3#gX&6hTKTP<z-JVGQx!YaYk%goZ_o#T&AlOQ;U2T)j5-
zv_#Ey6WNsJV5+?Dy9fTbReRzbp?cg2G)oW?kXEeu$dIYyHN!RK3%?<9O@_IXo*c@R
zCHKj9gArcdt|HRI*x9i>f(JVLR_2wtglXJS7bZ{LF+9EAcSB80+PK)^s#t_5oSyu?
z9M*fjSyc7KxpZ|;MJ%3H_QCHib^Jca0)-X*4?gr&NFR%lDr%|zf+F5S^9nK+Jbe1%
z4kb(DJNaSjMa*X9?KUsBXG89t(+}(`__xGA+mXJ8I<?qx);Oie=Fs@EY8FB&5U@y0
z5$3UUU`~MUkUaa<`guF!=a6M7^{uzr0Tyw9rU8#Vw>uFaG0q3sCrn!&@%|$s*al5G
zEHSl?(JcWz2Sj&MU&#)Z9rE#fotT*i;?VHhNoiq!w3wAJT>@@0zK}zfn#)~NH$n(r
zzkRL`P`vm>c}%A6;*Wbt2vIk|JyhUF$*N(wwC>5qq#1SAquM#!tx~@Gib>58CAM`M
zAu@8sTF3FG8GG2caML9hvVH-gb@Fp!cNHaTOT6^xkR3{!bS!V&pGIbiOVEG{l-(Yw
zk9bwF(!!e+Q4x=4Yvfb(QXR+=<#pK^5pt}>R)MzVw$S!@u~(OJ5z~mMT&16|wi&mi
zWBf8AnnM#bRM@j9%0!(+8laA@s-S}9u&)hBa$ubR-=;%K+h9fpq1t+zXW9gVjdxIo
z`ZvFLG&&>va5*ZQ*}5~^@@o-17c9=CS5a6CH4r&gyVvwb2tmMqzV~Cl9S%V<gXs8u
zD5NZMDEu{5i-7KnT$JL{!sUAS%@<*xg*DY}>(~d#SO1)g3?omv<r|#I5kz0@J#QQI
zB6+zSDDl>O{WzmV+mh4`kPJ~0?Tb^)T^TSPOAY@q-Qs0uI`2>ygQv{0JY<q9y-EgM
z#ii&v@cgf2uQBZO{rmhELlQ1kPKtoiO`v_Gfc;vK)S%WiNRZa7)^wXWS&VA4T)l6|
zD4G9Mpd}7Qw3QgA{ZO%t_bP}M4G$HyEApr-j23T!m4u_)&MV4(;f?jNtmjc#`0<q7
z17iUc?A&W=U&#XxYQjeA(V_P{F)MHn!oRy-Rn}?yguSEri8hNT%QI-bk5a!&IDd?3
z_6rvq_5mV4AXNY&NGX5!US|6iCrd^)%C$7=L)EdZ&dZIh5CPtTdGpciv~ydI|92EK
zrua+Y?C^YFVS|02d?>1br?pmYTL-rCfU@N_kJbrG5V%pkfZ-*YaIg7tS+96}w?m#a
z_NXcqfZ(<Y>I8V@;QtSH`BVPiUDw`}y!#}q`49H;bfmP~(~L`oPoK-Ng+C;ZV*1y(
z8!Y!Tk1W|l(^mLtIr58$L>AMRo)OOGmmxPVWzJEFr2Ig?*Aq5;TvsLq;|P6$4J%HY
zLWZzfol*8eyHPSsZ8mMVedG!q`%M?|5&DRIvyq5x>1JY&B=)TC?k-up$yVDAwNr&T
zv8;+JRj-`0D#$=7?nvq6K*R@%M<aD@oZh865F<dZ))azVAY4opU^XvVtKzk3Xbt5C
z+%!(FZm1~1lh!-7u8yh}xD33dYe>8@eY|jZ+|cq5FXC7;Mi?}+lQ>df)=RKV%f4wE
zPr7P)w6`MCcCB8E=ISyI%6_1|hToT?svN|i*MU@B<#SLKpO=@Pcb+iROq~=mv5CZQ
z4NWbvnO}R2u%V8+UQq=U0dhFz;6pwsH>}9*CiP-v!5?T)U~t3(a{VFyw!nVYq3hh`
z76+xOq_sNoZlpZi0*U3jQ6NWYCdBD%?%8+QFbgPjOz>zmW3!5P!hfj@KCYFagF0J(
znM{;&O$?qb^P^l%#Nzma<2ExM@c*D}BAcMG><JwLg&J=mIDzwZhRSP!$!jvsckpbe
z<bq72y5g1?3_H$_Q%S^@mADo>5IgxJsy=|Fu8?frU+$}ZTJ|10@Sg~XP%@cgf~az1
zM=`w;Eg{ukcxP)L;)mnY`@dDuvQM55b*?HiI*$8fvGOJAh4xSk1T9sav-DH!42tg1
z*EdsrWC#Qev7b%94sh58*BcE*#o6ksB9PYI{%f2oF*ppHqg5VA4uSaydvK6j7ws1(
z!Ve;&xP41&Ab~Q(X;d&-8>V512$<#OoK*7S!F0!ZD&R+1Ob<A%d5-2Qk+DO{aO5$I
ziTaDrl6Ug!ul}a;6s31IXq?!0R&~S!E{PZ@K@eh(!`f^rKjDRpvMzZ|@azm!%j0sZ
zV%A|9!yzk?`!>^5dOZ|+T!B+`dvD+7AICIZukA}XnGp<oWY~F(yA6AHs3;gMi~9-t
zzVZn#_`y0vn*)qG6eXRsr%LGSEM}Kp@p3^pN?G;YwNqAW!*5_H)=ONP9e~V7OBxl8
zFJFQao<*ns4+6OD+dn_B1AjpGp^i6}1-{uc{oL{0@ZDEZoo2spt9?>a-TUQFnUI=I
zh+AkusZ{x9q593h8-hbG9V>`8;?+$ZZ3k>5oPYy;!&o}_!pHfWpXb4?@(+oos$s(e
z;3SJ8_`6PTSKhl~={D^*_#Q>>oyEi0Pa5eSz>;C4y-tIlJ{GeCk#NxQk~8slBs?uM
zYWmG-A&>N;|9}Z21cvBZy_zJIZp~in#Z~4%!4fz3Qn3_J+k_kmy|^4x{71`hD?Uo$
zvdziZ%7y0F>0rzV6`-o*wYCpU)(F+1Rb0985r<G=cduo`yIAM?<q#88(L_vj^5tRr
zM=3d^dI&>iX51Im(?%ctpeb|$Lh$`O!L?@}%i)>MfQ5kNoHKGml?^6-KR2Yp&{S>~
zS`4(5pKecd=he2{|ASPoX$A7nDZu(h*r$(E$4Xs{I^``6Wa8~E6vgSCMY(bFZqU=#
zMsG=5hZ+}m!4y8DIa--yb(2Zm3@>vuPb0VwmSpU*bk1+GIOzd#2<Ze{-A*qYasCd!
zGG*hOY!V=k3O;In{&jhcAUhoPTi$e1PD8eCVGwSRw7cPt&ig$DEo&xT1eK@L@hB@0
z*g_74lw0)U3sqRmbtliwi#~}lFAd0wfp~fKFKZ2mUUy#7at>0}4?;QI!%jvo?d!j2
zCCduba9YjKC{23cCvpt*8YDeN1SrvxrI)uS=l+M1H%G2xWqTdZlxyTAr>n=#Y$NXJ
z9-G(<h}lOzS@EILAMsvCSr3vEp}R|GB_RFQ(>Ysu*iBh(5#zq8AuR7y0@qz3?dG_Z
zNE3Im4ixYV6sFvO_GG<l{CC&gm#%gNAKV)5W;~Mfy_WbRb`)_;p<i&C{K&B*r0IyW
z0Ve}{)K~?lt<r-V3@pvV+ke(h9{zssW;V4IwlS5fK_4(k72=K@z$~6W-TU-X3Kwr5
zS&4BQjW}Z(d9+CHKDPgO(b&7DthN`e0l8O9o9uJ<9TqICT@KRwczZ3(Tx*9qh2~;6
zE3R5iJ-cd#ZVI~=D<_%7fHipVoZB!iH@s)cjv}L!Ts!OM(sf0QCgh!5y25CnV=1HT
zg~yofo%?*j&D9AD=DmarE<MKi-PYre{QPrukUXX4WNa|lBCaD>{<}*J<WnBZJy?MX
zdb_5nB<yC-l|&9ErxMz|l{{RzPMt=+inC?g*z;HaWGk~<?R&!0yti_mNQrd4ySMo~
z+g@vLz>sHtX{wBj>ptf#Zq6}~jne8Ti*xQIK#$Eq1Ob1Jzs&Xz?ZJfg7U-{6B&3W_
zjs$-UZVK0N7Zog1OJghdv3X!n&)xD*Hy@J>4*Y;<IoPm#r@ssA&7>OC1$PtAtj)1c
z7Si0)+q>cZV8*En-1hl2X&fz9*Mqdtk8C5o5Btfxb);L5$R1W-hNWfaBK``VS8W)u
zxz-Q@JCJX{7ggtGzA5{sxmaI?d|-{^QJ^ote-$ZBmCy&YYBI#T;WJ*_TY%_~#j1T=
z@q5B_L6g1E9(sDr`JfYFipwc;D>aa&VQ*p*%{Koo$7R}SN)2a%f~YIJQhUG;nJhVc
zVylhT-i(<YGu|lBAl9u8jSQGSIDLY#Y3!+<luK|%wb$E{yZdK2aQ!y9p-{MhO0}vE
zDi-z(@;6RDDl$1SaL0D_`s%;Cn2x=npAK~O3Gdw|$x=+ei)AHa&|#Z`X*zcGgX`*i
zW>%Iw%E6zGSvOj>Qcji1F)aXlNA*n-H@P;FUR;FhA~G@<D+7M9CC&vsiSSSfJr}9p
zJ6P}C@-AdN^S9450ja6dz8}ReUQ5$g$E^AYiBcaz^=7j)mO~i~43eT*qKy&)q7FYD
z@g{9Kt1p88p8bFiQ;6$)o9K0RT%ntii!xKL_X)0xuE{jthAH2YI0ZC^Uzzg^r>ZOR
zk&x-8T!~}|^W`u0C(w+>Z!lXpWAekOjnBemRPGBJFzG#DK@-8%7Oh{)%)Y2_fSad_
zGr+v$Es+cwx4kNeJOjYh!rEe3rr|}~HLC|iD9)j&*Mf5|#K(5hkG8I|A2zewTld*x
zT=6n;@n^eKNF(k{Tnll68O4y>Vty1lqn@w@i%A7Jli$VXReVW46U2|Bd;AF_b4<!C
za{>OfjN_5e;lz(NKE(a*-oOZP#dHO(TnsMdd`TXLCzBRP)r&cyxTjC;t0c?m$}?<g
zxDa~%>wktk5wtV$X?^(sccy;!V=0p93ZHO?Q_Pz6lH1n2)0UQ8nxEKL;~)H_Oost~
zZNSe2tMyVq=Vi@oU-|wOdQd=#u2B<;?;*)y{jFPq8k4+jff00@7c6J_!X53mO?Jwu
zN!B%LHK7;up|ih3{ZzQazhE}i-wkiX9%8<S?R?3cHfsEFq-%(FrunhQy8vVRnb{+)
zAg;D<Nnc-HH0lWvyv`%;$^<vJW)OSjXZWSb@pI&(t=&2g)i|CarvU7!u(~oPFlzb2
zW+_TqN`1I}ygnbRb5j{T^`R^QB07N=<RKTWFCG_BRanP!;^tm6s>qt%l$gHOScIs#
z>L^XEzInVM8j3qSsnb+&$Ks{tP+G>Rbkw@NX;Kge_g5G8VBzxkpdKBc@W4l*X7q@r
zo6I&j(o1hKvhiuJ@H*U6C#`yPq<h<WVsLg%O~)I#euC}a7?-bQgv1^liT#E$K<fyT
z%_nCe8ZAxI4^ndn8}T#)p5|2{@?gOv2=)oDxwYl;JYRZPKZd|3x}6f9c<5HrEE^i}
zZ6Neu7@DkZCHI+fm;GTA52+A?<y@_Lcf1<M*T1$;4eYM^*;jVt^6SRTMJE?+%`mwI
z4gk>Q=VH&fO_#ZLmt-%D#4U7^BIn83$Iz2ZNv9IiR@^=IbEpQY&$2cljvtV^;v7Ex
zZ2bHCsGt!R=^hIh{d9vnuwl<Xe<9}aLB!a+(q5s7Ef{)pLilJ3yb(PW^-$RaQT?#>
z(I0o~(`DD8CO*Jjsgm&hMo9jLtGyHq2*GlDk1GF^eFqzQbW)klTE9Fzxjgw?oEUXN
zYg#_L+H@dIIy{J3uj{w`TYsCY<1D(>t+0KZ;SBe;hl1oNj9SxVdxem7OS>4ZnCm@c
zmmFwH_3+F-_0W3Nq(2**nBn+HKGOb}FK?O&t<kzfD=awwT;XzWNbGfWp;wN-WRbRB
zV?wVFuAEqsl_>~_AB)M>*TMxUnU=s5F(uDXjR~M>MG&qN@+~~*If$ne2&rL3N{ATZ
z6(Ex~6O~P@@ux-%j4|h9t+g^FuJm)}``1eRk>D~cE?})K>9pQRX^uV&mgt{j**b$9
zo1BbmY;_P&dlS1l4w+_&oP7U2Z8~0M>!4NdVIGky8{W<4z}}m(Dx;n&2GoU0G$<9>
zPEU2@t{7$Yeyl6GrcPcFFXrE8M^^rJb-4OjzEg_e&nBT=S`et1AHcu}OSTq#x*puU
z1u3R4xO+XBW6m<cwiBIkP0)s>xDb7#LfE=GW32(xtq$_V7P&pCTe$SMtDRlrB}C>S
z_JlsIC4V#b7l+si#V=vWaGn}$w)QP+G0XmPV2Ywr(5#^3tdGyRh`w4GTB^2?=K97N
zJ}p*lpgbk{S;^^nWn;&yZ=nbkt%pw5MDVfkBbe|fGf7)TzLhY=RUrt4sj7+FiT{EQ
zgiG8sXR6DrS7wXOcjc;`JHnM{5^0WB^)AR`jgNBy5gUpCt6Hgvt*4^TGQn^W(cAf#
z|E;}WAkkNjTxDkf^VvTFHKRPEK3guA&2qE(;*K7U_qaaJ5<~)<*WIe*hhQMfToV;&
zz4&)mcfqug!5N#7caTZ_$uU=Z*N^D3$x2>2M1!myH8fk!%GE2eRaHH;`$@F@SmjI$
zQm;5ki&Yu6KW~xUPA|Kcjtw|_Zqjo`NQasnV<k-x@tyt@X~)0<JywN_zI<{Bq>ROk
z#G?RFF%Fn~&5tUen>cUptgSNP9ydz&@1X+Qh6s`dgWXJ&74>-WKQ)Q}C#P|pEv(b(
zg?DgP&w>znLZ!&B-)%5`U28%yy=ly{Z*yQGc6_dE+PSJw&%ROZDBdRc$v9nO-ZyEc
zToX02ydYkzpt$hbub;|_rG?FfSUD!*{W_pQ4Oh4ER=A)&bLHOBcfa$7FOA&NGnoAG
z-m#((Y|SiQDCyj#p{yF<|G&nPlH+&FuREa~reAIRT3;61h2ONalNh$TnRy#<4Ii6J
z-}}2VE1>l}xO@qTH74vyu7u<5HRWe_Y^!`Guv^@nd*Jh?XAd_VMDcwx5kKhJiTI5v
zJ-JA)odQdH$7(<y2~&A4lwf)=CWkxDloH+WPH}##WmdK7jtR@1`A>53i-=Oyi8Wi+
z6lR)F5C;}z4q}g5^pin&TXf!;AWe-qSJIcm5@XN$I97jF$+N_g<@~;x6J_zt4rfm!
zXM)=4#OWFjBq}G(di1)vvE#qf`KEa@pF!ktNUxfLK18S%LlfCL()4<bTcvGv#GGHF
zbA{n6<7b;ApHspZtm43CggQ2?_WR0{{gq;TpLmip>D(IPjVK*&EF<*PLRDSWg2Z-r
z+xhA@i{mZFX-W^w-G;AfqoTw7f~s~OM}%4)yH-3oXJsBKD^kus3wF@{-6eXWZhCul
zF7a-Ni`GCmcIXUb>9?x|-r7tAl6GZ7s2<JRMkzVR2Tba(#`SIcP$B0rF!Y7c>cYd%
znkN`|bTl8?NDr(2F^aYBCY{w}=)}pS{>cc1a0~)7w!BfpOUVYINyB4nRY+3fv#S<$
zmyMW)9N_4S!X|7q1{V1Ajb*njm8zQt9Mpt)DUD>yOHK|cC2}{hbNO_<Y_ruP{z>3C
z9ow!vyq|4(m0Y)-NK*<TwBAW;_yh)keD8<D>n5=$%Ivhu0+e3M3@Mm-mjYc|9B>tj
zmgP$WN$-hK)}mUpO?={}3VJ#<)OU+%FAI~Y#nKE;)N2G-qsNtlo!dVQKCsLk!**rz
zc+fPvH0fgq5gzoUML$vUAI(z>DL-1g=hd+T5xV<yL_<f^6!X;W>I%0@%z?y5>IfN<
zyAjcQ#WLrmB`HfybzQbw#~d<>chb_$wNcD;-ljGaJ((U2EwRspa3KMbj&kp34nZ<^
za>nfKvk?vTUBB9`wb9*r!9v8Nj~EtD!ta*W>oWWrpB|?BoM5Z`CT03$A?OVTsJhjL
z{|qjHtAGaE3)|l(GIU;kbrO%TETH8I?dh56#oqp<5U{$Ctw3c}S~{m<X$MD)1EFeQ
z{aG(gb$H7jlUSHj?8j3gz*AgiZ9fakOA<@qH?5}(wd3dW_m9hrvw?K5p;#ive#&Vv
zyO&1cG$vyoJbb;(H>t#mp$d?IaK0aS5uArwY@4pDxxP~rqo?fjgLt)i-G(w0l>cc>
zQPW={5PB{~r$!|!!J_yIj+XC62zPDrION&*h_*FM?6r-m;;qmU@odX5Tmk_7fwdA_
zw%KC&?8^ybaligr5!k0a&A!ZWssVuW$zk(-i~TX|l}kV*8vgixNAb(cHXwFC$66Qo
zX+t=MCVpA_WP5GddgJkyt{|ODD(d};@>9U<kFZzN>m|}hRxIO>NFqEi=&aC%?bJD^
zidrmUV7dQ%<Fp6<=9;!LV;j$aJZkxa*MuTtnM?ofN;bZFX6l@6zn`B-jZ)o@-IDgI
zzt_UZ@{MQ`ZUnMCJ0vGo3QcKu%CO(A0Zo13<41{%X}IlBu4He4I0rvguf=hT&Hf&J
zGT>DW5^^}=fn+w}E)z>RqEj%2Ii55tJe^1tbZzQ-_9o1(NMI4fP|qVPxyU+k<$Bb@
z19A^*)|BOicJ%xk)uMYelIlGGQ`}yv(;)5!3t&3ErVtBK6Um<r^?pR}60f}pk>Ko$
zs!OHoJ^giUT?Sf*H8${CxFfJD{H~*=(tpmYrw?vMx56e}{QzG+tG6K3dRHa1wVQJu
z3aZgk3`tf}tK2YGkVfj?Gz}oHon)aH7TYk&DQTVDt0%37n?`N$9}b{|cC%m&U)xn6
zH=%E;GyyVw7jSOmq0HkDb?_Gf3p;W3wn(CaQpQ%B^+%>g)rI!{V8gy?8^6fuY)ur9
z6#P~&(hB08-XOldb`YpaBM%l?{g9QJf0oumSiih+=cdk=8cvW*?-ATRv_@`<aphdG
z(GiRl>qXvag=Yh|R(seShAsCsBMZg_k@w*}%q2pq9R(RtSirOBW>)6?yXz^Jr*}4R
zZ6tiM9FZQko&5cIII-bO%0XOGXl^M(NVjw%`KPNmGnKGMfeUzELnmO0oN#`$SFTRH
z6VEftUmd)V_qz)-d}69n>)Q2&MgLVh=tcfXAGELx2P$)zO%>mCH>>b>)^CCa7r5`9
zeYs&lP$pD|qC7<AjWWr4GlB}zNqo24i&dx=SL4@x8fEc7ZW{zRBfB*qi-fsuJ#g#a
zUH);{2-<+S)<d`RiMCO*h@djby;5%bGJYBsZjl1XtbDz~Kxdz-fAWKg41WH|Jbm)}
zkMT)3*W(q(YNa3PF`*uap3t8p$oCov4V{zvBBhJat?sE$iA@dWnb9E@X=KZFXWu>6
zUWXms7QZIOrm-W^ez(;}k@~fIyl~hjiJ$6B=PSrUy04W=(@FtT(>LBC-G@1&{QmLY
z#0uY&sKLh7O1hj$5`f`h7Oicy2jGPhy}@&qO<~KQ|3Yd?);ZzTOTjv;ob8z5PwYD$
z3JnKmi!Q24Q?65DgW1wO0BV1>o+6=Gl$o)_^@_3H(dDP=8FiNudMcV*)t$*HBU32_
zGM|H-Irs7Ef35U;24av;2nUVWzn!%~N!PhoX*9*Kzim{{+lT61?fF!ErhBX;vV=Lm
zgA$I9F}2}!4bd5<(ZqYmX6d5E9mmRZ2P4US2~kc1h|@~@wYYaOdbV@JSE1?@<KWxP
zLfgLnOIW7x6+!hcL??^3Q#(ih<oGf$tqeQcIc+&G*lSupt_y|Qv6#9saG<!DYrg(k
z#z%~6(#N_O_0Lu>GI+;qQRJD_aQP-d`Tmi7*7A=gbEudZwbAe9KwH$o?O<<Vy-IW0
zJM*5yN5h)G&JZWRifBq|SVL;*%|TZ<#R!<LW2u}d*hRT8f>g~|hC|#P^b{L<+Th|$
zA_Lq$f@qAF>Xy5c6K(E`FJJF%>hsETnKPTs!zoGlmh#mJGZii!`{b}S<(sLD{|@Hq
z17!JRY|a{zYQ#M%zg8u`6glgazV<y_Kpy#HwaW031+|@Km#kBLHPrCkOdx+LsZm!P
zIx|!=wHEWLD9z&##;qx`$L%p$)R2~qc~y;V=Vve_e5X*?tQj;9wmgllYaXymOqx|L
z@jF*E`r}1)KhDGrgB`7YBqcX0-oPu4W}0oOHNh20kG{@Adcj5Q+w55Ast9~;T??s2
zZhM8PWbux{Nl(@(?gi;VtoNAK3TQh2bD)X}H0jiV&z+p<;0Tu84TpJx$6>zl+gOU}
z>W<fP(lrqv^G`kI&wrpix>BuhmrWKoKb0Od$^NCk?Z!5hUG6jZM)C{zDf9j~SGZ&T
z*_Q{HsW+b&@hmH|a^RLS^ZG;Yq9d}up(+5~pZbhCNq`$GxUuA7m+2*^lkXMiXRJHU
z+~v=Y{`XBn{fqanomV}9uZ`=2cU)bx$3~-ku@nyvZuV{_52vr|EcsaH_1}A1Qcj+-
zKNtK2+z=_mA%#PLWZ11QJUW0`bePd%D&^9!?*r&xvEFV*qAxb$RDaV)DfYs9!3DhA
zkzP5?H&*^DmAdHp|5*C+xFpl}>t>p%sitYlt<lV>)KXKYaw$!mN^?ue6~%>VQ4>VU
z4R>ay#njZ))Rfe67X)%a5>zI0Dc4-k1c9{FT!37WSbFcizxOXopAX8zbKm!M&ULPH
zYP+X;!A@vuUv%T3Ero4L>6g!Py)SRWa^wr^%>6M}_phyG|G;K;2EdQ3gc%^i>1V&B
z`S0d$gC~}CWWgJG@YkeO(|E(GyKBAZ2cK47GkKI>np$$8qlThs>D#6Su^b{6d<lh>
z92Kcydws^}EOl2rHAS0)!PNg?|3R@Z>dhC|tjgY8+SdFe?JQ#&JeVDC-rGcHk#gHS
z)=Xz#D&p2f_iq`qk5_@{t&98%0q1U}?|xN=+Z}Z|ZokLmC)sb+xS-8!o)<0`k51eX
zwy0l5>8qu#{>TtS22!3T?5J+4nc~DEM8>_Y{!vEwPm$BamP?e@BmsOt?~W|DFVsel
zT`u?q-;85isxc1y$7C%;A!HMfVjYIb0K%Q6o$Tzumq!bz`DJ|4Y)Or|{1mc|Lg$B2
zlyL@OlhpM0<*T(+4=K~Yh<(WAO+($l`~gxjKOgO_dm;J(<Lj39CcP#ec~feezUYvU
zxiG>bkD-Ho{<&{J2cnVPt9*Hq(nDkf{xumUF^2`tb?fAifyY4GLc_R5j2Wa$+Pgvx
zOpY(Ja7Jd=wNAY;U+|Ka%zBbDE)%Dna9`fDUT=o`vs)be(cQ8Kc_c9N$)?scPmK<T
zuNx2ikvlNCXDykWk%TG&g=xV0ue!Ep+`~Q1j}Ou|iME}#b)I6+iIel=kCg1aN05g{
zUm*Xgx$E;!zzig^`Uux646=Sfi%)(WdR?reyl~Ft=?@jku7B=;mMbq^{@!gmRsZi3
zmu|U@V*Y&7_~mWC>+|32h<H^(aaY7-l-c7X1bs~)fIozko-JnzM;cuJ(=HIIOhx%K
z4RCRFl+O)SyJR-uW{7UZy3fEI;h{z4y26kZWc(qBY?f&A(}%?DR-d=z4^6CLpCo~M
z+H5Yn-~iA_yjYD+WYgUng%@?zs&qcaA!ORoT7qxGxXB%PT5BA|CItd9W|x>!y+_tL
zt<K!gwecK4$OPm!m0bJK`oOXXn9o09cALwWoj?u><OyVzDPQ)>XRoJAt?P8lr9st@
zjZ9PP+7t2nHA9vI@~qQ=Jn{A=h{5pJEpuSjhp*BrZxd~<IhAbgylkv%9d8G;JZ;Cm
z^zON~m55NDfBelDGr`r5#?b|OQ>!`ovMqFMf4uUof8iBL*h!rT{=D@n2lN7oW8XWA
zTE$+vy%9M3D0Or@u95mI%oCUKf|HNGMgUrZzeoP6XX1qnitLw$qC8>e!iHVdOYHZy
zG8Jvu^X(Gi-+;_mluNr2V$^x#J=a8&ljgEtnvbSbX*GsEUrqdF!1>~7L}KHh25#hN
zX8^>ErQIMsg?uoCi+ZRv_5!+egB1-r@#2X}9FV!vKr*$c+WS+$C!A++4G{k9yIv2r
zEV-Eml|xI|C$J`6LnfKmkNTTmFxkmyBCd|T2r)VKQSk)~(sVV1wV0aoQbU;UJ*fv0
zlqOTAH0++@kUoA@!pe&np|~pT{^DSZRUkIF#=J-zEhG6q!q8h!kIljCN-PpGx}F!C
zDl7_)W=hxdcH8fUohi|))X9{tEg#46YhOaQW!(H|D$qtyZGom#1#_0@S5YEMwEZ@J
zQER$8<x(zO_~8vL7Vt?rt}NFQ=NFy|0ZOGN*K1V6&J-O8q1-Y6pGj<CL2T7vCH)jA
z)qRluN8EjP;9~HgRB>C3D_0xRzKlVWnrSd7v;SjEjccSYhNnG-QAdMtlfs04SKk}_
zkdc6yN;d!1yeEaW%fJv=y3}l>r5D4VC=lWsO@%u>)f&T)UsMer45Fg;VFDEkEc1)d
z+#D2W1WR@Q<<3O1hrKR>-smCFg^RlJK%|>ib0P0RQ1_?lm;fI|RQfgKZKq<Wz#AVg
z>tBUA{0?es<6h7^UMw62bJ@tw%S9tW)I&>iE_#LP@{Y84Wk(?a4Dmr(QL&_^bK84$
zSwTn&8TZ=LnhW>GxD*r_l{)uQv4-mLG<~<4xF@ZzL#e%wa#gXbM=-6hu=j|jHa?wi
z3atoW`yaObSlUN~wq8{89S8OhL2L2~)5^Y$lQoWNVoG>&mfJ-^=qJFKz)Ciw6R1kL
z6I4W0!b+}1+z9vJK>Z}oj(5LT=CP1Ed6jF;twAl!o4v=MjWuv6zm78B2lo}F2B+uG
zO8hcV#m`4YLPLH(vn7j$Q?6`EaQ(XFcc1`{ZYG^xqH@J;$kk=|r7y<`J0pEjHCKhg
zkNyHsGI5!!qhkp6QNHn)OZ+9p8h}LbVrMafIYGFPoY(Ab1#{f>RK7E|Vp%8q?8wQ+
z#b&r0jufBm`x3w|a60nK0jOKn+R=$Ne{g)??1wjLeUfs{6IgS?Gp?uDNR-QL^{kni
zHS^qOmz{7q)nq*Ix{d#HTd}*Q9W{3NM@*}jIGl70)RA6ZAjJI^PJh+v>y}r(Wjk@-
z-Lxk)geOorH{vGQkis;zo_c2*X847PWwcj5+g##`Qx09~Unkbzc=2hFm|%ViI`zq4
z5wx;6mw8|_iQUt#dsiuR1hBrX;+L1|Hz7m$n`M;WHdArazJOr%x30k4Ngp}8be&}Q
z%hvNP|FUBvIi%uCC0KU3R3n6){D}WqRq?r2WMoYPdZ{SiD0E2v@`9JEZvdEcSqN0*
zGSXQO4nbgjp`XHtPaSLL6?Kc(+VdX1DR+D$&I=-2i3}S7FFUp>-ghdDv*@#o6oj;*
zqkNvG<D*%Qv*eG%PS03B6mi8?4#W0sUi_xVvlr8@o)-jw9b(7Nb0QS>QCUaC9?1j5
z*bYc1APr;I(wz7D$iBte{yp~JiePB3I}$XS0w4*0_KT^8wl&GV?qZ55n3n%%EaI*s
zzCfz17+Rd2fpYDt6<;hwQIsQ!cc8G*T*YzV*3>J2P%%$etWir?J^@`?{hJ5L5W9;Z
zMa=hCbHupVO0bh|rRXX~@3sjV`Qo(^m#0+<Kd@uhI73-ydp=f8uIFd}kjM-H7yxbi
zr&txwExaya&R0{8OEKcmDX?{aGGD<BQtL+(?fPCwO()mHjCzD5v_!m7YTl$V)ba@n
zxZz^pq^AgyMEe@czQ=EX>E=-8=bhFKvYxq0MiH+e{zvW-BB(%H&I#lA9n8Ij4mMhR
z>}KnQ;hJBps*rt__r8Y7J1Uhh;@l}k)ch6P#ISu&gQuD0ol!KUW%sR*=N}%&-XIXy
zOx^lGE{x8FD#5{R`I|HZh5KQ1xAP4T-_mh2-Go(ivBHa#T$f}8nN=8@3K2+I9c9xi
zvA?s|--2h^aFLOOaU5~J*u&ON)h?XF_A-LZ5)Jg1{u8^kC^=iy3xjh1i1542G^<Lu
z&cR+h1Jp|CKEvDv>l?XwsFGHh=~FwATXpYo+>NLSbDlyTr>r~8&D1bWO`shLF&<o=
z1nVgBJKWbT&P)*<j}xOS<u~>ml}Y-)jKdlWK7=3EGFoTO(Et-PA;P6-DWo;mi*JlX
z_*zh;K9%LGm!v9Y4IWaT<a+;mv1-<nahTi)u)To?X(@J)UUB<UbBkRJO@P>#mtKT{
zYYH$Mp?3BxWNmbWLuC5Osjx{-z|*#dV)log9FaMfGq50#?fLuxh%ZyWOl#Ho0DCJ$
z3;&#3Sz@w9|Aa&9FWvU1Q~BUm^jeHrn*@N5kt^hQQO=&(mWje_VDOthcv6tWH9fOo
zwmN%esL-~?pj4r!m3kv#G~&&Qn^DJOh5n@z)jtsHAaQ5q%;>-Ct_6kcyu4d^3pf3u
z*{~XVt$g^qcm2PV=$IaS0)6x6T^otM<$d$cRge2gjt6R-8@Fi3yQ)?l<LFiE34H@E
z-`UroJN8tydUCpm`LVjW>il{22PfY;X)#=mB9Gvxmojdq@0YV5a^A=ghThK4%tmjQ
zFjn1~&vx$rR^K2S4mhTWm7?G)mDjn>_8Pc>wdSDC0Y>_S77rPkt&h9q)p)jIhgkoS
z>T-YlK6;oZ7nF{t!!wkc3rO9Ximc;1PR8P~#)G_;d*WB{j(qZGA7MI^Ly2arT*>{N
z)^L}sA)RmE<9^wa$7!2)8;BVf9p7=!)u*e<s7vt*A06WdA}@Zk{xGQ6+5)STS+t@u
zcgqWaqSu#}*TWj;-VYiHjI?17H5ktXc)kb1Imn68<GynLj&#XbMp$W3cyhyy_3hF}
zFQK<q+<*KFd9y^x$+qGMh35rdelr&mn8@c*Zfrg@pSLgJab$~K<iA#gMYy!6$hYt2
zYWHd~qg%gjnQGaMnewJ3Fz`_^2d=i=|C}sLFhCiAL1=HWsfBcB#_Sa1ZkSm^<-#NI
zR8imHHx)yz?%|D!AQ5tYIx8?mGilNAR?&sKfv7|2IlTrT(}q9_N$no(y_5|UXz?ib
zJGI-;Gjw?hIB{zcg~XV+p}**(N7EF(cEG=p1aIhmoK2kQXqw0B$~k2i##)W%vm}q+
zR7}JGD84@|%roc9a2By#!*+eh7?OBBDK<o^(a&baH5RNX=iQ@hD8(X<^V_(qabAY+
zT;YS;D$#D+?qTx9c-ls7JZ+$7plF?OKx07|4bk{qFE2K{LQX<6kNX<9eH1LKQ~^mO
z=AKX+aFEeD!4hPVd{71j5pBr31GAEX_b{3zEh5a$zr^&fNo$cm(Y(`w%fn-oIENGZ
zWuAQ#G53TkAJ8A)pfR#bHU7U=vYQ9blt+<0+g1gHarHZ@^K_pq-2133tFD}*{TujR
zKynBF<Ea?=ODj~}YgVyFDI7ED^S@vpb8pzUJoRYoZ%le_i$N}}rP=%^;?I8=iKZOq
ze+TKiqxK{k{OcCw#?#S8PnyYUTO(xDox3S6PweyefkSGSyBjs*eoEM-V^7^24tL@C
z!nfbEEQ?%*N93Vz7*c9xHFDJt<Alkx7QrCmo8=7HEM^*sR8uOnLulPc7b(1hz_zXb
z5&lF8*PvLxI*-lU5eV|G{3hRklrhg`ud>lKpAvLaikV0#p(gbWvhi7TdKf(M3Y2i+
zit5bs=1eSiQs%)9qU{#F1_GlTDOFX^Ww!N?p~A3`LN)aETugIKzIokCC8ii@Z7x?s
z2QC~n6Ec@ZD%W&xF%CZ;7e-krJdP0>{TB)!7*o#{5~mCy4ohSmI|=QifOMhUfKf}4
zE~E@#>n*F_zLJ^%$KNO`SH*gdv9!j2`#mF}FzGGL+*p?-!H!-y50U}3&^JQh3DJ9Q
z*0j<LuerI0O!EGCMY)R%KW9Cx69`fj29lt8rJ1+#5aPnB%uTUZ=*C~?(9QlEtk||y
z*8OA=0`2)ku|7uD$no`VIOU$%L%XP0M{ha`<6{GTLt2>mv*e(4ZB%9<Ex}NCu?Cks
zL+-OFEN4SbB-o+l71cmX{b5L6Q3JmAdtE4uib>*8Ry7Y)KS9Q2%48$VMpJ8v3|NK|
zQg4}9tXuw@5-hy{O1F~kZ{UYOJp8<01;VC;lRn0bPt=LC7UZpTPUTD@Cto2UH{mwL
z(H^x$UcA$#jm6gM*#==0?BjNgf{k;|uY}}`_6hilH`lX`i?mRN(e$%RLpCCDK@xH`
zV!x^A2xE^<-I&%c#Dxly)Yp2#cayLSwFfeFI8$^AO*!}Z(F*gnF&nme$eV+tohJLf
z9CJg$S#+@JpH>8sEnb)+!wjWe56N=rn%*Mh;EN%neFjD8vqm$41TXgWd^gF>^DA%U
zEQ-x0UOmmw3ha3toMXe&3EkUIb*5j<BK&Yf_*g7@dFS3}uVw=^DLJ@#PR+t*V^96U
z#QPvABfBwD^y5NdV*t9926*6BgC#Pj6CXBiKQi}jeAuOy6aULPs%uB}#AclF5-ny-
zvkjXoZeoGaq4s^~reVZM2+b@Te(H5pt7@XE%y+VLrl(aQ-d0oLKW3!va}|coyXem;
zSoPe;c&^n>haY%MLLx8a{%*Rz=11&-JEg_?hum&o+U12<URRT{hQ`f7&8T$?*Xpks
z>2~;>^R54RdPS)`%`m?_T-A`faiq~u?1QwlIyo!!@Vv{yr4%w84WOX|+w<KcW}ACA
z|25VTxF#)-*{tCu!{Hu1xH2$CTzDJ9QhYgrYlUvbaLebSu6bW6Qzs|3H*4O+b%4U^
zz3I3I26KQyx49Ttsx)KLad~5CruE)MJjqo<O6{JsHN#h1$j1-`a0c>T{Eaa8&`;@#
z^<PW$_CGMErZzO#Y3?ojy5;gk9M8TVHZvZE7FIalAENY9iBJC>*o9fYT*^Xm53`rW
zbaali7s}RMzqo6M+aKb<nm%9q!I~r8D-8~e8FJh7o-+^_o8>iV*VK@>*ov3-!&QpH
z;Dwr}E!<0scvaRq<;##UJECgdK1)%q87b5q_4=N>1GIQ)jR)j&`%>YK>%UwpS%%7P
z^Fb;==;?Z{f`yJ5h_*@n5x1VoVeWiA(w1my-AZq1L3AaWK@~!|{n5m6PpBe}wRndU
z)l^NBQOTzdc5JA<Dp@%-55g_DDBd~Bk8k(LJn|6WKis#hbqMa{=Fm)u@^ys3=c>Zk
zNL6MAE4VfX)G5yZI0R1ck8x`|S5Jr+W1ft*ec$f+I3rMkV|aeh(s5D)t@_eI;@NFI
zil6HzRw(%amdn3}jV$FW3e8t2h|L7EO`~3UwHTHu`%^+X4!&&~_18vlLB`~2qisl-
zCUfSA;bnPIQwV_>OEZOk=hm)3h|rm<MA!dFwLsc(;uW2C<D*M^`9|TW8=H5ue-}C<
zX}Vbeb9gaKHgf_DT(s>x{GyrvFAE;hVL$z`C+3HO)0|#F8*7J%Xk@;MVeg&E=yx;M
z>O)AfcO?<VynuCIORY^Y%-QT;*EUvpKLaCcKn@oENY5RPj0wx%^p&j`9Ca=WbUpP4
z)UL!q+j-YgzUcBcegRR*sZias3<=w#Rx~5<XEhb8g3<+WpZfP6ets3NbVRXCB<(pr
zI`)VEr7KgX+i~4<iZhPIYMGmr(Ev`;wvN1d3;*|Yy4TA_>1Ya$RWI~sp=_Q%AI)OJ
z3Vf2p6~4>gU5f)ElZ_GCF?DVFBt9vyBE0!`|AQLCoK3z$TBg{W{zuykA54Rfkv&F!
zet2XF(=z%h@2C}aYKIOzx~bqurkp^l+6>pYQG_|<z`^$P`ueKLsb#xmMr+#-b5%rw
zsm9OUxj#Vs(9yMgaVLxh`W!Io-~7+1Afxl^7AJ&!3v1UkMVjiuG>Kug#B|*5S?2I_
z9)ivzkZ7oDqzH@KuZ$`T{>)%t4Z=VetUGjs?cLOqpY?T%sxWOce(d<?OZjfK)eHU2
zxfSo9uaos}`3WXJ-Pwo7o(%7rGI%P<|GMQJ8N2_R;S7>)Zkgm6w|1jA`pVn;3|yV-
z*?JtPj<ssuU^ev44dp%WRxeqFN14s5eVcPm7`r#k6(j|5;NmX{<6pOE|H^Ri&rF6K
za5iz!85gqhMdmz2JK+z8G9jEap#RFLIm3f)b8pr`L+%bkJ=;9x!J3H`)+#yCKxd%{
zjETjmW=)}u?Ipv?*&h^fG&qNR|FZDb;IF){Uvl3Iv>bDdye5v)5fYTKWm4|j*#g_J
z(!Be#;TW%oq|+_guk2GJllwdiunFM9eWBr;<b=OZ^3o&$yVJyI>wWvKO}#773Po8+
z(&S%O(OQZNUM1^8sN}sen@s4={JPNfbEVFpI>=FMR$3>Q<66T@#GRO(mzOC#a><pg
zX`I34f6qby+hPc=s8IZekt}_?K+TQgg@?Yo@VvD}`nb#{M-dM)D_j&^IigrlYb1De
z-ROrsPrec#D?X8td?axZRGn>l%y(|M!9m3tFY<c7Q9D9^L9t(3v1k<l`r9^<i9P(N
z>WyEQ4)PNFZasU=Tmb;~Ko#x^aBRTH!kZ#&54LOG70gX`t81qL(+2C!ne8^9+{xo_
z&Y)cjt?pQEr<FwPzp-*u)&!MK=Q$fWmn>#e8=NupwbnaZ!P}U1-z>hKJ4DKv2|_UE
z;pz}F`w2O7r*Zx&Oe+aDeFY0h1ue-K|4s%5oE6b66Cp?5JyL6Eo~TkeyqlvYC#36p
zgNdqEJNE};Qj?HXkJ}h7LMSW;Z>_BLlpzx<KSdULG@Z#~WN&RA!nHcjtIkS!fj@a3
z<l?1`E5L3=>PtMMZg6<E|BcTdVe0>at{oNrLFi=>reLLkK+90O|NQsdcThN=pFV?|
znYOBHh|6I8n&G6p8f@bU!rZWO;fbcI)?&6tjM0@<)rP&t%W^dhE3@*260!?>%Bk)X
z@0b4k>D{V-17SdHS+s2NCB;~Kq{YW@IPudQH(*12Fp<>01j2Mzg)gk9qoVl&oa4eX
zO_ziVZB;EH;xt@kXJkpVE!RDD3i2CLfUWTJw(j4EmiV$6|DkpeEr0N54M4j#mfnQ*
z%PtWEtZIwcon64Mp>cC&CC?Wz<700A-r!Z($5rYMgtU)E`mrYWTpjGK`gcWV4~1m{
zM2oxEvTZUf5-5(_{%I^qzBg_EOwy7%*5EjPc&BtfMt79sA68<p>ll+uu^JZXjxH5@
zI+G44d=0T1w|l55zEWzZp^3#+_-eEWNj%OdepL8i%v7(2cygpJz{XA5lrZ{w;NuHG
zL=~fDgkVCnc-JYeKCbsP2RmbHaWid5O?5KU<hgX1^|+^E*n})aQg4$bNbCyxgGfeg
z8GLrH`_h;69F9l|?G>XkTUW$Mi%I+`uK%w2vAsu&KNUms<v>J0juT<tc)xWpzh>cJ
z@NUUu2l$@TzEQO@byg0p)nTeF60kIJB{-VYt5?1-QZqGeeP4bl^S1{RfSC<feTYd}
zY*_xAd%Z*iJ5g07tRT~^cf4^A?|+2&^oe@?998VzxCW+R9qWE)uh&n`Tzi@+u4ZxI
z0k3vvAHi@H{kO7i&MVfVEh6_mrnL=js$8PIWv3TO9;8WBeJA{JDFnJF$;Oz22<ieE
zl7s}xB}_Q-CCdmN5^c<dzk89GCuH^eG4nFkhPU-GB)FM>6Zz9+7aB7@xTR<bNf(Y<
z$2FS#ROsw!O{dmg(v5tnYbFY(P(7I}kHN6#rA}(S+Wgp>v-h%jz7>fCk{B85F4qL8
zuonXogU<h+w>x8FKyf{k`uZ8iNW`EC$Ab-NIR^g?GWs%J1Vi;<&{k^GXh$%j0;z?f
z0c^RbN-6vhDVc3*weyhRQW?jE&b>0vlNX<34-dZa5dE?U7G^X#YsFKePFe;2S!t>M
zxNuvu+2i_-`wwdS;bjO${_MLndh=G5rIT$P60B$1m6}NleHo+XwAos)v&Gs|s-4e4
zVl*y;DzlC-?eFY<ENz3&U45&2T_Vy_Z1ru^7*V{$-XxxCno;NvRG9B?nrJ!UvEY<<
z;*VeJC;f0OtdkH>&GD*slWyHoth()871S0iy>e@%^&1EY<J-}l&|f>KKQj%-`_JbV
zcqXX^034d{;)FAhntntxl57ZZ-vy5vX?q8lVhWNRSr7CpXKcP9HRvfRRi$p=^355@
zId?}`^9_jJB|M>WqiTjYFl*X;^~?#o0`WrImt8}B2041usVRt5z17So?cn91ov-Jc
z`T^h#3{=rd5sI8!D~oWI^3>_^hy;G;3(wY*A381kMV#LgM{pys*D|6(N5q0T)**t>
zwpe2xh7=zf926bVig?!VXb!tl>6=(!I3oCCQkd==iFhUOOW;Q>HhrEc?)`~|i*9cC
z4PG#m3@cbv{EQH2{e+l*=tzw0>0uBS5_4W!gmp#cxZyWpV=Yo>hDh*Jp3&l|1R`}A
zL@{h8_1f4|sL4{7XGe^<ldG<`$&2T7G+}NicMlGO{|x2vRv0BWcZNm!lV<Jvz1HRK
z(yjI>q*~rAX8qRErN0vwOEz!Ua@kg-bW-nsAdXsh;Kf?4m3g;CUcvPy!oxvzIp3U$
zf&J!~?&4#GZhmsi<tF_dZ|JyALwu%E%s(4%XyHWMp5f{n0e>_%FKd&m`!O*bFI~lV
z>}L4|_-KMH&<BG_y97eZF*3vDZ6x$(ErF(;YpRb57VOV=BiuV2LBK_;605CpxV*Gg
z&g(w(fqT&KXovNu`6kP|t139gqThQGPI)mK^<{*cuo%WXj^q_n9~!XIy*<W`D!>0w
zb};vk>P~z8*9Y~cAM3q;>k$1PpvpV_cZVMpdR)VbK}kibVH{Ss)Hisz&mJVa0hX5T
zdi;aJ7aYuqV^5}MESB6+Ia1q!uUj@Hc!jhov3^dG6jb&k+Jaz^t41S&^U&ByUKam#
zi?y+xg__=|tKZ;8kw_*3%*!Lbz!wB^0H!R%Rq*Rllrrq3X}TS*|0Ehv>$htWA}OfG
z6TpwW=Z}$ZqRg3V-HJ`H&d}hA4_80)*87v5!B%Pbq9W#%i(;|_d~quJF`aIpB#p*M
zHh^PqzBC#t+4$D!pF4LAG-H98C|;4s1S$c+Izkc+f*La-E%z6jf}U9#?#nDIw+h#t
zFWXtWSt`en4JX{gSeRDN+C4I-5&6PO9fl7n1MLKC(o>g3O3?zoWOK77P$LYez4w5f
z(z{`-@NJrn<yqV7{539Wa(If^zIGc(LOB<~Elmq}m+QO`^IJ(*rp0EqbX^Z11|~oZ
z&<_;H%~b2@D+ag*HN`&x$dV-b?-6dBPOnRJ7hG2uBY(Fa9=(CJFhw@$2@`$ZpSPY;
z0&jzC`oVf{@CtfuU7?$m*P1-FDExdk%~-Y!x)7Nv-1ZP+Q1Nv<UgEV0yFM}Z;Ye)x
zt?WirMJ!^KJ%c;s<=huS@^g|I{KAqEA;!BGb08fJ(LoZzpzLsf4vZ@Y$j%Tg7(fIa
zI|1}soR{)>v1x$UKT%>jf2CWiSK@W+b9aiJti7^Qb883gh*@sL3P`YV7u=r6?!0A4
z&I%i{{$i8=bN`xYg<*fi%u*BfS4sL#;VSBg)SyG}>y|%=B^ybOS4P%fw&I-`ll<5g
zf>rB3BbV|Lx3PguG@N(DAo1PIbbVN48pqcw_L&5W+hZEFCim@0HGUqT-^IxndrTNo
zt8zcaqXzM!q=jewkb5<zqg53b`E1pt*HSDj^kB2iZP$C+K;^c=qTvW8-J?c>Jvr7=
zgpQ4~Rhb=Pj_`Ghx_jG@7D$D>-?v)1S$hz=(K@fAc2h1l9mh%|sY{sOUNsLvkMB_;
z(oc?jcyV{H8C`$;pjc`9yRmrqZR`=qU_%1yY*)!%&aM}*|H&!+258vu@iufLAFR;m
zhQ3um%@keGYtEnbjvnees=2$>7{-Xj1~`k81d%(cIm!~U+lwp57w}2_c5Gd(6@kYr
zZ~9JX+_tK-5t|nxT^=ye2!>*c5IrYX(J#7#m;EXoK_#{VtT~)v)l}nWY99Rdz4hOI
zP4SPhy=Tp{oevArX|k5F3k8K!V>8_H^k|vfi_Qr4E~UYEpovdPN_s)Yx<WS#dwRt_
zIC)gJ3oMkkj}f<DYh^86!9qca@3hIJlVR{~>*dcSB6ljsz+i_fCn5cmnc&4@s<3=%
z(EP-w8=4pwP|2_~77MY3_Zt#L(-S_b>Irc<^v+$~JLU5e3W4{Sp@5XlV~=S9*oqgO
zAwMp@5V~f)#kV_xP)=Dj8VjU&_Q#sPN*P5~r;8Kl>j~p%%?y2Z-J1J%RbE}^XCDl^
z{&}Fg!&ssMN?vk`Y_T`;+iHqOeECG3XZ{*|_v{~^28yp|8?h8((^-pip!3>Fkw?O(
zI&garRw`{C-&m66x-1(<<DT_py-^HfRBpOEkh?NZ&RAXxhlKF^ayAQMh?eDwnak?J
z93?uWBD9vYYT&5H|NQU<b4{fIq(7Br76c3=rd2vXggvPax|sKbV8n0&m(TW!2Y7YR
z)kR&H{dLRgzW-gDfjJ@7+c<-UwF_|7R=pTW+j^vhjgk+%d{=8O^3?)8U{JCHG(7l2
z_NM8ENgEZx3<W*)auNOZGxH6fr`kEvM;~+XoBH?1BAH+Q@4`#Y!A=SdskQWrzNBn2
zper%m_yn`rQ5!9VH{fWIgOaaXn!f#+IZ~Wcu&pm}e*L1ix@!VjM=V5@WIwc^hXMX3
zS^B7Na39lp`6L6}$U)g6>Luu`EA4>E3tx`@!gUnj=D`mv*q>v;Ed+L&<5|Y(C4Yhg
zX2r6jstdQKpRV`m7TE1Q)=xXPn^&^;sw4#|1VQ+wlXRktdLUc$u20A}=90%xsn|Ba
z5>6bIn!LpA!LNu2dfHdHEPv~J1$i2fME=rPSkUuQdSMoC@KkB3E|+iWVcg)Brl7ko
ziM5$0t);9VDvCD@OXB;;acq*4gWiN%SYJlT3n`}!O?5n1O_Z;JT?XDiLJk8>1>;r+
z*RusjY`y%}HEn}q8oJcz2cKqn&)3AS$a)862A>Q3<|8jovi%l6>W>MDa<)X|m#NSd
z<3u>eHPWuGFU2+0vGC$Yd6#KD%p)^zzKlPKN&Yw<rY2|efVYOJ=5P@0Rs4FxvgLn#
z{YfMC#v#P%iAn0c3YBT=ehmZI+qlFf?3cvWQE2mZe^%aMi%G)C;qKo)q_KQS_^(?=
zyZXT`gFRHrj}s>Sj>J=a%l%7E=__{m>3cP*=AW!yH;H^9<8UGsYiXb)i#Tf$mRgMK
zX$#;Fx14%)(}Z`p-Uf>A^P-@aZ}3Yy_`<Q6jJw09G2bIznhLnLakU|Z(DqhcSjK*u
zWhq7K`4O^3l7P8M<!?@@$SfB4Ja{`n+#k}q+ul^esV2Yx^(ZS}giaXk7~lKeK2I$l
ziRSuO1e>C_@1^+h?)XHJqHq&n4m~mql|Nh(#H__pHE{Yj7f@O$2cnC_GhEmaobJ5F
z)dVJw5O)(}<_V|?vf4ycb5anzro>h=rJu_dH5c!{P7C5t=}9Uj1Z%u;L7f`*Gbs{U
z{c7g0RiD8v+KhjRz8qD=3JjUyam;ZIJ|q0AhluQMhbgeK_x%r<RO4Qs2goG3eNLf+
z_^e;zZawb>N)2ay#nALsT*?va&TH}=);w~A3zX~RZ=AYq5!9J+&rKR7I$*=4A6vTR
zVf5~2--^gFtoqMpHFFc?`C1*rtr1>NY;vQH_!wou>3e(Lq*I^0;L#pZ`kOs3kKNly
z7waDh15Jq^(v8f(dTRCm37VyEV3qz^(6yoGvL7-l?FZR*EaFSC{&VFESNgeG0ZbvW
zfPp)8)i9D)Cict^)>ftMnB~M~JBZ;;|2*ouVKT4%!X{Tn#Y~gS9EVNfcO*!nn0RT;
z-YO{B4!t7(M?FWe@2q1ME~s+$>z1&_*^6gupS%fKT>@;G9asL!OS`2$k9!!%*QHDy
zgq{UQLPVp*SkHLWgwQ>lbDp~6<&v*+n5WeCkzR9UVJu!+odh2&aT!ipLxhEBC<^|9
zIforB*jT!Yd#{37f*ln~ti_!dZuy_n9S9iaIHj0z6YF5|#|<#M9GYAs{(=mG+1AJ#
z5GRclf@FglKf9S;YTLT)$OQhpVc7X?NWH6*xh9bkrKq1Ouk;2tYau=HyKK{yJ`%gm
zjtrTx4w*Trd$6(UcbMw~k8gjh^2yvRu$D*E)@gl5*4Vs1^Awa=#B~1Z5COJRv@#0Z
z#yH<d4fS$p9t=5?wf@Is%|3Is*(lc1w!7aQR7~?OEcmJdV($4%>D$S_gY?}Stt=*k
zcv;ghicz>YGY`evzO!*_v)+nbD+F$nwu4GA+I{HhTM=|cZL|1^4eAnpul}i@hunzd
zV}#v1I>VEWfBOqS&>Q%GX^~8c%yBNkE*_nDOUc)HR-YI~sXF5|XM9Ft@U}5zTnYhC
zQy^-vLW3zH2uMRD!E~gQfg0>PX3@CzDe7|dGb`wY&z^#crndCRPXxYx0}N|aNF?{x
zBKYlNbrc~CH%Zx*v0)BcMa+;v9yU<1c!pxVJM~Meb?~uC9(7L$<oZB<M_l`&g`jg3
zw}4}HD?Zg`um8y<*<h?WWc7h4!kM<JOZ!q?FIE-UUq`gCGL32u7&I5D)&TLhL;T8r
z^E7GS+WZs}YIBKj-V%>F9^Ok$T0gz>S(UHdE=DZxdb*fsual^{FTbv`G}dz=Vqhxu
zk^7%j|M&-eKb(5PDfO>CV!g&W(A$MyxT<Za?CN2E@3xcekGo4#k8J@djfVC=D=hSI
z8F_ze*jnKK{87hHdCMbLC;O|eP8W}D-Q@?iVjvM*6Ncu<7n~CzHn@!&4VIDB;P%F~
z$n3fjA)X4+DhRrR5RPpuy{OU7iRy%1kP=g8Qx;n9n^5owDmabO0@%6J>UQdaDsXa(
zl?n01+d^8Pr#AtOrsW0(q>bfj0XIq#i6fB1ccnH=9#>6~Mme>0PJ)U#Fsj(<yyp!=
zUU=Ku%6scx+<!=APFvHxPOHIc$blx&PXJnst0+AGtC-0nsg<a{IZMS5)I|`@J)5Nh
za2z#b3R{N%v-`PTmZISh`hYKpAKP@P+IAwo8^D2GN8Lxn9eHmBUV$PgG%c=5CV2(+
z^TJtU^wX2Qvu%Lt)_b3c1C2;SzXzpR0FSiKjJh^a|HbixDz$!_QyBaJK=dO1b5m{z
zPUV$fd$vh<0)yC;*-lsLRBFrJWrA<>80;<V`7oqx*A>f5?bml*zGnwQR8HeWOa&EL
z^~(8R{GA(Xe6GNs-+H>LsvW&+ZuLq*(gwHw3pktMmHhL5(+{$i|Gf$3E^~L`0B-xj
zI=1-=ki&n*{O>g`5E8U9tXAeNC?e~7J4Q043k_E{ohhwEd+~<BVfnje%giz21f+e=
zzrSHQ8Z5cTXRXEWfaEG!vCk5t)FCzDpd5fHHgZn^yroTG9BLd$r8mXQ-feo#fC!u_
z7xGo}4~8nC6{<Bu%B-<u+p0lR8eSD-e8DTSg-(JLwZ0zKV0MF3vsj3nPdI}KQ9SIA
z$$A4^faM?TXsC1gSnRRI6O;{daS6|hgxI`Ddf+Q=o8gF2M-VSK1U5M4^FZMNf9vcL
z(&V&J#DEEx$d|6-YlH`R2n%Fp+mf|n?~CmN0}9_nRz?1+%Rfkkq^8G(6+JymBRD$a
zw8;puU)xuw*`6csnfX|YmBO|9QUtOyA%^r*B49u0-D3USDpr?;V0Zw&QzOAOu}XYP
z*1LkOnH&G;k2i8H0P`u(hFTc)*|2?GHTy!~Q`>z<B<Ki`_dVgHyfEf!YFiyZo&7tz
zk#{YTB7Lmb>6^%$SPqj^i?bUnj+snFO>*)b|7KV8oaJ3lWni7!$8@+)3ek&1i<9+2
zFGUpDbk|twv3zGan<7-SQB!UK4rpBDj=IQ*9#fVyQxBY3XPm^%5X|3*iF;g&GAfMa
zk)#xekGp)Kr!^*Nbg5?5q$HL&^sM>gY|$@__{3r^>}osnm3LfgUxZ&6Ob$pa70=dj
zh)0IGl*z5Fdg0Ty$~Xl(?=`uq?`*YqC?vpqG*UZnm-5{*z>n7yzOfi69atI{TbuVQ
z8pm!btG8X-g*8qOlH+C+a|%VFI|=kw2IYeQBbB6HQI4=bo_>LhSOR;iv_$$Pq|9S9
z5LfuWEBhR&`x53I-2%_+z5Wy_I^82WKH{KQ%>nhNqxG_R<G0m+8RXb7#&lwi52-_2
zI3+4&Ar;VIN~dyzZ&-#cm%1riEOO#G7ZWSW%YKMALjDGQb1o;Crx2XH@QC8tvwZeP
z4g2L9lh?-U@^gWT-+s%-EUPP>uP-u`-4EgdpUlih#&Al~Dz4o&O4<Ev()B)4Q{F5a
zm3Z#>@G>h&)F)4m$vxA|s~XWUG&H(<=kt1L1*f<5T6!D8@0#gtWh6qFKrO4@QOi{l
zWa`dH2#ULbTiLzGKRw{&i>$-e4-7jB3f*%8){2HwW+-BVt0Mc6XZ5rgvMX6z3QP#c
z&Abk}SzOqYFHQ;;R~Pp>pwjCO$A<Dxosv&Rmzw5Z^O?R@`Kba|9+Ee<LHe=BLAzwp
zBB7BZw{*GZ8};vuc6z=zUCw?y!S<_YX?pwW0QzWuGr0S3A48LunAs)UKyEWu`reb?
zE3x+!pnGWa=pxl;7&LgLpG)EpLY9@gQ~mQio|A7!Nu<;#=6$p&AyNu$JRGY>1A)R|
zLQj9zwv7uzU7#imPR+wyYW>%AM#CL+2a|^Q774)6^M<7?H}~0-d9bOk_oL1YzFrru
zL0k}fr`Vvx?HCg)7}l$#%<W8>^EV?MD_6iaqvFA_&X<f)ZfD9|nC}e(&MM5}aVw&a
zar&+YQl%SUZ*|+#eA)M2iVj!4aQo4aRM($_<JH_PKPqYsf;MAYXc=`1Pgh~&>yb#B
zC6gE78z1-%hN@|~UY|UR1u0;ax<r5okC#N?>T?GmjPkA$x-(x`VH+}iUuU$mZY99l
zQrO_(SpMa3WSrjujyjPe_KGl<PI@GTzPc{>W!A?W4YyZJ;~4Hi&!aRZS?3JzRZK5&
zHg=V?GHCF_Ot04b*CRow8Z)7!8yRD*1L-3yA~xFZ8`L#71|kn0y4{~QurMedlU@%D
zmOh>{o&F-|z*;Odbb?N6XFz7n>*t$uo<6RezPm|?_LereiVjXpL`FMjxi+QNA04FA
znLA?y307c)?ez*={%K<!{_%Q|kA7q3tXIyz*$pS0t0JL<g>Yoy9ok8p(kYJ<tZU*0
z?sLL}(7VmN1e1EH3w@<N;dwW`)x1;7>>rhI{;t|WP1S|voY{gVQd9saT^|16+3Cp(
zU8rod%a2i-S^h}<6mY_sZSZwV3w18wCrLuW`aHzow;_alriQqDXyje{=f5}x<M1ST
zc-y}Hxr>Cjf%x2gN6C&nujCH+y>WIQNk$}@zK#v$9c~R&s3>wzETEk}*cnv3Y4X8(
zPMy_@O!qJmbB~j}BJhn9Vgd(p&r;Khn_Kmo=V;su;>y=A*8rfdN}4yMI^;z7l?oN=
zZ<r&ZAiJ!bh>J|~;rj9-LHv_7zBc(IY7^*3r#)$MLPJdnk8LhDsU6(iOM`M0tQ!kj
z;d}+%5H-4T3(=9aJ;fyysMo=x^Mx-)#eZX#_K89LQMYzwwO1j)*j>wbx(V^lQTzz^
za%dBSiTW*9z_fBKVLfMhT}@s%`SH3M&QK)VN&i8b;$7Gm;5-VIFR&jd=B>H43!&*Z
z)(<hX4tpMg87XGmRW84yz2MY6CZyjj<RQJ5t+^6{{69G>*fv5ZUC^?eIKzc^3<PD=
zl%M;dNlGKna+(Pl%~joj@nLV6vxw;$s#TJ3u_we;qZi%lK~20U_Pvn>!~?KZ<45=M
zjjGc=^}|L*u$~luv-+_IZqTq#b%#x_&a-uEs(aNQl>}v2w+xHPH0e&c*(nR$e<(tc
z%DXwD`Ouwkhna*oRKjWU(Z&=`JQ&F%sU{!pT=kQUcD$`DG8+s}QwXfDaDSaMN<Ku~
zB*%xis+hZ%GO{<ci$+kUy3F?iAL^bptDJ7fJh54pw%Q+(aAO{PuEzFUK)1hohD(2r
zuWZmu6XHlgiwRRIPj;7kO*rnW=sdmi>K1+9(;qYDXRgaR#=Oc@qGlhTEkZNJNdW??
zirY=B$upTv#0mRXml+e{gsvK3fOSEZ`-3g)@(V9XQc%sqq>UE^>z57Y<cFWWxQM#r
zsaS_L$PYhzAu&>t&y-r`T4i+cZAO!N9yDQSXuY@V){@n@(T1_e8PIU^WOIPMFOwRo
zVs1tR!~oMDG0~_)uIln2LZbfyo=!->A{$}sHVy*D7&7RK<HSMb+mwJ?4YO&j<jc=T
z<?=GAQF6gSUeI@MK_1>lob_|6)^t-GUokNZm34i)@*=UKN9yi5*)NXn^_1hC`U2P&
zjW;w!GD)jSl4ACY#@}@T&d;k4r<N=&9K5!Xb2fYAPgF@R<xrY@jxfwg%m9;>4%Tcq
zDdKpztQzl?J)yF9gGJ;=BwGIDG8(NAKvg<2N|sl5j-H;(pkDJC5s)fUt|lWJku3C2
zd55sZ{h^;<^Or`atx)pR{8xJk+6*^(WTx@?vK@x5j}}iejue`G>FVbUmp2VjQRUc>
zEL6kukq@nOdret|V*N(IxvG$%*vpoKIv2`*SjwwtZ-{&IDOS1}CJr7viTiK3RMB39
zo0$cG545Npf%<Z+h;~o=1<e6|JrgUgS@DfNIAN95ccbun-bsdKSs0x2{i6v(!0D46
zAZVtcAu{(tkWi?r*Pfbq`QLoyoi{7DYHPTas+?tpKO-Hg+qYBigbP92@mT5K8mW4t
z>@6VuYzt<2co?VoefhJH#)V_w0T19U%B~mnwz%3Vf0s!Co}b86AgAtV)2WF9EroT$
z#s~RML)P4M+o^?ciWpb0RYp_UlAujJ1CAMwj}q6#!lOjPd-GZ=2mTLFe9E1o+sTsA
zxW&?Ox{mv#L^k-r4xeEAjpEM~mww$c6g6wz9Z<BaHbV#VRdHGXVO(X#F2)>KOH#Ue
zPFl|KjI#=Oax4W5WDMe%02|FTuWx^q{pzLJYrfGt$ML-HNj2KO+yeAr1$Cak`^D$G
z%;h9u3;q>$pI_V4VFrj|HsyZ$G4e`WS+ZJlC+g-^9~`fCF{U8PAj10uqX(RvF`zR^
zdZe{Lb1$AfHu!-5PTP&$Z{p^x%ko^OBz=y~tO<c@$z1$(M}sgY@FMhfYApY5f~CBf
z^3GD$v;pcUQ6}Bs-C0ThD}tO2q$8s}VPBNaq(czXRk8|$!|??_GjJ)$8`{~>7bS)$
z!OxN%0j7u#rKj8C9=<$LzA~FOdtE|E*}rjF{%pqg2HZg{H2rx3Yo<ggLBn#vjGmEF
zDH}F0?C`3Yj0}Ylc6`R;MeZN7T>ANOk4npH_qJ#bKGvM2VI79XpwqzMcx*0tYe2vf
zY~@3SSx^wUY+69C5SBzX4N`OS99Whc?tZ@%g!6AmO`x<sDPOS1aq7u|;Oo(LyyR0x
zi<AT7bruj&{%p09`#Zc@7{?RikH4Ic{oKSxs{XXZG*wEHnmLK>-{!!wtpAxW^Kl2u
zdXS!mk8+BP)tW^<^}jF_9av_Z$V3URmzxtH=-i)9(0Emj%ChRUrKKH2e8^4OK^15Y
z<_kjc2L7vkO;ty~_gH7<JtajO2cRX=-XpsqIur|9#~`qH{O-u}rsmA0WsJ=~xk;XU
z2{l|y%i<w_Sw5d-#P5{%hjy34odT7#jprO>mq0V<>lTtXt*I9krR<3J?VaQc)ThgH
z*UT!*u-EpvOF;xo#Q1Hwz86-Z|0#$wTP0-;@Rs9mG6kk_Cgx`+$EQ;K?pjA3vr!1l
z;|(umHk-qIrthggEPN~nE@@Kg4o-b}RoH*#*1aw<8^hXot*9eCgMT*uwqLR^iZeXN
zGN|}0Zw#OC1IBcW5UcIKX>R|Q?893`wftJ&7~$CJnuuyv*UdBGKPOj!sa0Gr)4C`e
zZu>Dw1>5Xv((IewGjwVik0B>A;3=vaj|CsmZ7?=O5HX;c3EOqQ1z}PfrN#LYoicMS
ziol#0pSkCAc}9-YFHtBZZnJSN%syq_E8ZQ>+zX(w3jMg=f#~p91I1V@`CyN3;(311
zV4iJ|Y_Z0<edqC210A>W%8c>LpQCGT)%f{?6y@yLw9V0zG1lI>Lo@gYV=i(b0Yl)<
zdu>32PjwBOjd9i}kdiLQA^ysOyFP8WA#y6wS=ETt81(XUakX@xPd2G@DjxVgG=CWr
zCyR_k3A*C(Q?dCwDN_DZ^4ZNnFQ>@B=4dpt(=qa|tjpbApZY`2n%BI>W80ZU?zrtd
z3Q*&WQDQE1#1#{#ZT?-Div$tKxjt>y%fFB+V@j6Bu%aIzj%KX&^6EdU9((!!x#_Z=
zg#N@Ya**Fmy85o^ZT<MMgkTEpts`c*Rm+dbc>eh$;+z@ho_8CD0#9oHxr8zn-|+J%
zc5y#3^wHpwm2=7LT?0IBKZ?J$55ER7*}qf>DVVtNabrt6T9|06^mJS(RKvHqqDp4-
zcFE9fM-c9$b#5Efaj0oCt#m=n0Tn77aS+1-V~Qp()lZ(n4Mr=Xu<esE*?=)!+*tY$
zIW|kK#!X}Xe+fQ#8-fnuNb9Iq7pegB&0L=#2LC5pgnr%P$9_QzF8{jaUL*{1;(0^v
z`<O70HWE$nge}vTCJRIRn7rWcpR$(n{4YcgPFMC`p^qc0mcz=aX9DifAV*5vY44hN
ze(}tdMK#xECN=-HlSz<b{Zgors`0upO<*8_dE$Z(3@U|6>%K*$OYA=apZy&NYY2WA
z?`QTK<b~E}iIx72Jm0EG-c_2EYVhCKun@RRHP#v`2XycShVDgg%YG<$hdk+guu!yB
zkOiATPK8A!#_~}}Uzq&S_YB5RkrkK?A)79#2TS~|Mf7%!g-GbN)0!8j{p%NC$C;w>
zXWju9s^lqieCjh$9vnnHSSh=!Kt0Cdq7a4i#%2|5_|^>&bM;K;?OYIAD7eu1<?fpO
z;+{N^&P@z}O`lfhc;=Z&88pNAs20>ld?o1OrUyVjSf0^ob#NC_dRVz<6raaXlV`kp
z0Lb>qRqIg*_WpcS>KX3M5)2V*|Lf`=grRfvs7b2{)Gbh+fSlZ(w~G*yJv_eYNi&~v
zKN=WbR<oqo|6I}kxwCe+xTUq<ZBh2g74RNGjrUzuSyBRZaPyu*Yw1{45cGskQo#CL
zM8KS%XKe&Lpy0>kw55uFHAyC+z{P^FY}a3IE$#Iln^PR6yW{Fvv}q{bJ}(DL?Ws$i
zx|NnpezsWfxl7b&6**gZz2m|7@oP7t;>R($LH-05>onm@pKH3NM&Mr4+v1^*U$FZo
zjit`+C3({|6PmPr^{i1Guj(7s)|9Bc+n#z~AdpoiZ{ki}at^b!^tp;c^MVA-r7_av
zO-ONZs3mMB$kTBSoZp6FhrQcG`SL!mNJ99)@)@p$=g5P+8B0Susl|Bw(Ox<|KE(^=
zi$zRlp^{szmyZFYRNa_wfu=}%{rACjV>T%t9MmC)w3dzIy50_o0Pc&XMJXc1wT4;>
zh?bm9_dP(}k;w%THDc4bBvvz%;qz`{ALzXfUaZNEPEo)oXR=V<IRo}!4#f9YTsIxZ
z@axNdy&{a82c>`q9;LSwaw)KTl5jm?Jv^?~ZV<LR?K)O#fvEanW(7bC+D+>yZ`uJc
zi|+OIRB>0^-O_*sHCJc@nhrW>I2G(?-|p>w&#UCim*-y=_VAIhI78o6SxLSKmhgLC
zl@dC;TkA2tO>ikohKE0O>a>p1e?6H5To|bUB(_s}q2GZV*v!PU9HK58{?B<ISu@rv
zy5`EZ8r6@WUdfyyn%^zWzXoPsL&oMlN|eO852!<hcFwLH<@<d7&bn1jsFFt6Phffk
z#z0BDkZSAamTYiiX_kH|Q`v2#&TWhSznX0T@HC-eotN92+VCX`AF4C-AN;qN4ZvM~
z)QJMowqDnY_ulfrY{Sfec4A6R-R{Aa@vZN^R4aW?0&+N!2mJ3>!m?T4)O$<9ZzcHy
zY?0Rol-ne?mVZ=?{LN8LRQ!0^FU*MoVgk!FvsP3T<_kvsgR45;a!vw6-^36gvU|Dj
zn?tY?<0j(c+0e+kCB@F+x58_R;l{LJStA^qYuZ(~#E*h)x)=5hfo&;;MUi9S^l*mK
zMDbMY_l@_Xaa&5uUvM9P-7=}{_S<T|^RJSFWi@XTav!*4n@g_d=H*QbQKWQBVW2<J
z#m0wL#>}hjVK5o~9*TW$(bE?(s+>f=<l_zesIBp??q(fwrM6_z+@`*f>fpte8;whQ
z?%*um{b<K^<P~@8ICs3`EI2>fdJ*1uN~6Af-)jis4B##H47z5seya|&$(aeR`p(r>
zybzaj?u1Ke>R-pIb_QC{KFz96>`AT25qcbMyw`DJ)YaDeM;+yYr$3aY{;#~<!vFBp
zRTjB(r)nx3!+rW=X{!F8Xl3{6|JA@(H}B9UhLBX6EXLL=0W`A@t~>G-XR}+Dpk0Yx
z?tn_y0Luw^rwX)gTVdZx79J#rTU}8aE$%4%*7+8E>wJsvP<|W&pQ>dDsEt)y=YPB;
zhQy!P%mNLjy@Ovo+X2V92hit#Y)6e(CfHfe)3i3azizP|FTiO={?}g8j_!F(OOvy~
z!Z7cJtKpk$X;PxkD-p1Fo?i+v9IR^7U=~cFVto~{<C&Z8imSe$_^Cy-1~5L4U}T4X
z6-e8BVOcTWHHx=vDHAl46UH|ECtjva&YJ!ZG)5lT^bA28ekeE$lQIatYg`H!%zo=W
zfy6M`NERig)AZV?OtY-NViSG#o!gnppd7_kc9YR{$zFHdW2)0DF&0zGHXSuSP>kSW
z!g7($4N0q;%n1_bZRgJ!>|pTdf^pw4ZSSi#@PEH+8bQhzLi0a!Wc4!YWe4P&xctkC
z1^f|~{rY~bI1#(C88#tZn7GvcY^0QKiBq}$raD-$6`tMpF_9VFeE-8WBY6pkIG^|F
ztNzXU*P!gxm*x%|m|P!?h+7TC)afQZz4anr3~$Yxz6EB(??6AwXBd~#P8kEFNpAVq
zN$*+i?=k*CQcfaKol#bL$32aqJ*pJANCQd3Az8LZ%E@>$GM8_qv!nzRE%Q_#tf60`
zdelhLWW)I(@>n43|FQJuaY?7|_i$6wv`sbTQfXzmWNPY^TbasK?ndSUCN4~t8;Xwm
zE;H?FYHDaoO1Uedxd7rurKYK9F1R6*=8`CoD<Z<@clUjsKYN)A@V@WsT<1F1IkO>m
zf++^~V#agonbiB4=ktZK<*%v*#n#O-g;`b7N6syrAQOE!rw=#2BSpDQP0*si_WYHx
zu#2{xtskFJ9L*M^-Q<pIDtcx!Lt|)iT_W9h2igzfL8POrL3Ne?@yKiPV2zo*wc9lc
z(vRl6JdEF~6evW1lX}059WjPpe2~w;TV+95N`+Q>Hc64V&$hL65h+Q;z(ucu(Qkw6
z#}~SOBoFsQjeFLO4{RbPUvyArnc%%RJy)$2Ap6ZeJVhFY%nF{L7tGbaT{b>c8jHTu
zftQ#-zQP`20#!F2xB3I^Vl!kr7Cc`2l$`2^vL$PNRKNaK4RREfP?K8LXL)SXKHWqy
zI!d&5_#3e@O6T#bp1J3C+tN$oEwAfGRvgSOr>4Kyza#!n>}VvyXu%1|*9;Cg;V=i{
zR`&rWD2Xk|#6q9$vUS<7D~c;y4M5TRX)}614+oqSdt+tH1q_I+JNx^#ZxKPaIBXkI
zne}6AAaczUFlbdIFgfxa(2aiSV&XQS8LgV!Rk@MD6B9AmsHKqiTSVH6)LCJYpoK(&
z4pes^#8DR%jtEJEn8`r#&ZglY_w420y+#1k0$A*Rl|DWIbOKTnw@26d_QbaA$`X%(
zpOYppL2kgC4L$%LOXV&aIN9o}AjkG4$3Nl85~t}moRRG@usm3>tawmz0nqNZK07u2
z5j0&&Tf{k-oGs>JqCuV0g_otY#=QO|0gTY!6NZf(R%3N-1s;;Hxub{kns2nx3|jAl
zs;NB>C*N=GQ!|}d|Bg8b1|~L=U9P`+H1C-Li}n^nkgs}wPWVrU9Us4%^f*xXo!wjf
z15A_>)4L@Nj^i^&U0BxXVlLe-GB7!wL0c$N?(*b<31HhKpn&!KBGpFyz7w{s8L1Tt
zo4G*FFcMC*-TgW;QConhiOB^oZ;AhCe=omwvwUdvQ&~XDGoli@^yGFrIJ9=Cw9i2@
zjU|(A$wIl(r65~}U2dxvB*Tj<RoSxa-iGt+UJ#wISx_$bJyk$djORh|y>+TdJvPXx
z@y2p>&D%G;LJ;{Lcd(cw6ypWrghSwu8lny?@fg;Ki9Z{U%qjjiFci6wHCON^r5q5{
zN7<VPLw0sAbqeg6Af`9Ayk~pF4ze8u7_~!Ry`d~YIGM{xHl~+U_qHD$U)*^18AK0P
zX5G=)(1eKji&noqqZk~y#b3Q4a2dxFI^<nl+WJUYbBIN^-T-q}T0C=((g<#WWOwIj
zobOSNbA*JO)9ik^2^WP~D4yG1?ApHN<)`t)Nr>=btvDGze7<ggzI+m>r$y_2SMw`6
zDaV9<*LDBK4*hMXUE@?`wHZ}JDrm>3$BrBn(Tbwh$o?yBfPm3F0dM|z)w4#@MMh?I
zC;Q=!XlTgWIeFiXpN*Ow#}xfk27mu`WLG3)pprI;nn@T4-M16Rv;xBEdu^DNJ(<s*
zZpTo>IwhNr<wdenv_^-a-wz*DSSvwrY`a}4k3R+aRpja$OPx~=yg8x-o&+?D)>K!*
zgXM-vZ{C;_#(U<gw0^UA<_!AZ%u4e+uII*!yur}+D5FAujQ~9MzuWiDO>45pkpg<i
zR{h<uRr)*y(BMo5(WwSgaxatC=qkw<Rh}ZFC)nY&4^RPfw;OQOTyR{@Bw!{h6T#Eh
zMrKQPIfu)BnP4__;j+T+P@7%$rXAz)5Q~(Cv?&h&k(7!Uy^E?9$tN)Y{gO~n`vXih
z7}&egebhck5$P@v0zw>5{%?mOfYimw*4oO4aCQ)WVkpjCJ4+I+2i)iBws|CS$;Hx)
zo|SE;#@ke}J-RabfVtaqM!(B;zlyicodA6#73NNyi0dj{|7X-6-LX}kdV}JU>&|jN
z)kSP5!i!<HQ;Q^0GqX0t%1t`rVp;WQCugCS$GCE<V?1R=6Jc-#+KENzCbs}WQpf4u
zl_P$(8Q^u+B7{N>y`3Mwvs>*=-u{l%5`)l@{;P_oi`KGa{x<f!7NOU%RUZz{h%J3V
zn3)nZn&t4Y*Nxpq!Ull#WPEg;hg1zD2Y5l*@AS+<-&`LejlLzacw_!Qh3hqhz&ka`
z(>7R;T1`rJ#RkURN(_J3g*Yga@a7j-AsNa2l`2tjBL$Rq2i0)SlYed->zVxK`&6QM
znULIZ8*pP$rDRRoY(5z7wRJ6u=ZeQ#PS-amz;*)KqtHP+UVMcuR?H5@Bo<%IIi9|k
zJ|c4L-h3w_6efKboHTS5w~QOJKeAAMsk`V#v~vXShGxs#rQEm6qd95wdCj+gG)z$>
zqK#F~-}o{=tjjh&bxh28tNL(eFjSBp(|LbI63B8we~mMo4IKfvAI`qSE3$t%5Mg0-
zuIjBz>oC+?V|?NxE^CwUWZ1u;X1R9=N|@Ks{^nkNI@J(WrQON?VK`^xJOzLV#lg<o
zRx^B?B>jfr*r88#W>_2S?Gx=xv|BX;+{NE^2)#0^@3GwK^7ldq$u0-$SJvek=jC5?
zV!||iEHFxK&p-sja44RWm-pIE_vWp|R``JpHFs^%9QisL>^^;nI8lRj5i!2>osJI^
zfw<%p1QWZ{q1xv4!0;0%`JBh?H_c4VG!9-=Dnsdt)-|scnic^jbhlOFbH{%N|40{i
zJt)rNIqFsDt0b98zigAXGuyTQCuwRXZT}0c13=6jYHGg4|H>w+k<J+6%%r8k|JdQN
z2{K3kK+h?W;?|fE;?IKffDz4=nsbINN%I~iI-HtR0p?Y|fb*y+knoVtP`yeS{=@jn
zl2u`B!~Z9^D6IN*0F*?(|HF%1byPs)iInfF+Rx@C=Z+l!Gy!JKE$WSEeL>+UWaeU!
zWC^mR)ie>eH7S4Ge)Ayn<D?^!H;f8iKsdc_2O-)x1-ho6t;by4l^@*_(?!t#6^G5Z
zOGD1RUFC^qquH&1xs!hFLVE&PaKABS(Svx}*C@cYNQM97A-Kqo8m<IPIc@6Eznm=;
z3qx2{&;8t61q>2wqAJ5QP0nY8CaZ)t_qso=$-Xy61@=-8eX(Px9(bNx%SarZoW0W@
zt6{~ye#A@T*+{g*DNR~}1l78%I?lDzUW%Y(NNQ9hdX>?(GE57NiWid_n7UU*hMBB`
z8cPvxuF=BanFIQ4Bcz6bz%M2Blc5*z^O{S>Z5BQI&m}ykBDi=B*8||i{=(z0PZUY7
zJ`!%AQDw6lU0j*~y{&hqDaBN>e&wii93A#0uS8*4%GE_vNu+)`LUX>mx#9dC{HGd=
zr$myb-MV~M*vefq7+0W?zszWVw1sZQeN4YOsG%*oTy=H%R#ikX=TPQ|ww%zHgxO!#
zsPRY-`~09|r@*$EEx>R_#5qfl>Vknf7h;*tjUZp?<aO28PPtY_88*%A5Iyu*WV%>a
zlw^=S15ZWOhSWtnDH!9tT}ndpvxj}<T*IRupe|k|RRVS*jL@P?WqF3uo8vtzH051j
zBvbtC3d7HcJ;AXJnx{ADp}T04(!|iJ`d|)yEVOZrl<17ky_bdwXY|?ZEF$F7dYGAY
z7fABB4jX+M)yGMUs1=Ww#KYA*$s#6<aLeW|C0&lPbI#{F*3L=B+!OQFZF;}Sa%VC1
zuCz5fJbU(2o;(FWlRWNrS+CQ5SnIRR>^0}WA9jodglB=7bY<TC3~iS8@xFm-Wucy$
zoe2z%YI%AmE~S%0lvJUDV1YB#I4jA}vs!iTL>bskp8qI_@V>9zN4QvW1>9c$IR^jc
zl57Qfl>LK+5JOD!ZL`RJKf!GSR>ro*mp4meb90Ftlj5^e3!QjS;2IHIU0%v#wX=ad
z`0cdo5Rnbyw4c+^Qw5dt3h`Nd6>V!mTIZ*Fq1tX^$*lTc1FD}_NP1<sFO8U;t$_hu
zqNYv;q3lN_=*2YoqHfn}vM0$jDq~hisQmH9>r2s{T$2^y%i^0h(c-pXW?SL{^*)-B
zRfy?CjevP3#Cc$5FiexL&#%*=i0VuKZ*PEL3zW{d&6KWa2Sb|tO6vc1AT_oL^d%|D
zxg(enGvG-hIo~vRblS10mYN0+6XyS8;t$`Qi+?&3S@ICtgv14ddwTyQ{Bjy2viIY>
z9jV6Uj=MQrNET~6$@(}>$r1UVV@hVDO(kditYRONStO@9HrEc4Fz3kHfNaO(p1Utu
zk*b|qGb8llk7o`?x?jOzx+bUVuVM}^?!_UYR3LHEXrV4Aj+?G_d#{uOFPB=bQDFH^
zyf1Yi{eV80Z8o^-Br2#>jD9U?Fgv{0S1uW!aCC02*XP@KH?<sj-1it|tBJU~ZovFY
z@i3CVAE;Fx)!bOs#7iJhlMAonn4mwf`+TbMMuri`_IE$z+QI+(osGl(ynv=X8<&Z>
zl`;+jw=G7=@=cLJ9C(Wq%IDidKuQw$3AWhKyFFWZ@p<yYSrV|T$(9+2bfr&qyO4)K
zrlgmsyeys3WMl<Eba*THMnYx|adAOV`T6&QiWR7u^^RD0hyXTR{BlI6)~L#{IYr{^
z>4dr1vcYQ^VjoW3%p0eObrJoH3xzq0efZC;RV~Ip>Up`|Gn4Ha?l+DS;<(e#u91R<
z(r>km1B9Qz;EN+r{Xc?!qUy<-ume%&hO|y;8?F1EXqx<u(>zs@(uzo&n?qMuO;!l?
z48?^}hi?Vev-u7x*o-bTUb~A%^h!Ol;2llun?!l?pIyl7?~nJIs36d!h4S#~p4p?5
zl#>E|morfMoa$^&zmnKVL`u|KcN7nQ645$@4B!o)v?tVy3T4Kl93Ituv9@tI=2Dw8
zdjx#P3JL0?Z>SN+&%}jPG7;9PQiaJRSW9$a4liqt=hq3N1ibCIeu(2BdHlZ}zf|~9
zXP{^MPsvc?I8Mvv4>oX4FfvObhNrLItRKjw)e$KHLZ`TUw=Uh<Fg#g+zS9s#-%=`X
zuw>G#GcB5_S@V_v)*R5Ydq*481nt2fw<VBojDR}a)Jodu)(4}<MMCh~^A>2E;Z;^s
zqxaY>KufL)pb8IMsMNIE=p4}-Z7&_&hxxX`l<ZvZWi>xqyg<~wz-&Q$ikPo=oc$hj
z$+v%On-*1mM&mj#7RGM0%vJz_8@&2TGVLJf0LM=&)+DrWD6iO$ql-b;e%3{OwQr{(
zkn!0D0Qmlx@P&i~Vtq`rYa~A5lyta(#-ky~w+%j6g%!wrL@9y#=qDM3?;YY)WW>U`
zz`~I;@=OuAq(R%7zrD~ZKFyZY!|1VrUn*%p!nC`(W79<f!F+{{xV>%}pEdeZf3hgd
z34;lfIvI_fKwD!Hx>X;5?mH~=sW3gG9kX(#i_Kzge}6W$T+pU@NGrE|DkGK_T;}rH
z)sRu$I{bXg@>Hld_$`3~%oA#IxZ2V6u@?RhK=8Q8jyviseCMqONO;@u)3t#cS4$F*
zp_tayx#|+nt0&jEeFair((B0P!{b{(R<sOq;4m+*W_=KNSUE+1kBsb_?rbc&s*C&~
z#~4(GH891q6=(&q)An!VwQ31KlfM9M%G%K@CVkBcygF<VMi#Jg-svN=<FqE$;++v%
zNQBs+!cTZ2Kx)32F_y;sY@~9;Bb15Ie;Tav4>^!@B(o8>tAV9)g>dX<<~JTg%BeDb
z)*hngW}I|S^?y5H2oqV$_;CO_qvE+<6PWT6U-;kz=g5V_6u$t}_X6r;XbQ*TJ~GV&
z@%W15AW7@9B9yRd|HuP79t^6mY&7cHX)*V<b%tsWzSTLx@O6?v;#T*1VB#pXQFGgO
zr44&*qXL}A22$7OC`_aX9S>9oCYm~Sp%cAJZ2oXS!FQiGDJ{khJwin8lZXjYRuR(;
zP-irW+!(YB(E%&N^}m+X23>MhsXfO)6}U7^U*B-S@wHhMzmI5odW8-~|58XdQ-0Z|
zmrTFl{9Cy#g<Bm!IKwNaK$e$f)V6;gNL@bC?yj(z?FQsHL*1BWGqB(@5sPmdVuq}a
z9J|5!8#;{8vQf8BT_0lR4mIQ;I-n&*<Tfz;xWt7Qvlli;hcPjtp$5-pQBfgbzb=Fe
z<Jwv`Qn9C1Ek`!7e&6rj(#k>WOfBmv6MEH%JyAw8lzOiSFXpOd^qz+^tYRiv+?ZK!
z(7!Gp6GH(vs(tsiwwuADlJqgn0fSW~rT~R<);NBhJ2{U$GggWg*-EZBHrdI&!h@T&
z+tB5q4rea`1oqOG?+Y$AD8+X5i#Z>RJy65XN&8r6K)w8Jcbj=?_#cIh-7?Qx&bfvg
znFOuCbOe*6>16jQnU+O8vr47~y42qkN<7U^fA?f=oAtXDgkkK{ezf~2?0iN{J|@}>
zvF-=mch@$vw~q&C4kehrw_54zk;emOq^x^fA)z#3ZUr9#zVt6FlKj6Nzy8?)@M?xk
z^hDq!iLu)U6>OcK(PUj{*|*YwVM~LNF&d8nTl-}@kc~E}>2>F3<I*vGV0%CPeD*B!
z0$W?82LHoh5AX&)5cI3QK;9#JCN*%`G4wPt%<#>Zfb%;Ockeh~k_h}%f3p#&%jF=c
zw};=2W&#|3arfDx{D1#{xPJRj-JgPnmvs{ZzxWi=HFp>Q_f`8{rN#Z%%vGOZzOg00
zl5+RZQAr4sGe6<_=FwqKaNiUZMUAFD->N7Ov**r2jJ>I%^;m_xQiX37XQK7?t)+zh
z9~R(SUUc7AfZxnT0EWe^D$Y6)mnVC-!KiBb8mKQ~@Q@Dv6g{7;x?)RnPhD1(+z<c|
zfAg*cHos4>Sgf$`vGyY-_-(0?Knc1@8y<fARXl_Q!afu2byAUWvT~g2k56tA*{7T2
zR(G4J8zSNj9;QMfw~l$-NBfA`pwqCCH=|jS$1UfHZ&&7oO~Vp(=6-JYKhq3Wk`8_|
z?<b>6`?|<@H(Zh1;+YYO;my^54pfC+<9VApE5n3w1Y6Ul96qdu^q*9ZuRbv}#w-Ls
zCTgr|62uBW(>8sf`Kh?g(z?`6Qlh4aT*(^RRu{7y-4Y_MXu%_opBwL`4!+TDa5N9x
zAoy>yqw_NlU({bJeJQ18Rj@NoYtnR_2|!0!dbRD7@$qkcwGj^^eyqz33+>HT8Ujk*
zNVwih)*DZZAD4_}#Fi%OV2%!_A7^fwtg9u%Bq+PnY}}^b9fFT{NZ<Co5~1OeJ)tB^
z8Pf*vL4Dux1@u*NiA>Lh^3oPK7|kbgjVz>dGOI3BB#<GjN<M0ybYOQ%ms=-}Omdxy
z9DN1$8Z2@c&mLMF!*5?DGeU+*T;kZ8e6fT#Ty;g`d&J~;#uy~~?mry7`p|8gvrwD~
zV*JO1hF0476%2!5*)v4WF&7c_vJEsp*2cpqwR3jWM>CRnX8A585=Xa;Y?yjGp@<Q1
z!UWBZSa8E^gtC`lj_+_Hm}Gvd;d`iV^<zUa`qheQf20RHVtczrg8eN*8Ah4D8l|~?
zHIU{_4`)Y+yFS=bWulH_QOODp*v6^;A!m;MXB1vF6Oe)gSV*SH{6OiX8<D|5M|h?f
zH{v!EW*C-N*ed}-)a69++n)ni8K|bM)iu@N*EEb|w{uFxq#9;xL9B5Lxn3q&zwBHW
zjcxx{GAW{A!@f+ctlB;>DF!Ai^%LL;d??Vk=fJu^(*}C)O^w3kbIM_V<I{8Rp+;_T
z8ks1b(6>mx=-9q%g+&uj`6lBuTChL(1f@uv9<U;exb~v^mmfG6-pIYLZTI_m6ilC4
z<+*r8mRr?>6s{saVtWmtzVwII<`+!yIOhGLyrnQK258)ilU(8r<O3>j;;r`secMnj
z1n7jc9mx0}y#*cT34#CcL{3}{*WIsCVH$BD#;pgLwOn;=834rm2`xH%LBl=lt`Y{t
z{CNT^vtRqH(eHnQ#nD*6VWP&GsgB0jJvimoPvNZ$3SpqRv5ASCw)o!;%ZctacaqUU
zfQ3>(=X}!*Oo9hl)J;X0ZB$mZMT8&qB|AM^ApH$<o6N)hM;se}8+aBH+ug`o9;Q+<
z!ya~e123TkSNdvW9>Yi{Syw<E_KAMLW;Rf^zK_fyLOL0r#`=_<e&6ULPXojp?R3Mt
zyfrFF`oIBUy3>8t;*wPN++rb=08#WdrAEMhhIHc2>&hQM>fL=}1!>ku#Q*hU=uc*0
z%@RvIZ2f83i-Im`pD{xpFkm4w_>M77F{Z}pl%|jzkif96-yB(SdVE|4bZ(Y9!V#rX
zKe^m)&}p#gs-iw<eUvhG9@xwX{EW8wZq*HlSH5w(=%^RB*h>yU=IRLw^AwSE6j#!2
zAnlR&_6@(zKyWmxFOa7yUcT9WRl5C6OAICmP;^L$_|Z>amO_t$i}QSYbh4ryL<CAp
zti5m%xOF&4HcNLmP=44Sm&WWi8-ttSuVCgA!9^eS^Q-oRDC836+gcQ4$u45_LXt@=
zX0`qN>NoHwtHGL5H_op>Mho0OtX>dSgVLg~9iKbb4qW--%cC^JT}DNcS%ovg%<WMc
z=pqFyZQNmjf<#mv4^UHZstSf`(P`q@mMI<gx!Fb3wT?3Om{Xm|%1Q+90W`$f1i;Op
z?;?OCDK=P>XBeGATiL~Zf-o1pi1#YiDxSw1$<Q&FWF^i^dTFgK8DI)~_vcQ%dzV7j
zLjZ*@j<kQvMM;}Mtv1TJNY?&p?Kb1+Io8)qv7ElpMSRlf$PDJ)T9g8RNF;~pe9Beb
z?r`(`W^CT&whTSQ-^eE#Y-SOy1T7!g043vv3jF>V15s%1e%mD(ZaL=ScdKP32g!MV
zmsNsXYFlHo&Gk67r3(xfVA${A?l(gbg+@Weg0d}=_N-i$onH^SJ*dV_Bqb3MJf=J`
zRG^H~q_wO~&1<u=7mPGjzbrlRO-LO_27TXGPHeIwk1+#9v2ZVfQG~s)>~JPsK*)J`
zyYb<sKogBX{W%$%UOZf(l6771aOnHnoRw}twJ4#krZu`8ZbCV?SOSixS3}H!eP<#(
zg;+xRu<iD(BBTH%eNxveviwDvU6;1Gzt1=EPg@K_XP_&o$o<0$FvN(hznNhUL#=O-
zb`T}dg!V;u3~4GKI}!-2AIG0w1!QQEMM%U>8!2lXndmUlmTFDT=CZpba$GRp-dqPp
z+%IdIAB?N|^lyyVm6(VeF?=}epl{2g5!IRUb(L01-|fWmm_zrpY`2W9^4-NL>++lT
z(WKq{?HEStVT9&f(NPKu&T`Wg0P1(bOlwV84j9t#JZl2ivA~PNPi&c&3O^e;*5XzA
z1pjN_Y6;!xmy%*edC*^lT?^>n71Xa|6;DEXuz$*zo2KXs%Z+msuAWRI#4^?Ray9n9
zfQpE6Cly+GpP1IAKAAEAZU!JvJ23lYCI5C^$_k@@pkD3BTWo*J%7{#)^TcAoRl@Hf
z+q(Y_hS<24Tr&#0wG40pdV^8NnuUigw6`}<mi44IokN}YN4im}UR6Mg=6K{VJ`Cb?
z958T`rNkC-P+SJ*Ot%jv#_TJ~RH3=V9Y0kjGB0@(85_`#-T<$S^x-!Cl2e}VLkG06
z+_=Q&n1}!r))lTyunFKbL9^aczdRbO;uWiJa1at`5MN?b5xWKJc!}2^E{(mY96k<f
zrgy1kQ|2m8tZ{><Rm~Z0S)xYu1FAGiQs*i~9mq2CTh1C(W92k8`%I6KoeX@KN5a98
zf^A!zlyVW$&dsLOkFLumF38S%u{Tf{DNc=ljg2o^_?)0RK$VF!Oi+3|fI3)P{7zVL
z7qZlE6(}P3q($$RwmV<UyB>Yoz=yNa*1f9f#9$RRO!6CpM=*g?mfYN7Wm}aN&d-8R
zlOEN|trQ**AdDHw`XqB^U60M5#XQYE65OoHo-+KEI@*t<%T;w#yeF&F63rg>GkFzB
z0zXP>yF?*L;#Nh$yw_0wOnGaQQO4ke9~o_KO1t@-a-fkHH~v89sn9Q@etAO51`JFG
zb^TU4sKR#L$jMPm_iMI*75*i>_+?&+ie(HR>k~#T!#t>8{q{_rH%1c+;P*HG^Y>3z
z8ASHLMa;!pp%%5?)>x_6D#7?4udB8<A!5O8T5?1j^YC_jN$%maT#u83iyAi=5E6P8
z`*vl6JkBVaAlx}$AkEof_g8`R{vB4fpKlLkh`XMUp0rtpN!!7HF*{TAW+%?vr))=w
zgU_2C{bnkFjV>P8k)NLV@2<Z98GTUKp|ot5R2yU&%q({zIv$E)evzp^$>^^(&M##2
zzXSR?UT5)Al^{qxL1NgTo`KI@Jbr5Zg!hev;*q5S+onPFs(Iwi?x~0r<Aq=%DIPuD
z68gi7y$M|-0!<}XZF_O?5@*L2w|oZLm?vw3Y_jN~9i`29fE&5W2aHZX#%--tC2U8Q
z3nbJM3Ee#aA73ta#P(i@o!Jo=u8<Z^%2r@w1b()5`xPmmSQ`!3Ja#iqOk4B*$cvSO
zG|%8?{940y(Jbqbygv8&AMXsd6$>J^S0&i5S?T8o^lP_4`l!p)Mq2yx%`|JJY-EU-
zpVO%D3$r3my(X}EmY^4exn%vEt;Jc~-WN}fS5CsPvJsHpvRKQhG;W?p{yD%XiaGx<
zYlBVr0u;8rW6NZ`{LuOYO*8tCSGXRY&nr15Gy&;^Y#*v^qk(vxZX0mFUg#!;w!M6(
zj!%^!eq%%zZ^Ya7;6XmX8wp50Bh}VoXio7nTXMll3SX@gJ`D-W3!@ABR)}P_An$cb
z@Ap1f@8f$?ZH8u~F0)|KH&1j$*CuPd;##3Irq4T2kVkF`3Q|Tm+U%K3H>*6T(yY({
zZTuD1d)Vc{`LM;#H=q%$MI+Wm2GGR=M<)%KCtsA4$5+wz<2R;d6Iy(gUl`20Rd#>D
zfyK^l*Dw9ehq5&aEzp>QcwBzhv*C9<Fq#ssm!<PQLNq!p#9iFfdC{AZ%V}0xZ~q|z
zo*(sU{L;|JK$lZ8Zz`LQe947bOtSxKbO9C%RQ}JZvX){R*Tr|@p1Zd+^<{KKVDLn9
z3?H%Og844<@PzPa-TI!iZH=R}Z3#v4pYuh)@kL>C=lTk|>k5+zdwe3eW2>5urtPg&
zBHiz~k1dXE#~R;_J2a{RZREjTf*Si3RxWs#?;jx|VIk}iw=pYa&<ZsX+>Xbr`b3SD
z{1_=^G8?@qarhW?$X_~f<6|+uA)6iJ-}hhTR%XSQJbi2O5MzRixUj)A>eI}cyUEze
z-G+sav%4ZdeD<{&tD5STiiOw5Y96kuLD*&Y(y(fCELtLNmMir02?(xnHi*N|RWd(V
z1YpByT+N{LRF;$N6qoP@TvKzYbI8&X<UbD#w!<+4x}YkZ3TXfpE`j)SEw<O7*4?Hh
zB0NyQaq%6OFT}>Lp&O`^^KOs_9U<Qw9RjuZLLqY2J+MT^u)>8lpAXC&xLUE!r&bJE
zJ{to(G@VL^$+f&v2;PjQyNH-{)Liz{nzB)(4ED5gm^V{YCxJD;1<qHv4g6I)?7wet
zM_vqES#p-#h@EZdzc8OoOL#r}p$WO<n0#SiKw*8r?AS7JURp$a8d{*=T3Y2xxqsHG
z`-Y**Jr?@ORC-~W*7e_T^^1a(Fwx~XlSlebbXD+{J}==t$Mqt{cV~@<#YDmMDI&f1
zqrbCMVjvH6Kg+TBMp?{lJ(*J^74$tq^AM!AuEZNNB_w=Whh9gUug_;mcG6ffBb#iy
zG`9;Q(LjFZv`4Abnt8ysEZKKW-IexZXoo#@a&5`U&+Fn}yN{RHdldcYgHQ`H*Ko9a
z`NqyxLG#z=(K~OOc$e)couIsVe_pYu{a4rvv&RJoK=gd^u6V@7TkShQ5Pi-~hh_8g
z2cCmG`spm`-Jd*OS@by!-FMWr{~LQ=x=rS?b)k)ljVIV2Yr)I4H_n&1G$VpU<#g5`
zUKRnsxXtRqMS(m1*w#4t+e|TY*Qx3IqM-?RK}QS0%D)pwdqVtE-M_%|rc#;YGd|n>
zm1`kd;P{)q#RREbiD_pgi;~mQ%$Gc^BGncigXo5NyM0j_LUK1CiznheCF>#frk@d8
z`V^G{q5XFMK#=`_S(#qBYJb6f3nyp=iBNKQt-N3M1xs}t-LeXk*ZeZc4HafKabB{n
zaKb<4ztlBMmjAdFUgUQn%Sy+pF`{c-rsJXRSb#z>6o_Og2zS|GO_M$i;~sTp%OXTC
z7-~K`VZwZc;Wy0TV!zc?|M$Ngdp-Y!mal3WAv9BY$9TlRq)sNU0bEiwRc`K!!9(P+
z+i<V@-}t2K>dto9)A=$a;|KS&I<_>11&`}CD5g!`B6h3uZ<97J$BqV|7S?<UZ5+v2
zv+0JM{FLaPk$to|ghgB`8IctGqCtDI<kbu&n?N!?WFw`T&JG(W{sr@-Ml~hhHe+t`
zCptg5aX>x*rhb_6F`1NCW4fY~U(p9@67jMkOTeBh3g1xweC%i##Na14dV~EQuii2T
zP-ab~$C!4HsH{4_idB&Nc6=^td^~UiUe7hfw0%Sh2yf0=W`wAOWCaT;w-}GTL(yi=
zSg7XN0=>@A4Arf2LWu7?Xfn7fOdjJ6ChXRs{C+_kM>8_z(4fWcN*)yD#%_mk6SK;i
zt^sN}0aa96ipi;O`MmbS>w&`LAZZs>fT_KG7`q?{TyY$oocEq;zF1jz2hTlEBKa1O
zY8u2fvaH*iTGOo1y;zok)3uGHKz>n-^xrQXEH|6{;wP=eH<vwA8$%A>Hc=1?G-ov2
z4v&K?^d-%QEZKr5BSV8r(Ak}?o5q#+5R@g2SLDe#EuBt3Ixm8$u8hUQt4u{uieR7=
z)ndlVXiLH66pVeiI@%ItQW!oTR%anjGcyaEQ)xIigf2LdUqt-NXB9G9b#ZwraMQ{J
zIBOy25hd*rWx(1CFWgVn46(!6Gu)%tJ%QQ*+*g%%G<3qKIgc$SMU4att}J_2<Kq5G
zIve;R*~#?2M*3X`CY@Jgd#dVOFfWTlW)z_{OU_g-mG1#1fW<NO;k2p9nIYn^BkMFj
z8$|`V({)$=3-OQVOa23?m5?r{xaqzF2uxr;f~kB&s7CczFTWHS+$}QbS_z*BU^R|E
zKKS3z<<*EiB8;HjfJ>%}|F;9|H#I{(zUVG<Ar#NDRxu=}ZQm(^Hn-5_vi<HmQo-#V
zy1{;TV{R1(K2b?=adtN0aV9I0kG6_TScAZjc$)N}`ZbI7KA=dt?m_8))0wziZ}ygy
zqI@}W{r+kIRXUylrU}O#%IX~dm9s|N)&1qx|905990LV)1w)1Zoz+XR3P-aX*N?mu
z(i-7t+P7hCf$#4*i2*+J9h#Z|P3`z;x=?V?Ho?F;$))t=Ks`0(81g|>zFFe2K!JU2
zL0zsQba)VquogaVV^~EC&V2{=T_r~!_y1J1H@GlWBl6rKun2*ZZ0bR|S`j>vE?e-S
z3b7})28hB?I$*LeR(j{WRx$r_xggPq|M82};UwKMZ;J;qRC8bF%h&Qq>$^V@i_`XO
z-{eAuflU-*c_a*?0grvB-A6it`6?Y}7jXskP1TN7pfi2Hnm$b!u`q|HXlF;QR~f6-
zxRHh;ANe<9U3leHE0s=HXIZYbPcP(L^=TZuIWctWJCP~LCf-jRXa?M44DeYaWrK#I
zq`Ht|lCpWnG13-{ck;Z2PERaKG2Uhy*jh5xQ|Q!p^O0(c#)OIN>qr=2_4;(S3G;re
z8?rV5WddA?!2qdssn_U!+?t>J<^wc*q?<;5VwEL!<>Wahtq_sBgwW}3ZO9xF7dUd#
z>8z);U_c1}(o};9^Q-yMl2yt?A$?uYBeEid-lYCKBlQjOO>Tdy&X{?&+*N)A>dCAU
z#gr-V-O|nYT!=6p6lVQSoHG!l_%=LpPHcQ_m+q;WUNPp1wm|eWX`+upevll};b}jO
ztdp0zNWG6(1pfHK%CMKLvm40L?%bw}vVln>P)-)dkWxKBe^Z6O7L4-UbrPuq`;Ny<
zib$FFyiLQ2XK+Vk%MVTGJ+VmmN>2wCQh}LNwR=8;sC*~8>5#J`Lt@CsbC?!v%M--w
z+}_lnkV+MPXGJ5%`nzJDF}^vJ1#hn*@W!r@;kKF5Wi>7`y<=T>j(ak~RNazAeVN2g
zC87=V^wpRIr1#b*VYy%<HU@YV0V_W2>$CR*?I}79S04H*mr<p_K(xf7$h{%pj^A6u
z`@cx;+vZgHue895E|0#V*J7Int2_tN8JfA-_g4+#WnSmV7B@or^BQL~;r1XT<7k9;
z+{rM+?OFKc%WKIu<Cy!(`h9XraC4duxu~^YFPFGvuB4&hve|*UZBcO@xwI!F-*_(W
zr-IS^;DI}1)o;yUmERjNGJj@PCWfAcvQE}NM<cohF3YnH@y0b*mS7cElgyo}EQigx
z`XI5;@7W8l@*oRc<(^{+>4aCK!$U6u02APScZFZ+4t2TeW;1BF<Qb*+`;SZ3crJX5
zf<kI}CV9}h7<T5GuRa(sx_!MVl+5$^*$lp>OZqwN5f|_7mCB)Z!>iUIP7!;%KKb9a
ztb*I`GZ1&xqsyk55zE8zbUAgp%zzq%dg~8Mz&f9<JYZZVScs=fSlWLlo79P9(g&am
zz~cPLiq$E_1PR!1i{G!IHQ60EWJBX$VsOK`_JZ39n5P2FzcPL9`<#^!u#;6Gy*2bX
znjkypEt(X^mD7m(E&-2Atz#_pRJ>#Kq^i!U-u9IeJ;~dn+ROUmTUz6L*OFxvZL#+d
zE0CvK_YMr@X7EPhrkn2)Llc}f$=r%^)PR~#WmL&CZKfTAr{X=)NG9HOH5nrOt<%CO
z3&xv_ua#Z@a=ApKre=Sn^jH0&^JO@#GrJ9OIlFIqSN^AL`24onc_Ov*-K%`-$Wr`V
zbV&43$|*U=e;v|HtY4@&{!yZ6WdE`(+<vKK$W;FPn8Q-xn3G4qjhcVe(J%e;-`_~o
zcYIagsdbxrs7v2*v_Lxeac9s?#fq23M;sJ0l&-<=$=r$CBAq(&oAU!mUe#ss$o6mL
z7F5*dtc#A&BRvk!V%LK@KEnz`qVh3yhu|+?LjJJt<ZQIS`*Luq3gK@i>9EeTxDzN#
z5DiGWa;1Ey2d>4lG!gb_g5<d$?B$r)snvN}{pJvMJN-8&p<mg`H&hqx4^>tu%TD7?
zsjc1kxoW*fjS6D7@P(6d&#jD*(M>BKlrr6FTlLv|bvaH&e_dbR9+twghU2)NOg2$?
zs{cr>-_<hb48ERYQ_}+l>|lsqSp7qL3Q%Dal9mrX8eS>z7y9)P&DwMS$Zb#DxPlBW
z01qS0E#Reau%GZ>%|ybgQ%phZILgV0k=A6OoCob(yj=vnfKevG26+x8)ggv`ho7})
zP?jBQTsuzEFlfgg+sV?mD)Aa|<2iG^dnQF2Bcb|NRH?OS_0LByZ8I*Uu5c?fwZ458
zLY`1g63)$5)?Y2iamkJdsj<ejEW)gmS%_o4bNO0btuN}F4q;z*JzG^$DuBO^ZZmP}
z77&z^*WI0!p7M(4DtPoL=w~gsw{70DlCggh85u>HIc|LdTBC~>TTnWr`VT4ja<727
zt?BCZc27o(Iwp)jPSzheTM;|{k_5}DmzL-l;)d~On5M4HAhgA8CP9CR<;YWQR3rat
zCfVRHA{phojt+P2%cj<?UGZb>-;gZKqZ8>?#~$$+5~n8(ZBWu>q0ff2NUkDWsW8Pw
zas*sa%`I}#k?y?vq6Igft7XGaLxDG#@nfxajL$UY)rZ>t^+gSg`tXVjaw9`8WJz)s
zC|Ek3X%obEzKn(kq_lR!4BVXm)cnYLr!%7%+AV2!s#|s^25AlBBtq+<VNJ$tW_`>>
zoo@A#AEc1gt934kq~11Ei;_0g>#>u#u(WdfTBS=I3+KcSt+-!1oXz&Q*$t~gSGBhY
z2hd>qE<$-7dU}=@TJM!Di8!I_c=~u);9*4OA~{i+<N+OB86%wj_J0dY%=-ODt5vU7
zo~Gu9Dbjvm-V^L~66|Xv8+`(TuhC0P&Qq%D-KlRhC=f6?T`MsP7gS%}E+@K59?8`G
zZ$}1?M|{@NM{c|;|9<K<QOCt8^D5nq=MmS>MGg=qEcPWu)9BDdO-gBcF?$117x3+o
zv#Y<UFnpk2H>ozrzpN-<Og=Z6Bw5#K^SVNcd5XmGD)~jOUj`Jo=bOZNND<7|Wu^CR
zc)$P3xNTP8O-J!N%rA+1`s@?`mgdOqO|r>BOaC5s&Ud#On1k94&gdORklq!VJRdw?
z{>PRYE&TZxFzfWn{p(|ff(hrZ5OdUD1*JbjeLR>FV{ng!m!lveO&2o20ikd1*G+u!
zrA7aHQZ3}B^wPjDYZC)fQ0ZSh)by=W1?1s>8OJt>ctE_%J`DQ^9(>lyS<$35?7i8&
zGN8A}G7zh)GLCt7`>*>ylW;!1Tn#+bSO0ST^b<u?c}=${yKDdjh|j(g<sD<+Ry~D~
z#3KDKmoQ~TUhpS&L-)K{GtJkx@ZyWnLn~kq3&sL74-|MRS1$#m=peIt>od)vjaXpc
zL4BlP92T#{+(^KH5szzr+}5fF=15-q;i&?YAOb7P=M7tl)~idCt6e}po4Oq)y`h&m
z->-1s%8z08mInqKd3InbQ<>G$yf}sW)(T>;_DNu^=hF6<fM>J$maBJL%Ds<U=C2wu
z#5Hq1N<Pdv1h?+;TBGsxbzPjGF{4{N#~-Mj9n6%+7<dgAf-dHjUd&_U^n(WY_tn{2
z<HM~hf&J*QmW??{Sny0dr?$!H&Vsx=UqcW1Lb5PMsC(bKy#La|GFq}SY;;)6VKX{%
zrR~56QQbnP@P=h%i#{YMzY>vh&*xa#(Ha<KvzP;p{m#Oyy|l?v&n16TTt#|uMj$T-
zU-K*W1PGuh_BzEYU7!*o3!gLn=SeZSf<};EU4DMCcJ8qO{8NGVi5e>hz6Kh2yU<tU
zibHBoo(;VoK5$kDNhw*8dzxsTzzEm4G$gVUDQSIk9VFsAqbOEl#?7I7ZDi!f3<GgZ
zl>sBarJoe#e;VCG)1Q@GV8Cfj$X8Hj!$CtOIV-<og1l_)1kIu`Q8taANYsAj5<f!@
zM{cAy3AmIZ$cV8b>KLFUHS^vM;W$3c4@3$H-^->iZxeeG<}l%fr_aNL2x+8XvWasw
zyOkH1UEU_hu&U0Kh6DLpmXRncR*&qn2HCW}E2>CX#ZVBkTe*EN@!vmF#9J$GBSOS<
zpetT7x>(N1GO)WAa(GL9yPOFj`a;R;R|qkXny`Ecmo_`DAmXL*12zIy?ut>Iy>!Ta
z#y|!yg#28-8#l)FG&ddZCXtKoC57*!cmPyCJh@G-l5p=U$4ERYI0jM(U&~MWJ@IY{
zVBqCo@*#)yr=~$CqC0PHBH=iGjLjXo<hxqZL%TF$HiN0Q7+Y{l`TUwnmIx+Gk^-lQ
zLVv7;-^D;Kg(z(^e2edY?a$aiMZ0LC<S~4Q^xfsv$8;opIseo#5jYv2iv)*vu4UdQ
zgWSxN#EifkDl6VR4z&?x;WOhk!PFogDIauK!C=#?b7fRREa3pr9n_w;Fk_#*WI;Ah
zFyMXowg7{~W}S9`^i(j$CpM!h6<H-WX6XuigYfr@?H)FTdUK%qc}DmE;hP)2eX<&H
ztB0|804I@UD7~YI`ID%pZ4D(GN%;j5UMc3j+o%~(q&%se$@I!X6>|pubRD@E9RBXd
zav_onGY~Hhx4}mO@IlAKOG7$L`kp>@B}}6mcU<+-@C~$Xsp{C=q%vk{i73xLXdzRD
zL$AWnmr?1H1xms{coOxseY&MQT{ixn{`iWzhl0s-UI|pMdZxu;&-iEiN9`!qn9$%5
z_D;JyQKhKA)qwB(a>F4UR(tBt4n%NTFr`bqw(~70Mu>Bo3|FSMKuy=)6GP@o_D3*X
zL|Dk!J<06Z+7#?7;oH%_hrozYbPYqb*#O{>X0@T0-(x)a5qS4$3(iZv*zz1qI&3y<
zH@*uVPAH3FL*rT$HaH5^B!zn@;~xU6ma&7{OvO@@&LMV<mD$|McNfIP3jD#A{=)(e
zeyp%yX#f+P)N|!;x78_$_}nIw*KD_<ESWv+fC+vw>MXm`$cgMCdLAFc(5!c1C=TKJ
zX|$7xkYx3{%Kj;YZ5VwC^(Vt=MHPteukRdu4--1gA?753{AR8D5>Y?q%tpMoxe^*H
zOD8>1PQ%RB_RoPyg>fDpl4jD^GcndsWcdv-zdc5quN@HQf0M-6^`7qQ`Ti(b08iEN
zo~-yK1k69XQ6?k7n3R-%HarP*zk@Y~eVH5jLUJra`dQzqo>PX1=(^fCG5Lq(TCUXe
zdP}yiOw*QX_G~4q>nkh{Ijxe}C{-wT^*w#tr9G<p2m@z2F2XL##V_{D+rr957vyF#
zN94hT9nKhqq?NmXM9Bce>K{PIvIw~^bY`Q&7WBM=Il28Pfkir<1wvJUQAVgY;8am?
z$CfkXOzli>aN>h&%&9SG4N{Ggg@h3VZ#8-9X_!>TYQPjU!j$D(xFPr-IY^<qgYUa-
zc6-wxaofBXeEv_-p8G>w3ap?eCB^OXDiuiHkiCUY%lPMa%THdT2h<`6+9H|Sz)Ig#
z*;y)-%^mT-_qJ1TVt3s$9;4*ssxlIY#lTkX4JEG4%Rqs9iDe1)NbJnYqNR_wvCVD+
zLoHC>M5F@?FX;d97zU#T+kFPC5_zNI*=&KP`^>9j7fDT(FBfCZVRFm2TuAiRS}~`_
zHbYc8P@S%qq=TMb35*Y%CeFyG$<?@HE;*v{;iNYj8<?DDXI>`d9<6Wwi$A0SBsA5l
z$CgBt5t)DFxkqa;(TO4%i{Og2(S-qgUiOjJkt0LU+1S*%Mqt&{s}`;>8$tASC!{kM
zEtO7OdUXuLj(&$nOa8Y*a>e0O1nggp0DCQ%0vg!>*y~wYHhM2Gd|$={*V*U#n*ai4
zDER3`%QzYatg&^dAw{;ENFY=q{;eifA2?f^)@&t@!3hXEKlXJF<tm1{u?^^M;e?$n
z8xr+zRbT53_Wtk(sZM`?{bp>_;6sa=)~n9y8Y2Ni+h{_}v|iI-Jl!zLMs=IC=y(XL
z%#?GIXyfLI&vX|(DKY2-5)ho-TpO)-DI19dr1~_TJRb3TSbo8el{lPb%1Pd+C0&M8
z=^4_?^Y|AN|1LmZ{B|R5{JU!6Q9St9bz)mN*a_7NGcAQYj1UlzeUFi1sORCYpoy=W
z&<Cu`&FoWEPnA<eY9}zwF23g!g2l6ynAQp3vPPi(_IC<3k?PBvE#u8MWYMt#eO6<c
zNxuQM7SqL!ek;wXbkwMx^iLAFzrl`*IYFg`WkIJpJJ=<TrrT>jLY$51`9GIIPTAyG
ztD9PATG-+@)v)=$shsoC^?3Ev>(wmnNiI}(NB(OyHJ!iS+ha~iOWE%}XkG$Bixyyk
zeQd&?ht~kodb}`J3Nn0O+5Zxf7?0ZN``u?JLXBD^-R4{iS+IkPwm-Xyv$o?jL;uq1
zs^6FVN&ogNW$0nxWN|uhs(Igca>Cf^tWfPQSbbPgmanzliQCDHUkm05c&#p?@tMoC
zKfs6D-XS0Z^2f|X95$&4@Esvl0H=awmpQmZ$+!aYqrbU4x!RQ74u-zSZ^Y!Aa~fbg
zr?9zb7$a}o_eLUJt8fsF6wYC=w^Nui1or-T<e_BRY7e8Tw!FwtYvjtZ-=u{xf$2Z!
z8OY;SC>+ksQwB%qpxYBF`sc3a6A5SJSV3-!a*~AF9PSWNJ@3eg$UC{3VQayr=9q(U
z5f2_tU~y;5;8iA#<;D)LyM~KtSgI7gCM#M}3YzdysA@`bizneq8dy=y*g!kP&*C;|
zR6D)k%*O=*<!k$ttQ=4QrBHHyyyR0^#hLU2ReJqQU{=YwvZwb(pggoJz->`s(x=?-
z0CekdTLtc(WHFlYJ>!0*NS{|WX+E|RSWfweiVF$+-D=hp50bp#D{^%zRt7w@$d}aT
z6oQJ8zIpKGkxvA~IdBVhJ?N8Lp0RGZ5RMdn#r8#^{Hit+aYl}Ku8U@H-3fh*S)z6(
z!M148(zWe6WV)<F+is4u29-l2ra<*PE?IR*Y<b}S;Br<xL!!=I+q>Otq7pb&eE9H(
z{i@jg0m#ONst#Y3hFH9S9{LeydZhqv`0k(sB`X?3f?p$ADb~-aB6|P0Bpx43&z>dT
z?D`M36THo_jPnm5%{6)V5dT<z804fpgD)s*YfDF=*wJ|WRH5GUV*2z8ww8Y3N*VN`
zvSi(?>-a`Lg)Trz`BLT()a0SZ>O<paKU}IBqc}WnQTKOvpazE6mX5X|CkFjIXlXV8
z&cK^!yn!ev;#I<ZqcS(AO>8E0bN%>|C)P6#__I4%KI;@=HIkO&o@SI;SKt@1E~}NO
zM1~YE^ur|1Em@u>J8s<4x1KDS{byy;U_8$e3P2=bXaC)#*$SbF*!f5_C+6Ja68*A#
zW}jByq_$x3!LpowR*Ys%%Pd?XzS~g>-KnV3(?wfqcB1BaP109&FjB)A6|)C)Z{!zT
zEk>D5@0)@WW`1&24z|l~V;D6uI*>Oar=^@a=Y}J|2h1ZZyn!L1Q|{7RLiONpBHT#e
zMs@^cvK*u*2{IG|RwCfZ*pBgdCvsTjl8R}ThS%j$17Bqa{k7IWmnV~kcgZP@!nAqU
zHvM%e=Jt96TJ}xe;NcrSQWrg;2`fd8uia{56Tm}{F$;Y_zYir=m*;jo<$}|Ybst_a
z8&RwO&?YqasP9N6Q&1unIH3#E*|WI@nD-pN)B~<UTD^j{h*97@HJWeB2L1lju@I{v
zxKgsL=|mmBcDUTxLJsXXUYB~(SCFewGBi)Sr?IpaB~x<JMu(dqFc9f!EUc<df-L}k
z;+6c<%Sp3#v+%OIK%T?F=3@u4^Ps1pzVgw5W8V*Cx4=%reB<&mme#M&U79rfJB0+L
zeTGdkwO6mNXbWJ=c8ZxrC-gtza=;+L_gbS@SI)-dA9yWX&@qvFz*f&C#Nn(Zegk#h
zZcF~t-m%nftbyj$E+h|jz%&~#_=8R+=RYvF&D9_N5}}h*ZQF_D*=>YLW|1pCE2t%l
zi}(%Cf~9W6X{c(N*~3?TqDzDEour}}hu9p~0&12@CQyKjP-O$hL1=Ygly08cjpA(U
z0`t8Cf3kHLua-7cyAfW$6^gDpmizice8z5cqVA@c5v2kcM<}Q_HwiV?kVy3p31z?A
zV-EC}%CvUYEgL0WOAO=>2tynv2#Ti7xh9K43xr-;%v^b78s<U9T>1RDPdR=H?8owJ
z1UnSy<PJ>ylq?tN{d;TNJCAUq>~v8ufFFU=2S#Z_eo~l5Loc$X(cKEO70Or%as&BW
z(}Zi~78PwG7_V|T@gd=p&wBUaKk62Mgru)goQM~>Uq*(C7_@QguNTe?nSc6kvccvC
z@e(@pNf>y4IjqawWhR4Jp(rLNb0q6lTHIV^`bAtEmhQ5^WXF;Nf5lHG*6rRJH5m(t
z&=$GM(XX|&geh5C7R-W4`9Dx80^ri1zrN^`T@#kISqKox7H?Z8&vieAN#vgBtPbZ<
zPhNE2#=dm(OGNc>9yVyxCQ8*UAPuEoEd8v5{Cm-w?bqPD&0kpA?gf04x9szbn|YU*
zYUo~|XKJ>5X|^4jsI|+s7gcUD{?gdhGA*mrYEN&~B@L$|WvtfK@)l0*bgqJ96JyfF
z#kVjyi?8WnHbsv@&cDN<J?*(!^2+E1L5_z@fl(*Xp3NGyk^Nrj0LBUd)Xzqm6@hW&
z!$9>oB|CCV;(D&)l)g`Ks>P4?4qU#eq_7`mbmbH)Gx?;{`(?|**|_tS4^JIZba~~p
zsd0sMA3Ns9K)%nDbrP<tGQpapeUqq7AC3rb3__Pc=Md$U!)!b;sBB`v`jh&pR4EL}
zMPa-gztS#O?&~$CcOatW@jMAGp00vd@(wyoeT*IWZqUO9?ddwlmG~u`W^a7dSu1oc
z>?w*zOnrsfeRpEB;KqY*0U6#QyDQmPXVH*%`-@AMj#>~K;nBD-^i+}BYX6$Il=4vX
zr(iL+nbtj`2SVLl6;{E<gkZEla+HY?Zh&ALT-l-NjgY0#`xF6Wd8<k}SrD!&7TmF&
z-h@1%|5O}4u$BE3&jou@Hscoc;@6F*j-L<><(K(p(E>@U8&NT|r$qPCiRQ=B_Vz>n
zauC+%Psn`u=y*lQ@!g<w-~P5qFtt%IQ#ptFH(ag0#3AIb1C~B?%`-}(A&=)@pq5==
z_|*YN_id@epnuJppfYz!QeOUEn{zk%uI{ThyXlwZJkJ;YI`&2mt)=#i>IudTHZEh8
z@vU<W){}eY3I8Ts%(*UudGPX7-2~&mJ0~Y>B<qIIx>1QASPn1l7I4hXQFS;lK*1b@
zzeK+|bi++psf80`EA0UOKzyaMhWWxdY*z`pN{h05f_oR##ANPmOaYS&@`k+c&^lZU
zp8?+k3fR>5yVJ@a4&Bg?!C#NnPL-$?dWsq`uLuhQNTV}tf49NYcyEc+cKLS^K0a3_
z=Jh5Om1uIN{!U$)hls8?B2^gMqDTqcKs2~H2r>o1K=_(Dm||q+L*qNWT@vRc%!aJ$
zhb3T)iLDh#T}&H^6c}@=$0hA_^$vO)$?L;*Ba!y;{}J`xaZM~=*f{pCSEVS3sDKCv
zC{?9IML<A$lK|!l(n86VDm9ji3J6GtAOvY4R4F0!s7NQ&1f+y0NDw56fF#6_y}$AM
zdq3~{k7mj4>|}O!=A7p|=Q;f@mEM6nH)_h(xBjq4jm20z6?>y0(S;(qfPz1HG&h>n
zoqxN9Yx|hV@4X!j-+!_#nme>M*1FlvUCLCg=9gPL@g5qq@Tq5x-7Y@%wo|71WK_B3
zV>~z7g&tm0O3*0zCG*d;o=XnC>0>0Nsig3$9(*V{b0A4+6O*H3>_wk#fCycT7DU{s
z<z}B+KaZHqjVfW=+I=?))kh4y_wK7U`T1r)M)(eCZ6v##d}OBD{%0-v)6)sT)Kua(
z3pa-YX8*k9+VnsQVBZZsne2It`fqsYLMDq+ijI4J!1X5Z9`AO2qtyVx3x$_awT0kq
zBs6rpB$iR%(Be(LMNDj_q(=G(erF%_&mpy$^NdzUw;x)?#L)emgAiX$?#EipRxIDR
zJ^p4URQ_bB?%5QaW-@!G9_!`;r00H!nB_#=vOhM~x)F|DiQiJW1I%*WQ?IJMjM}{0
zJz$9?d_8(AzwGKc1bbxVbHpum=blO~1V>Lz2%0_9NFSH(@Xw<Y@qq<W(o(XFqa4BV
z96=(%(C?;WutXYmVXDREZz~s{DUJKf4aa;#%o3Vkgs^(yil=_nx*zqq_<ll6LbTd=
zXEJHXjyb5}{W?_dbiGrQmXFg-I@6aNFe^WWDK9HfUVy}x@+V}*0KX@*_Yb@)RYoIM
z&bAGu#BXV&ec`c?n3~*^Nn{Hx*7z3wpp|qHEacs%gR)cXhI+Tw#Jvq|1Ec7=yMsz?
zhtA5xA2SFIJQgN#61|kE5n++xqdpCTbZrY(A8?EpK6e~MGu54`5(2apNLyq0(OD&m
zCYLaw@5;?pV-hpW0(O=S&F%Ght=yHWbnlhphn0~D^v4^Aj#S)GnXNKq;M_~wIwlLt
z=zak?k&E#1hwj(Te?K1r`aCWipi1pgVOY%LgXYiTF0AOwcFw2}^1uuHWDHgh9M?q#
ziq9g9Fst<(A$TDgXXKyrC940f`LWpg^F=lhEveiRusXd}t&3VLy=PWG2IGtD!oZ^o
z#<h$U+Gzy3!TgCsW&Ufx%4b*02Mn2L?e7a>Q$|c^haqkkx?>kHgFZWZ$n%I8?LQ&0
z6u@$JkY#9`cC(XpJ&pTY2cfm9?@Q<O6<LUNZ`p^?xt$NAeXJNZVi(ORo3+zW<XO}p
z2s7?;AqsZbKzxm^Snt_j2Q`+8M`D?U@Ov~vJRTqkr7vRLq(aEBFBZ;CDM_k{o--jy
zZf~)l0!-HgiIetqGR?6Iv*W$ZbzH)EI9B_Ba@S1w%y0?i7X0<2=Zl*uKu`7E4P*$X
zFqbQKZp9xAEsT4%1nuvP{bJHJOQA6>rYssGu7qfz8(8SiC6fLNB!GEE+Us!&m5l1K
z|8V|U@y@-s$p7O?pQW<Uiv;&AN>(vb>Yr~e33oSQsazDzA}R#ffC{n?cH&$U!$PHG
zBE-?tb?Ao|uC35#Op25k@-6NboGZ{!6SSd%oUpVVlZ9q7`LV`=I_;=$CWQ+l3j~<A
z-W<oL2F>@kn2V9ePSvUbWEig#;azYZo$k#yZhza8sc(xsrbU}HQDLBf%iFCW5v9GE
zR~^k#pTfgGYDih1!dJxv>X5fYj%SyBNXc$1%hmjyg8OEx=ecU@8H^w+3k#O9_ZbfL
zs=fF#jUCi^KZ*Z@c3qnE<7LzadBoct*9HmNJ_lrsg{z7DN*Axj#Pde$$r-Kmj!e;H
zSb6|fi(BsGIF>!P?&}Xk#*vHV7SrA#*(3T#S3={wIBnWi?;42)wlVNpLh|YE>HmcC
z9bSEhR}l)3H7@815T_b#GlU8ERyg|Rop7VM*v?yDHeL>(q+it>e^w#K1D^iG+WfwC
z7}>e8>8`StBDF;jGBw`2n9gCsM>#Vu%U1&P<j2p{Q6r1Z$UrvzE^PWI+hFqUwcL5c
z@-Z50s~%bL;xMR}DYF=M`e{*`magGv-Uvu2uXAuc;K<n#oCbv0zjt$ehMy<vG%Zhh
zYgYGfsb?O=$1jxFtgf|bvM!|Un0wjIrwDCrTr^^j@Ba3l@}5x;OQG~=j=jt_WPfUa
z`?lZWbL}3^n<<eJek8A!0vKzY&GEsQFmesE$IPFmG%dq^V!W};5iqx_vLRYnY_T@_
zIc{2P!+qwL=W1Topv90uSd|x!DRn<$*Gv;9`;cc(pd!I3B1Ed&_GL#irS@#&_rnxi
z8l(`jr`LKfC|)kxxPp#wSI4rbFPSH?3_d|?vOzF}srq=~iL`)HzVAMGa&`7LL-DKv
zn^u1EmXyY+qI7iKd6k9|aVNRiAo#<GOlbe*z%5&V{fvCS5t9Mzj^J|p#!VHKzj;<1
z>XR}60!1hMOC2o9yjo?YVY<r2{z=h;5mcNuIV1lpT*K_E`Wu<)#@3al(@3+S2(I_c
zRkI}-lm@KDqRLS&S8{qVn+WjDsP;t`JG}UEfaKwj5zL~&0G&B{l7Wo;+7lG9bTD4<
ztI8*mY<Ms6pKsT8JlqSZmjE<%E~x5}DDJrFo5<(fDex+_r(yjb!+w9OIMQ<46n)6z
zN`RQg)%k4BrwtFq&#puRWcTD*u))TXNCw?~K4@>CD2IhMi?01E#T@rcy`Cg!Ru(nj
zQrsZnkV3u@YOAJVE@cld8u`fhLdyYwh;ZW3L*fYLKGJjXQfbs2uE@`>v|b}9qW3%{
z*->-io*r_(-fOi~+5vIMd%KM3D_e6Bq?_FWFZu`dW%+J)y)&p#q-WK_8Uyhvr-#tS
z&aHIm6BfO;i~OX9l4K~nS{|4|PB0*YwLw<Qy0JcCS_$4)CR-3_!mwdaWIAoW;=KD$
zsKanDUt)y=EYLwf4oW1be4`7SfNU(%eChM9p}^T_F})xqEDf;)ccRD*q+@@!JRBx{
zfsK~*YxY&ZY_O8ULv1H(8>a>1RYvAgt5$Fj!hF|g@ypRc0Ca!`XBm>wBY9KqNesV%
zHx77*xASAmLE;bEgUp#*h<W?&Y(_yrBsDW%a{M-(jlMS3aHV;M+Prx%dZh5aPJElJ
z8HrZ@H{KI52LRH`$y_a3d4a)X6FRQWCE?^%?P!NmW!bx~p$N?56D0Z!!Tjr#x7Bf0
zrDa_54Iq}SGK&Pi$q$`wg9Mnn{W&v|qU~1+ccU|`znz9O#@{Na^wpFrjAzA}y{zPB
zZkGKkn(DZ0PM@_ehaO<*rMcR*Z?(_l9a{DC`vHwoy;2tZVH46$fROG<=1~}P7VJ@@
zi#f+P@d2t$BZ~-;<6`1A{|VLpa2C?|P7)^Swr31r*G49ORbLZHH#;$2*eN{hP2I7B
zt2o|z3A=g*bge4*8;Ywqv85C8-TqJFC0rue#_e`OuO%k^Pe$@Snv2IyRcx;O7phZj
zhr2$bZkQ`Cc65Sl(rT(gGoxnj*@`r1Zg^#h;+2FyNvAV--Z>)3#dKf#+T>EZEo^=A
z`yrDL-z-|p*T3Nt>d_q<XX`-^l}d*r$Ih)Ypam_aD*Bkstcv0$1a~W8r(+iidag1q
z&DNGIn$<_)0{kb<CyDH+sheV(Wnl+6uPihG;;h(;mg`xecN)JzOX|q+gW52M!w$kc
zP_29~)%PR?N`*8eW8#^9KtL&?IGR{1ng*2SWRKW4<=QwtU5vCul|0IyC9x`#!JMnR
zYo8G~UA1K6XR2?uA<0+?oz3&)Q?Y@JlcAsTT<%3=-G`2-nhZ8&7$XADPn{M0G<7ql
z4ZjYplBP=ULHcXe{g!DSc-Mv$ix#-niCD#CofOz?iCwRfPIa5Q`lixb^hT^YcB5Aj
z6MW7qzwc!EB}X!hW<sw`oPy=7NT7dIUSly1<>Wl@fyj3hTqeaMbd@~}3W=+2E=eX&
zqSw%LyQILmt7rW(_!5GWik4hgh|M10gS^%;X5sP7Npq*VvWGbRwFWXZ;DD0yUE&P+
z;DLLg&H96!;(l~=ZEl!uy++K5$_?!UJ@s}`4HG$}FCs<{JXv=VoPVZgR2T)`^3iBq
zFbmRrf8V;5S?6PaC-jxVdu)^+^SGgNf@<X_w60+?HP&$X#YMsZ`E|RCwku`V6c__x
z3qVx1^oSG6IXd!kdH;p&QORQ=MpjnWkFCJX;;lTM{rR9nC=E39+U^%`_L*?nyD9(H
zv}i)S<pQ2^F!g|;Xko#VWB0vy$ZNqu+6%Zyf~1!4wg)Et+<Tcrsr-$58BbC?-k93n
ztoU&J4&VE8-u+<%04gbYcY3_T@$Hba^xilyOQ)(ZLCo??xu)qorC2XM#hF$XS?*{(
z<Il@p8mzss-!D_9F(H~wwj)oY_uCy06imJ9m#>iY@WmG)_|8~R=8Mhmb&Qxz_dgjv
z${Azn8GN2hWC4TSquS681YF7$q&RTgQ`T+z0-sQHS#n^(KsPbv@{1XgqTOml0A2CU
z3Lyp+UF}eq>r)(Y4U?sDCFh~DyCwla43-N1k(U@gTHlnkiS-N8PxpG|IWXAp(J3t2
zDJxXTwCa0?!|&+NK#MQiuB<BCcWi6qng)Da9Y7m3dX!*b`_xtLy*&D6Zb&!N$dA<`
zwNPXxy~ra{LNc}9Eg#v*2C;t;)SlO%7VM0l^r&^K`STuMVk~;He5s)ne(F<B*_>2f
zOX1Hq)-zd@Zh@JhyfN=|>A|P`d&Q3hzwvMSHq<R@X5V=%eBRG4w=<u?qcf^@n9J1t
zyXtGIT$BKj1Lr2~+jcnICQl5!q+<N?Q9#=C)l_@ea2xTeN?kQqK6*%stBB`|ytUX+
zA1j{H;x4PN*e%X1w382sP|y$H=&0`nfKJ#nAn_*Z`~8Y0smNM_Pfjp`gQ=C1aL*{t
zs2q-JJtX5qWV%qp_hv}7)CC*-4Fg8Q7rRhbuovTxDs>(+hB{TU<$kV|xbf@1N;--k
z8NhbdzS7vP6G=E@kblc9SQ(xNHpuf%{9i&J(`GbuKxn)KCxe|exu|*(Bpc4(B3?4!
z&c21lY9WE*wlfJNlIa4GyR5?0HbF48kwULO(dpqXDN&5@m&*+lkW6dy?%3DTPiY@O
zJyhu0%jJw|h(Eludk~WRwc4^-Rzv+806DLhlWQYe#vdymqAV9+3X)nuIU`(x{bv%n
z{qe;`K^&^zvgGZ-+LhST7F;Al%#&>JI4)H~D;<k@bIxkr>VDwS6?@!Hc(ycRE<9RV
z#Qw1BHpvt4cSfKP>lvvPn}x%!f2AwP-r2(!{v|bQvhU)OzE~-B?Cca^uS{GmIr59b
z(}OSV9xs1fWZM4rH6>l5nLTZHCe~WDa{<A@SA~qtN$FHVRJ$e`rwCl6!bKVaxZK(z
zU7;USskGy&5(0vu&_7Zf)Io(`KL>E&1Z5Wo8gqXPly4bEoIrmq1Wy3cotx%{j9c<I
zs!I(=rl(mD)BOm^%EHaFi48j#dT5)};#42?O42^7NLASCnOH|oSr-N6mwp!&`(~3}
zt1n&a)Yr>Rhc}^^G;_W+F)l2{0QJ?jGx(Sk4F)2vXN+O>N;D}S#i->Cg_We!SexR}
zFNx%Z8i$$TvU)6AOQZUM7_*erVF#pI8{%DC>a+$1XwJVed1H`Xc?oRavzgI1Y9&-Y
z^-_ZCq?O@iZZwyRDGqY8gaes9tsYXRS>lzsD8jLQTJ7wufMPk}=XX_&+A{}i`BX<~
zTZ`nQj-?NqG)ZKWFRCl}TOgsquHTj`ks)LEx!g_&SYe>d6!VhI`Io8k%~?w=o68qq
z)X4h1^Uwupw7WN3Fqy-1z<9K&%;{gulO(za`4JUceE1Go&zz}5EnLkR4cS|Vbi_Zs
zLpR-PDR@}qs3K5<uStU~R~<K9GWF+Z{5iw!(4HvjX#pwxDZ1s33g(BZg7X$D?WJD0
z@sXi*+eUs4^6uI14&msCV6XV+p+S>ebX;xp3P@-7O?$P~e{*-2PEI>wt`xAU#a3;;
z{RM~^iZ;fyb;V*wt-so%*|SA-Y_?bE<hok%VaN6dlegdM*YMKiQ%<2*)j!Jcfr~N=
zzq825-)rzqj%72SI$+kz^`5kg8o(;SxUzbP7RywY%kTg|{M4IVv9s_8Po=)Tm2ttI
z7Z7gEMC9Tjvi?Kmp7#HQ$beY@qs<cR*9G>=8CExSEzAMM*ngdf9+M$^E@K8$YOYO3
z;h>#Q>r|u!XMc!UqFEDa8yYV^wWhe}FQ9=3O>h!B-f^g%`I79MpPbCKd&$z;sy59n
ze$e;LETgzJHG09UzGkpCirr>uOx#2=-~3~-2J557X9nK>l%m*s#v=JFu$<K#DmTo`
zQB9hk0nvP}bY>~=!+Phs(nT>vzvJbFtcp{|$0w9rbd6bTdtt!}y|oItyyle2XE$VU
zzTz4~N(&Q-|N6?E#UIzWa|ZtU$XEDS-LMM#cmOT~NLSV#BmwO^*{YYD$SbKqzf)BB
zHODQnM=G$ZKhOtBE49M;MtZ}x1}E%`$?4=mW}X;=Q&v|%I8~_FeV*QC56Dg}c9NQ7
zuSa)Wm!x!;&V|?BTq)V5W^Df2HRt-%IKONE)9(1A-vN>whlRZ5&15f$rT{vAaS=#^
zjJuG(J=d(@v7~`!?)6<tvKR9Axtg&X8Y(J9^pL%e%k-8<#g=1@bYJw6DWAJ274iIm
z$a1UxQg_YraoaUkrHfCYtoeYkXBqz_w4rc_ZL{qz=H)pn)0pzt-fPC|CQIVrA;2>*
zl7yk(MNLg8PPonOoUAMG`>|%hs*n6NEHEF}V4J6XlwD36@bW<sUBY2m=TDFB1{E2(
zmnXhTB8>Ui9y1b5y*`~t4?}LW49WFj!)xcGlHk8xJ{_Hrb_PNYg;@rhl>`yMy&#l(
z-jC4QS_Rf|zOB~pk_^9)DY90!^N%b9!!ra~YG2x%vh*SEnY*A6XWE8-!B0HowM_a;
zT-)I(;;NHBJ^crnsiH?-SLT#W5YgTsA-v&te@4PzrLtx2e4p_~%4z#h4-Y=s#rasz
zi0nU@`;$TGwCUTk){*IXzw7i1>liYX!uu7qEuuI}@C$lqOp9AhuTu9j>-!;kQ!ft@
zF7VSHzwf_T4UkNAi)IJ=(l>u}Jt><<*!OB8ax%}%kU}a2%lM--drOf2cO_X`%3*E%
ztCnCHRHWlBcQwoKk&!u>ex8p>pVHrCl*E2_96-~H1$6FmRVOUum7ht@p36Sa9s@fb
z$Tzg=IklkXeq`0|r21{Ci1PL+n!J@SJo2T9FPS*@<+)OPTNx$fC+?>|i1gz=lRC_g
zR`Y|6_w~GF^2_%Fsez8;u-S5%a&+`t&5=x6Er7jBlb_PiO*fKIvnJ@tw+{Ry08Wld
zM4;x($kz|8QBw*uU(v%WZ@D2hysgFDt_yeO!JcL-WdJ-dqMA<#+9wm$@;&9eQ81m0
zZn=FhwE(U)OK;&%FBRUZN3h4M)9CcVJ|qZVWeXC#U{5hY5$B;jm8i3Lk|(0g=z?><
znZmGi0j`feTP$vn&&R`~4e8Bk-<};<k0k&3`kG5&)H1C0BB=?UXAQV7n49eB+C<AH
zBfjde;9LGu2sYH!?xU?9Elm(_(6Vdb*C<nrRV+2BiCyoizYKMrC`?nf7ESJ0>s%ZA
zbcf(0Jcm_Y;8S+>@#Vpb?^?7^zYx6#(zUxEc<|%!Q8dXW%tVi=EE2sTde~JdUhw<T
z0m1Km5c7N&towT4;eCRs^kZ+Q<+w|q?_2MV$rRh?RO<6OZp|mmDqYL|{rHzjLh^Fz
zZXa!e;k`QZ8t*y=-H6j!0EU$GMfl!4A^x=<TWixP*e(~yf|0&x+|c;!7Us~KP1NdN
zvkTLR;Ty8+%o^gK6qr!uzah)dmsGD`RIw$m47J&d6?}Emvboya0z5Kr=igDkzoT}>
zC~wiz8>;*7K2^eMgr!GoM%cohC%D*zPBOXZkXj>prDE^+!Z}0>A%uk-)HVV$bo_Zj
z9{Xo6*K03{mQZ%xF{N<R`Khj`LGaA1u^?Q0C}LAHvbu@XOem3<^VEc`WFSI7#P5m2
zS#flc9G^O|0Vv}UegXT=PXcAIrJ=Xq^zq{-FPqnER~_H<(GgAcgg^nm&|R1?uA0ol
z>RFGfn4ei~gHJDGvptHn(<Re?JS9%}z70*8zRM?b9S=OmTO{1i<Q@t018Yi{)zH%2
zh+95AgQI8Vwm7(EHMHbE<B-fdg4r<ALDe6XLynz6Z<K|u=GIS-@l8%l^G9wi@+kaU
z4$|7{ht?uDfI=?qVY9<ab*DX1zdL|Z+8S*LPSsNfkxRiYzZ}67(#yGm+9+|HO+|6b
zkK3(2Pf;3MA;#*wq6Z_NKFT{8&H7yxWR^|oCAtSfXDINF4-+=;`48@L$|Gtz4FvD1
zazLpKqkksah4W;2IsQzNzR{Jrq)W&9v`V;ZlSI|um@Mn1-;vEPrhs#IFrwi%<p{%&
zj|eAn;f;v}Q@e5Z%U))`SfwP-L;_vit@;?(PYX{SD!pSeE$R`!JxG16NaIO5czZL0
z!@nIf$Jmi3+r2e$3r-`;o>mfatf;<<wbGyjECbczxJn=3?i0o@Fg>PQHe;?a=6mDO
zvz072SL^8T*T&9*uD5}wyB~qN=TfY=c)s;QD(gI0RGj;6FYU~!IvxmOqdqO&I{+9!
zA8fR3Y{A(2@qL1HMsY*!WlAY?{$a_0JYi$nB^7|{cN`z<g~|}Eq+n8;J(pFf5~zI_
z<K*SR9|mbSzj99gIp<EI3sw=<Z<Cq7w+8CG)V*bre)c49Ns=qqfBS)~@K!}y9vnAg
zv3dBnvA${~>4$>)!D#z%p*M%<AM`u1e{kAmDJ9Yu+k7or{=Nof!K{gY88=z+7T-$C
zy449<r-&V$lbiV!cSYB-)*1G5T(-XksMjt(EO&+t-Bs%(K&Tey(QD`2kFQ%lgX=j<
zz$h#v?g9_8owgh^!2M$kAO;Km9c%;;;4hUYoGKQ_PHTaT4DA50nc2!VCWAY;W^HJi
z-fx(lFFaZPuxs#pJQtJy(ta=*)wDGZiNBSY(t0k@w?56b|0NpeBu8GiSIT_(psw+D
zHY`-IyfjC--)IJi9{A2wH_f$K)0|LSlcu*`uk}&Q3@J>mOmciuHoYIvO4aNkx*zu#
zazbDCHo*mEuE`=WnoF`do?+)KfPE9vlGAH%9ICcOuwHXAX1eGZB4Z22bQrg2cF>RU
zgqeG0e=2Ad%+<Lk>f02h-?jNrva>dldQ{}vAxg<)60PhgJTB)C*)pllSkUKO;rvN`
zIraZP?iKW1y&HIR#5yX^f@Sp$e0}w9&l2JCQ^4(v#7k^mSlE8eB(*1%pLPN;Gf!3Q
z{f-N>1`R2I?-#b!*SFhZXK+AmrBBFR_&*_eQj^)*G(Sx!&6?*2L}(hI1tD4Cb|-W|
zF7TZ$Y?I%m-H&2f^FRxaWsDGW`ROHp^;=<*lR`_64E!n@?OwOs`BL%iNWDi>6p&pJ
zpVD0`s0<c`-zynRIL<7IbuY*6H&aJkoJLPpviEgsB$R(ph??@NUw@yYjAfK_xW9ws
zTO#VQE91RNBRMF1VF-^HQgw6nYmDTiVn~$DVC<LM2nMv_X8M-4jFpzI2$~A`?A#|O
z^-xBP#gE=_H$861hqtLfe_gpBA7lZD)6UOH#TxNUR4XCv%Y0MO`MmB+ON6B!c-~xr
zNVZ26R#;7M(gRqq^vXzYP^qQ)B)rKM|H+g~q|~d@2J?p$E1X2H5&h7G6;7!7$)Z$#
z-)2RDh<9V<8D`BP=g~M*!!{Z+=@gn4?Ndf<v=UpLkiwPx_}8v#aCX!}aZ`c$@Lso7
zaU|zEwRG15@0=8>NV&BZawW0*BJsTN7d;aX5L#_Q-W?2goEI|(Xk(}O(?_$2^wGL%
z*JQ#zJDU(j>8FFRXMPX3H3grSr5^#zeH7b%c`JBeXL2f^^7BMw{n*iBJTIUR+X*o(
z*8s%p4{#c+*3UM52k{4umN_DjeaVSJ)O<;1GG0w<Ro5V%akOxeJ!0B!!5%R>Q~gbc
ziO6^xKsXLIH4%Nq%4UC5HmL>v`mSmhHtf6FM^d*VO8O2zn?rGtVz=$kj2_z#*eY_<
zXCVH#eAp3MXo<15Tt6w$X5lE2(~oAiNzWQ=sQ^&dLC-yv|7+hj#C&1eA;6OBfM{~l
ze*+WZz|3tM_J~9eB2b$NF;C^AqT2t$KKu?1zu+f1?zS&v9`ofPo32kl!%6(K7nZcO
zGJ9L%@!pzj$gjmd3#&yYG4MNV@2P?aj+8I5-~nwNpl^~mhAj_GFX%b&pO9~IscD0T
z`DaBE@LyD*7zd6~ZQfG}P8YPG<I=I^w5%q1>D<`D_AgCO^W<LeH*EUh-uvqxx68Z|
zOx<WG-C?n=XOZz(CGN8AvmP6NF5c1{z~9?EUTOWLT4qYKqt{+8dZdr_P7^oFt~W@h
zZsH@$UKz{%96QvZ$n?u0(en?SQ*ep5CG%BQi`AF+>v?3$A0#dS{&`fH)-<$X15pud
z7SIf|Ib1^TFzL9+^QC_<IagL_l}vh?$-jwU*$f*zliJ#yJQlb`QgYBz6Q<p0%Jv%G
z*FLn)DiP$pcIlz3(C`T>52KiAjzS-N39gFnQXi}m?t!f87tm(;I3^~wWGS?o>;2hC
zw<;mCwoE`*f~5z7SjqEd?9tXhq%}`!dD04PvREyhs71V;tQ98D@QY+c|0k3X7EF3M
z<p1Jlf$>>HU329PlpiPObERt#?cuquO4f{Rsqo4y-!3~eN?wv#u~Eq(EouH701}Gx
z2Zq$o<>>OirjM(8G+;fmD!HT?-osy2@XOhe)LUSgEN|F+G=6zATKfe?iZIZUGvN~;
zB+?<XuI|)sfNWKmS?FqupF?Lds+>+{E<hV*=ke%+Esjdr$i4Ik7PJvcrb&}c14CvJ
zseYb6)&PxxbDjYZx$(edt#c03z#0y|XPVQ3O}7?7aDUtj_Bq;H*|#JUyA~!7aegQD
zrIOd3K*&1;2O_S2A}#Zt(y*VAgcs*DTEtKPon!aat~4^XgXQ?v9#VNt{on^CSU@gV
zQh!(75>s0sdLtM?9^hBVKeMn}2b9H5<PHC6NiZp?4{q43j7e#$D%F=@<^z4#fOKn!
zeFYrexg`=n)1-b;CDAI=L|!>(=W@*OYlWkxewS<4#x^tAcD-Lx{IE-U_r_<YVR1$J
za+Bb%sM&%Kfgk|<Z@8&v=o8ulkTetYTQ!qM4@47OI*0fg8Q)vDz7@_Fy@~?njS{3#
zy{3ZX(*inQHb@z}VsqyX{ex9sJVSMUq*60-sew4xns^~u6l6A|X3ApyyBX#CM4WFw
z_)iGsXcGc71O-LK$zQXN-UBL>1#6{i?NQX5HQ0a$d<VK<N-z#>TzuHOB@f?yWDeAJ
zIUX!3*`qWX5>*!4<a0xs63XUD2rwBJ<|hd$RUev;Ba6L~m9p2T0RT{m`szoIt}nPm
z;sVH>Wc`%>Dcy?h#=}FE?Hl*HoHACAtm>Z0*lB?cXO{7)NUf<};$n%k{=f@CbDU9<
zpsmu*Ej?%9!BoHbpx5gWSdP%=%C%9f99w0!%sS)N3?9@0yIYhz#xNsDnkdKKSLDhk
z{v`F=k-kW2NK9-3rrU;0#<o)uBg6&<pKKHMn%LKC7utnv$r^QG+W3exIoS-as6g&?
z33Qz^ZRi=Ro9q_=-1<ldw{!#sU^2!ZF5?L`3<phzX4{sk`(SM;8$~LBDk4mmq?bx>
zQ{+6u%AY^d>Ti$%qxjh2A~iQL3t1(T0;X25CdIM*$o&X$e;@C3^i1i!t2XSyYCiQ;
z@m~48#k*f)cAH6t<cW>~OV~cD+}Syp>J=I&TlG1YN}4P<GdPDn<n1Tg9YnL;{Q`G4
zsz1{MV*UOY-yz=ltvWF9(P|exG;p0~_vzW45!q>_{-GdxuHzm%Z=BQZoLoutmtb?w
zpgPYF%Ya0DsgG11JeZvgsOH;Fw5?<N;@10fHluH12XlL`3LMPGB{hq{QoXH$3A1Q3
z1Bu}=fVo$NL7zZQ9VkGC4AVNcE|LJYvVXR2^>k9TqrdH14!?GI)Ju6tk?J<7V1Fxp
z_|fZbLD4d{!+9(HO~UT|k4pAGDpK|O2GsDrp=Zj}?aq%VIg>a&=;=b{YoP663o6l#
z#3zfxe8Gd(n>@k~zL_Z;VR-6g3#So1UCh6uamxn(=eUWJwM6nxEb~ap<fjF`t5p(I
zUf??;m{g!mo;GGNb?KYI5CQBdQa;a1M<XeJE+KImy`#q@EsG^eIj^oBMKdp3ak9!1
z#gi~eULDC|?PDTR-f?*A5$1`2bBj}Mh0M!#*I-}%cXx0%{M_1Q$4THqW+aB3dYKnC
zZqb|$&o#Jl%fceDFeUe7k(y!8oC~!@EY{yI_vo>vY0r)cqr%O5egU=~IXy4<w59T2
zz=aUaljG|bMCA;m5G!#{jRb;PMRYJy?A_0aXG)<%>v!n%1?<mKKf+bQ0d#$Ft&{$i
z9>L47o-wwG=qc$fMP?*NFP&{l;`iJBRe^8dhj-D}#%m&tJn`R;M%8vLOi=;buV|?T
ztVDLJr>dLI8o)nM<=UF!1&VCj@X%NO1Nc+#3ehbN!DRCTIWE(hy@IJs?X*I-R}U?1
ztB?u<HGn4>LwGY*^3AN@u?s6XFf8Z}&Oem(%QU-v+2LW~=CzMe8mAWp?*G^W%E846
zUoma;7Y*-7r|O|KrJ-49*={T(JXs^qkbT=l3;yUFuMkcr9#}w228@q@w7Ap0P$+<2
z+>7gDMJM>wT0;;7@{WGDRgvV7>F@$I6aIEVYt@FM<W*$~C?Dn^-{|hf?E}o&jqF#E
zl$bTFtoUQ+BiFvtyz`v)N1tp*dLKK|vTpsZOC~^WfN<uR4LZzxx5@SMWJ<ywpl`Eo
z{q_6NZE*(BHSfe5_Ww|_3)3PyBTWtN(hZcaFP?#20|L>uMYYg*dUMq=Qm~5{w8ttL
z+q!gnKiXrOd#^xrIjIS`WB}_*KWYFHFnjOpKi17a@gR@V=uU{{<(q(BsI`s;VSN+V
z3xZhmpA0HU;G$>2UD}fZOU!+`a04WQ<mDYTaHNZIN1y&gM`t-d>$fpVYgvv02bts-
z{9oII8WP|5eU<uPvF-*5w%_ew0c`aB1sS~oz)rnos@4obS6oa<%A6*oRh&3?A{8l^
zN~zj+dZ_tjJ@+78VKfR412@M0_66L^PAlowSlIJCB|wBJ)f;JH-(lWa7lR_qu8Tzv
zCABV@U%sigK8|Lg<Gk^tMre!T^SL^^Fy}ru@AVAOojJcebPgm;0f<XWpos^JfFJZy
ziwtpZstlqz)($q3!v>rYdeF+W)+`VVZC{F*A5PwIB7OZ#FjQ>GjEM1sWXtig1t^5<
zBs@#6r-f6vMUPl4t^dqQw(SLhAh~s|@fX>9xblzRlivSN8Ru2x_aZH{$b}g_yYePb
zN~h$BjN-a)VRHPN(jDmc_?xO!tR9SI9rjw0^_fqi7bYjY`Bx{c{Q)-2x<VogB(|)L
zMwP%?YRg|cC}v{8o4+WSdgm|3k2O)Y&y+rpzOPAm)Dzk2FH*Wr0Ul}7jyDC#&U%9S
zU&nDX;q|gs>q;hafRx?$k>S$cbClZ-ya)GAf)x1A7x6rO!QE`yfnoP+qoV)HmoUUo
zR9P846i9XC+5nz{7y8fv;1k;F3#wU6c>RlS!6+6rOwVBYrg{U8_-Ol`CHq%+LS(w#
zR`bL~lm|M!o$O-N@d=pdy3PLy9Uh;)7tFzu*3jYgADl1_mj>ETd?x+#Ae0x0ak}5)
z$t~BJA##sZPhpcK_*A-Dufs_h>#%B~`z3=j(1KlK-i?P~w;@<X6_=asQ%@a$l;W)g
z?0J(Ov13-8jC>6Z60_FEv}|kohYC~Gij#do&c<GgC*=do_%@4UTi72dHPD!>7W0_p
z?%@`9UgS6MJmr@n0B<7$7(tQta#-o8<xs4wc1(h4o8bdun8;WF2=0x{_Hu#*+@Iqx
ztgMt*mUZJ@YD5A+a+c58krM0L$F#UhhX$~pe(g&5>pmohW5@U?GLNC7Q~&()l%VnK
zz1}*BuRbP&rib_O^=;b6<haY%$JV7G{^%c_(<sneaAs0HFsp<pYTb1U;Z_ROG;r=M
zEFBkBV8N#DN<h^UxwC1s-YqpCB<Kk9O7-jmegq^CJKt43eIC50L!hA%PPPQ(^ydV_
zusy58o*q2n$Uik`#VtVp<I<GT(}3Vtx77u_j{(%z(1Ne7(EtAQq<a+z7~1Oe!boQ8
z;_)#F$BCPOfJ+bh;^5g&0`;%58AR@q4!91$bCz$=5`Vs%>7s*_vGyNY11R=bBycJu
z#SVxg0C1;b`VwMwqc$Zy_Q9r$)?w4&B3r=_G?--qU|0XzEjnlEAW&G1Pw(@FrGR17
zQaX3QtKB_DwC>IiE8Y*mZ)H)<JISP3lb3?*RG*u#2$`H1NN~0h!KTby^zaEsr18J-
z2}6+|cvZcN31dFj{3?8CdUCwEAlhAXNvnFf8S<;~*_h~t@TY2msgIvW+Q;!$KU9ZI
zCW0e)>a=kw6>d&jK;CI0)`4n$-lApwHdQ&PszUyoOXLVZl-u@nh=x1cuMHuW7-sex
za&BUG8-1coMyWvF)De<T>V1TbsGxuBH$~%Uy>q{sA0hhJHOn1r<|HMnRtl!MK$W4_
z_tQ_ox9|bP<iyWHV<L-a^xL+%Ev6yfA2RBf0vNKLPP~#Bca6*kq4a?td1tT=nT$VC
zpYOKWUgXB)D*s$koBsFpW|WbMX;ceW!{<O2RkM6#XWpD&Wn$Qu6kr*y+k_Ykx~t-u
zmq3u*Xlf2@(uoE$SLtqV&KczIJ3=$6`j_?r>b!FABdp2j9P89jO}uDsgcj`u^czpA
zL7^M5T$(q?des;FhSi^i1bVkaMJ6+T+byHFYw@e?$b>$SDJoV;VxAz8%%BmlXa{sO
zR`E~tdI!qUVwT^JR!wgL0ixhSLE#bZ60F`85}bO+5{ru4a~n(oH;7*Z^|bx@@VoK|
z^NKfV3iLBN@owmWfkHuYDAX<B8gX>ld?_x?1sZ#v#Ju8Fzn>e2_{=4(py@y}JA%Xk
z#e<uJuYk7a3x<z8!U>Z8cbPfV{l9kk<%p@*V`zf(pD!!_&zGQ0`kyu(ue}LEdv_b;
zpI$}q&#?tbd{)v*{QsJ)5#S}|I2A$gZEO)zEkGf`NKm!GN&Hyw3Q+)&qTE<eRUh#F
z-m0~k9t+l*?&Nl)HN7M_23i0JVjSwr6!nnutK#TlGzMd4=+dHle%{)$%G*st@`_~r
z!G`C}ZPJLmQR?`S3^P)A<G1h{Vdilb-23JCU%7|ba0&(}P-TCMablBJDR~#D_FAUe
zo>O2M2uaZX<eLHMlQJ#)-6J%4ZnypI%FTMTDn`xpJEWqxew8W*=#>ywITgQ>oF1}8
z|D+&ws6_pRF}QTP-MuPm<=d!+L%Y)_o>Kr-*7aUdX5PspAmEzJg%inAM1t!NF-7SW
zla`9j<mzZ!o_*6-{sgZ~vRSm666esVy3-qr9LI8kj?4XKRvP=@>Qz~uGX$L{L05HP
zI<ZYI3ZJ4+ycY11eO%>j&r|XL{%|V$=klVvBI<~v{<?N+dflGM%2Z!Vu++X+$j``S
zcvRj{iVg53ak`{JGMO81WXQ@sH_gtXO*y~GAj#mha?Z?uLK0)68xDf9A)Mu|`BIgi
z!y0>+6NK*`p!)&Rp582uzhNr8&EPSKv-zLUbUp&01v{t*t>@ymJ)(CDx(k_0g1$no
z_ho~}Z5$BiX#8b&(aPX)rtnAcl1}xwr*WTb_9E-n#!lI6$BP^l@qI-xS9tvFkXeWA
zuNfdYxc!w41i!E?3whZBXSeP2h0bfa*N@J<vgtgTzuWbd#<eud9hVIiO!TiG?37S2
z@m3d_v5HH{DB4?t3F*T9!dY60_GtnR*KGdqZE_ktqqtC5Sl=|JQc~LlYnADXxah+z
z_K$ZFK7D$u@;{+*b}nfua(~Eq&Xoac-ks=W-SC6<A;w&#w|2mzu3_ukteI`Kzw~kZ
z2O#!@M9nkxjs5o#3$FhAt_j_8ko=#J5FS<w@R7wS6o0P4A~skOEVL=4pZkx*YG{J(
zYq*+UW4r!-VsfBc+<?Bt16M>^2{J>ZP?IGzXu;dKVj0B+g<Waa6^=)Qvl1uP)l_J_
z<*?z1t7(A!RfYav!<dV>|AesKK)rzqQAm6`3X{Zi;-E3B97s6g7R*ge#}R}rhkz7r
zr;ejb5-$Yknw8I6k-$Zn#b!4FE1D5f%sh8`&{Max=yglEbk{)n+OHpukh2O(*aX{(
znpH!aOpMDVvy@Ll9_|Kyv($KDzf;vDD6ArWb0XW3&+4wZ5zRdB+%}b%RJX7uT8H3P
zZM+TD!MaDdqcaQ){AkfOjjnh@*e~%cU!US>-HxyPYL0GZI@cZ~@NQcCCv>m%oA(4@
zQ+jF%R_`VJWL*K+f8~@GtzpuUH0l4S>clMY#D{=-$L}BTuj1woSJzLt7@Wg#JPPO`
zAHm>OIqi<sG|6#{UL*db`ovFz?4(w}0e}C@tgg}1j7$n$^^e3b1I@g`A`|?NFJ;!6
ztQFVQ`_dI{U^N>s-g<ag@`KRertD09xeBcan73j%5QM4r`WN3mkFMDO4=YnE-wTry
zHLX=FcCdO4?3~<5T+VaP*|BTj0sD?|;@?GxY6K}+g7udOiX{QmBf=KN10HpEr<M{o
zoq^gsS;9*Ya1om)am>FWPKKV=(ZwgV0j$Th$l@^4Z)+b|$HsKVKV!B3Y}6AWlib-P
zua-SE59T|<v8ysLE=}i=n-!4U2cPVW)&6jMrPN0q&|uQM9bt<7%~5FzgpQWe=P-cp
zQ(82v>}p2VXrTZ8VV9J-b%|BNL$aY_(IoG0KwBV(FTT*eGEV3IvN@cjCuk2Q3IxLR
zx{oB4l(ch(q!3~F)vaffyeA`zQp$W3pKmNkRuwE&lGse+7zEEXEh|xdx(>CqJ@JpW
z!2`r(N@P4I2bCje{%2GMwzlp;;*6IZt;5am&@;FLVeQM)==rp!trsg>J!6Jo!&Kp*
zxtuqcTmCH4l)Vpe0T&g={7+~BJhfB!-B<wKDNMrzs}{K&u{y-SC9m-g$W0W@TEFQX
zV*Z^p{a3jbe>YBCgZFvX?5^1nD|E{d2xiWH*W|D+LVCCIVs`uwi9$iD##@2!beES2
zWs8r3$APd?X-W}q%sbXJxqc@eS_V?~IYv!SGs3m?hL{dut^~px?uj)}jteBLK_7*>
z*UOi_9>S_Qx1gKTFAo<c91omDzkj4*%-e7Oy^sF$F?tLr;L}BR=IycNIayCbYxZv(
zi0^R8D8I040=mW<8-M@c^4r9QoJC;$GUCScmF|pvG1l~VF$U8q!rd_PDD3Alm@jk@
zT=9?O<xqtCgEeJX47|Z#olmrwxhLZX@)_$)ZxXKHb;P3em<x5$!Pe-#K1YG!IMYK~
z>35N3ya+(g|8UAiPsVE6x_z{~lY@a6QT>A7;x`5c58qWj6IHuaY2{u{Kp&ViKoPlQ
zfCPqZ{<imjn{N!YcTG;|wq%D>0z?J_Wq_@?55=a|9V4iJB8Vzx<-25VE+3ahN7o-}
zCKz(!s5-Ag)n*ML!L0|CJKQn)xJnC|xMsD333pUAkZ2F3vty#T6#YfRt0AR{%hT7a
zN73#|Djt1{hWmuSgp7}jOz?kUKljnQjq2_XzIt+Af!4Og8EW2_2gbsEd58muu;}~5
zpI|a4TJ>IDFZdO$G%jsc9@ZlGwmW6M6GI*K%@A<FqSt8)eM0fTbV;;EyJ~H53dY3L
z_Xo@vOS6EaFQ;rzN<FZwNJ|7`K>~=|N?ORg7<`4ejF0T9tX_Ep@H=y;@0Hcc=cbXE
zKY1?pT#l{!AqCOG$#;u}hdG52_JCP#8-#W@`d>c}F%99srmp=8Eok!<uIc6+4hoz^
zs#1qRr#l6Gu-doKf<xVX=Fvg-QeJr>Xd1n1hY0}tBQ#HsoLVFskzM3C&ghv!zA}tu
zwE`l@foP2r$R%{0G^mO&nGAN3B-f59>Ff@x=T)hERdA9ZSBiUqb5Xb8YU`gfNp*#Y
zFGbMcpEgB7o8#gM2`(4L3ZVr#P5`(ZTLbP6^hf-=s<8ZP|L=ONSE8GnRZV&6wMd^W
zVeI7U|Gm}PR1Wy_|5`+Q0`-*t-3zT$x;E9Ew6gK1Tm6DQ-FU?*>CFF~S`G~+ke<Hw
z{=c2g+!mt)<Cf!~ffxKVw1>XnQ{m@#oR^C`)73)*jkuB%f{9A{O6ifU8k2uUfd_b+
zoXR}<Dp)%ey!dJW+TJmvCRhxq`qx_&L>w=A8>ahhT`G2{%L0QVvGkt!bHYZDz2|3#
zg?JEb=6@|StiIt>9AkpceT1=WI{yW0%1TyS!6moGEW5O(l!jgZ`k8WM|2&8XO@(?_
zr*KBd7LGfjIqmB)@T2kPl^;0Vq|e~DA#0`KF7bA*{?~IbnTKrd8)!?-;_f^DySup4
z)I>g}=Y4S}4DfjCcl9(_?lM~&wG=y9`&b_A?8+DZ8nC`!W@(?4?zLS76PLPB@MI>X
zP?}FY8|$<=o4Rm|7wu8ukB~pPU;YJZRrl&x@U3Wg<i~fT3aXb)yq_oD|LpPG!`nG>
z<0KEsQamy!KkFJ7ub$?da|~4&P6;|{&{uONxG<bu`Y=w-;Nz!R*Rj^l(m*2<Wl@=R
z(S#pXzY5}GVu_WfT`^D7&>`US!Fcmyinh|I)kw+=0~~L4!mSiARnhR9@XSkhYZ#Ss
zc?2g$zSV%9b$1p(n`1=_ZZsD?>!mliKnT7r(wSKrFoOo9gUOL!#wvg&sJF>PJK*b&
z95D(3;AxYQQ!u}bhWOzUSg6v6U#tE}{Xn;tD~UPh))0H<iB99hrhTD)6IZK`fa*u{
z=B*Hu#%OnrAA37-cADB&uCJCgu8{;@oWdJxQ{|C=Bx50hyHvU+At>o<jO`Q=0C6Ha
zHt(UnHW>oQS^OgsWm9(isr^+@7xs@1g)0Hu;o!rK#O!%qZPC9LN$<4kA?p@JWI=$f
zpkTI)K&{$8{%QM?pW#;t@d}~8nljn#AU)Zee3~3TeJ)QVdVMVNGZ$1KHq((k!?PR3
zC4F2w()t}(UiZjJ)6%DQp_+^aNa4g6&oiOu5F%gW+M{rF{<?qRWDVczO#-dZRAi<F
zx;qczans;u#8oJI@?>dke`*=Dkb_Q3$FGRT&{}O^nF}~b=W3P5)ZFb>s>4)8-#}aA
z(!HqLQ@+2xYkyF?8HB1WEQqYBWw}F=G}yI}?BbbaBHqojZZO#~lN@;@&7+v2a(*u#
zyU=X6-hN~K3ros8N>OvdwxzDkG)E%4vLq>>qUN9XrwNw`@u9kl?|Tyz=qxmT4RY9%
z_T?A1S`~dc75ZJp{`#zL=`eF$P0=4eIw}iHOL_QLYk$KlOO2&7>o%S;q`*O(fqOJo
zLI00|mAO`I%rLZWX~XE?tT;M@^p3GD=C^?ga&y)BClOngEe`qqV8LPj5cEZp_Ygey
zVs^2HGN$tKq)4!E5M6KoQKwArxO0=<xo#J5E~@V8jj#Rx^U@HThE-s=9>AAFB7cz-
zNMx?}+O52>Q^c)v>rw1$xTFqi*jDQnVRQlgJV_;VpxPkw{`yc88TVY8P8{TwO+9iI
ziK=WT3fb~7B}NJDKY-$b;Y)|qWmmc97gIO&kh@>(#|`aQ^2?Uyw=5sX>A!H!u&L=b
z7agAXcb(ev7a(s^$GXVu++?)ftv@yZifN|pztHpopdqK47ygBXgVfD+Bh>?{wxeHQ
zisyh-nDkNxqI<vA*7j2LM~f1`d}-%pvXuvsgzg0OQawXsjEQnfOlv}Y{WDet42X2=
z3x+Zp*_#%OY^jwgpW14g-!IB)<<zH?e$NINr>S`0#meO5lkM$PlZO(dr;QKi`9w6P
z1FY1+;gpd_-8NA<>bNO-XRkW1<MqnVO72^eQ-;y*d}<f^qyF60c2@ct3;K$Gj+<+e
z<*9$Rhp|S;-;@z*r5Q|D3$|^ZYbI?=qc?WT83E~5rblzeJ2k$n-oZD!m<%4-JW*Wz
z_gK^Cuq+GO`GwM=lrJj}o;Mxc-NeoL#Oa5~I)XOX_+|%+Un>9Ovt&!|8Liq#@U&W>
z6=U-Z3st$Njwx3rHi>KWn1{8~Q)cVVn`J<=rD4_5$;nGIRATIIyB~e!ft~jA7se0o
zf8B^0L3HfuP^My|Lon1t#`FpwVI7l$8tB`s+BNrcw545OkRwQxuLcU|i#;Td_GHpj
zMuNV6WlQUrUa-%m6Q8bY;8*%t2EQF?N#r`Amz+OfJC?XX_#DBKH_3N2bgNlLo76h!
zMY)(j-!x__Rpp{CGVJW#*Qslj7N;+cRYE9wB>f|v>yw!`H<J1Q?t2LYC<b8)g$tAj
zK{tzY5lOtXEM^hBQ%_%O7V*PzGyI(uCMjD4m=PkEy&Sf`iH2wPdqDfGq<RTp$&b{~
zcJrleDcbDJ?|KU%g({yH^YEian!hHwUYEZ@d?MeLrG2PV$JSjdYFVdPLre0-Xc8v>
zXqOa&myu?4lIOK}Kvakf^N2>`zbOmK+p#q^Y*fKq&EK-hz^(~aP!o=?b8FMPthE|R
za1eQsCBaX+Gij539^Ix!+&Wy?dFf=0*XQyzN_`e>ZFol{0eKK9|3QBG^7W&>@X$=_
zv`($!oymL0Uqx={o|*F6u47|%NB+~Wl~Xb7AU$*wY0+lBM|j&2vWb>$k;-g-oX`v0
zPn+BLnm8*$DkDGTpf#ltVyg5}w(S;u(ts<86LObQx~+%2G_CMB>3~`1o!wKKmOCF<
zXMxaqZjHBrkm1ddxYxP#mC@myk2<B4Oyo&S%kB3=M_(7~*-l$Xc$?F|7XN*&Q{DhK
zuO7Ahw^0n;`UGS~?=YVfEMKY@8d5SlftbVJuq)Xrd3-YNvh{s~^Y-AwcAFk>Z#{S1
z4%3=U2J-UteOQjX{#Y$N1SCa>-+M(kffUMji!F@Wi53x3)7>tno;_`Np;JhTX}#cm
zxgnEnDdZ*5FlG|@3&*nDW)cm*E+68bzmt4HyL8`;#K#9mj2BppxZRHDvJ8~HIs-8W
zVJoAOq)zjaT*}^8F{Ll@FUglXEk$N*Wfl4<NAB$HnKtW$sgJGO{N<66gV{zF5^gMU
z1q1dVi!2BC+&cWE;jvT_Yh-O~U!l5?V7cDi`|Z+&ZM<%>8ClNcI`9LjLfY!j7$pmM
z9db2y3_xf*IwifI8<vED(6??X#Lq8q^$F~Nt53zyr`&mdZjdZ{MRAw(Yz`<fq+k3f
z&rFl1bZ=7p3dEYqsBUEYC0$PtIgS)iA@Reb8w2Q%2zLc(y-iSDqebD-mLu+(-|P=)
z&CYqS`vz&#9uvl=#>&NBY`6GB%?l|wEmw<f(*)A83@Le{beXLoybJx;U9GLw;#<(!
z+FLUd%5+w-Vq({qRESr+PSs-uT0hF@-#j1gwwWl(k5#k!r)I3R;y)op+ao$lBs2{Y
ztqR`gPy0-A%VD@sNK?eM66(8bqRosUePF01N||>O^5pp(XJQI{?Z#a21ug-oCeMb1
z>)-#PJfQ+wf7L%mb7E#K$FALQuas(g1cqcs!GOAIBwTZuh~5}fS#VC<156H1dC@qN
z5yKJ<YvpO;2C6ZPFZ1MTRbtnW&!H`KZ{!QE6?)=Yp9KltTt!!)qx#pjsA+lv&qE1$
zi%pT2W~M~hsSEaSqw$pj3(Nw5AW<K=({Ec;`U#HZDSX4{*tNv~x(4d0L%`KQC1LaA
zEsK({Dw4NF#+yjf;_9si;HE2Pi8WtDt9n<_*}5tm^3%xvVtr8hApBQY<d9rW&tzsN
zXCL<%h*mzf4R|!Z%Yx?EqTvp5(Z!?4nnS!{9pkI~3{f9|1(YtVi}j4^U3QN>>C06^
z?<dhp(O;EX=uN&_c4~8`^yYVy)q>j6p;#4Yji*3g`E+4n{Qyr~Wlqu>v0*PYSS()s
zQr4{eK9}@aBPG(P3_UbR=UUpzIaBBipI#EXIphYu`uOG>)LLaSde#JUTgUX_8ZlLh
z?;J@OY{!KIG<*%Pr{8L&it(yIf7{8TH}E6f1wJE!>0bc2@?JvMXlR6njGs-&VQc<o
z5PSX;>RKVO$ADOsk%9<4FkgIoIV<yCjFTX<C`!V}QvkI!k*>Yx0rf=;Jmhp6c?|am
zu9D7XqzWkcB#?*Q5V55BpU@GLPM%35g%(GJha8H?fqDOY&ujk>2Flo7r~DG;W8?(C
zHsWJ&t{_yATs<w<zdP2q9{tf&j%Ip51B|Num1#pYgGo)p-c{ZIgnsG+5V8*g$x&bQ
zFP;P0oaxD!Z3PQ=hf@*MB7nwpPXp0mEn=;J|7S$1*T$aM^Bh4Z2-mk|fcca$NdKvJ
zhnEc@!=|d&fRAlEvL=`k(wE{3@3gaM0`QE-Q&oQHHtf%95BJmA)}R!kvL+yH@BZqw
zL%0bic7ID)Xhv=9u`RHM69Bhsuf%5Qwqh;41vAphNS&WHqmYrmTZq(Y1d`9UG=zl)
z2<pWqUrW)fN}-!>v^63P*W2tc!&;#%1L*CL(53V8oB3^L(WxPQLT2&CwK?lHokHh_
zK;^vgwEh2xoKfEe5ADBhfn^l$C3V>DXdW}umhdhD>z`2q#kJ_H{#N~p<<7tVKc>Dj
zpsDovI*5u5SrJ4<L`9`2qO|OaCfES!RaOwQij>e|1!=k11wllbBw~;r5RooK$ch3=
zkrq$_;Vue6kR%XF5^i$+Km6V=?}uG!YHoa<nKNh3oH25VgCa6T4IZ|KvX(dN$cqc*
z5mu!#kg^hWPvN~Cm*31=ZGRG-KhTP~pt8aKgHl?$&kDu7Z*XY3iXg4<sXq05W_fNi
z4#eCI5Bn1y+3T<#gs?Hbt%vLfEOg{@!MmUrtt0W5yM6dcUHPsl2T@_3#DAH7g1PE}
z)<e~|*0mrie=tL7aW_w)dYHSrst&YXS!>b342{{UoEb;RAQ}$-+zcN`_M2w4&=?|O
ztp_GPhm`lh^{vNB_VR=AJs0lTlqaOftv9j<FI+|?^9(qEwN3T`qkXrOU7EY?CB(~>
zF@E4ZeMUc6nWc|0m)Ad>`>j&2?*`^X`E6VTtu^<ciTutSv-1T)ob{3Tu3g(o!0u(g
z3#Ug-4r(=@PhKlJtLLKb=p3_C$Z{Ghv07oK4jv%onGgNmUUh*9#sbf_z6=oT0{x2l
z25wxkk4j7;H~&eWu1eQFT1r=<cToQK{HDEnuXZUYI%W3#(^5^nm;IsEHSXd4fNJMw
zr_5HghR}xdy@Nfj=c|0^iyM{0$E7IoS%did&rfYyo4R1w6V&7Y4oGWjNcQ`yWn1z#
zl+L&%9=N3ezWFIvR~THp>#!HK@XfhmphMM-DyoP(BxCPa+uJi2Tczu@L0aV|q54AB
z6D3Csva^G0Da1h;{p5+cS0#!@k!4WatD$IFYLn;2sqr@N>`b*ik(o!UV@KM;hN?sN
z!*gFnwD$h7H$5YE^aWLbIF#Q#-C2G%RK`X6Lci#o*FEog+Em6)eAV&>Ey0bKzQ5ul
zLwuw~&_0_C-1Rb&=&6xx--q1P#F<{_)A)w@sLyk1T3!wzIOXXvWGZ-{eG(NZ3;K=e
zx^lLT)~L9N`{iuVaNyc|K!*anZ?yW<@h@Ky9tbO}C*d1`eHXTrr$Q4Ms2i;^z(YX~
z=PAiM8HO70du;))C0D%RH>Svr#hweg#<_cXRdi3mGp3;L>2*-WrT+!Oaago_6UOPE
z{jt~or9u^95HQ!}End}b%iAkhcu~>lRADUlQdYWE)?qq`uCPbp=h1Cu0R6|fDW(J!
zX&;~YD)^0g@R=ZT&W;XqAu+C1K?ByWygf|ytu|_$kxqd<zSJ8hNdhmCNjog!=$t~w
z_O`Cs?3aPgfwdsM8EMcvfy)mAYZtNqvXcJ@Qxf1;J$|l_$$<p!c4X6mb5I@aOYPgW
zQS+lf`;<shlKx4l>+Dc1m0j~_K@WfJ$Bi+OswC-+%%dPfRZ9=*8S676#{y=%;t5=2
zkiuZzLkM<2LV1O1Gz-*le`>~Ani6w&xC7zZSJ~t<U=n(TUG?+ZOzVG;a&I+wGB&so
zpc66byT3~d<vH~7yFw}E$Hv~|ZE!6JJisP7Fize6VG1dUh^PlmME{<d3OFmdKTZwU
zH!e91vPNpe<oO-O|0Za4PCMVK&QsEIc7C%Vs&ZPF%rld*|2YMyE3>vCnm+C}HX5!s
z-=Ko>{ses?RlJO1R2>5-)zFkR>D(O659S-9C%wSrO=ese2ZRU11j{ryB0rxSv!#q4
zRY&%CzCC8whF)N{cJ#n})~d^lp99Y6gzq`~M1{+?Ij0N?S+H(&+vzegZ`n?O6wieq
zmBN(e-sYbggC)c$=68A&^J%=}&Sz)x0llhGFqN0JY9S=|TMM6+k(;%0`OEHvBOt?3
zY5cBb;l`_GM8qqW1ctdnhrRL8#bo>k^Oi(`Qvz&a9920LHHR6Bnp<7~RahddRm&hn
ztjd)0h@Jc&O5bxX_I!W7V%cWplwEP4pM+18QE>B{QQqO0KQt;g)=pRj=wLL5^BQ}4
zqS=^(m6dFT4)c{nh@Fcc&VB~E^rtlSv13{CoAYv;z*cIN?8LOR7^M_xWxZ~$qrcn$
zx)lt-Ez^CQqw?Q1bRMJPOgT{v2IA!L5tJ2}!?*DQisF_mdA^K&&e?ff1yczYTwl*p
zxD$u{PSO3Ag^^aupE6#9xvY{CjB)Og10Gdj2urybyn+)wYYscgi%PcSU+{RotZP}u
z*7Wv(M9rgHvR1!qE{MJ2R#BZEjrn_a#%8?aOl!}L>`w<g4Vz)3J$uCt!`82G0bv}3
z_4fgXhq}Y(^nnl})8)cY*@FL|c%rexI(m^_51N2hm1pmD2Tldb7WHZ<EN9kVPdXV+
z-(QeDi~#;mz^Z&FTiY}BF$d#(ThnFi5H*3zGPOZFt*~iVU}&y(rfAtNJ;O<+zU{nH
zt3O7a__n|)9;$c6=-{y&YdLU7d!+BNj`H?n65?BQ-bzt-KO6xvNW5X!dVfhFCTmx>
zxv^Y9?rzvWEEWra)&#q3NA1}#n|1rp{>9EjE+AxZ+1d3^kE#ALY8a~(q98}l%xp@v
zh)}tHTVtnx=0d(ebpGLi(Z{->gJ#gbP3})BCeORz+p1qa6r4WWK++F07<W?f|5pAe
zV`ISanVRY98JAO_cDJIa5Sew%5l3L89g6Pt^+*!%o2fp_&egSSL$5<qjLV){+zEl#
z2E(L@VN6ezPu*MPy!xtl_!(i(Z_KN^KeX=fI!)lf2;21Gt@Ra;+;8rsm<%4CzH{_2
zwEAaYi*daL-z&_E#xn{DJ|u01MPjGfh_Bc3D)0+YkNIt~43dbJIN#xNJ@2Z+PGD3L
zJ%*;lI6rNHkPhij^@NBAf85>YlGsYq2b>l?rt$$&d1oxo%wLX(=j6!PI3DKD=Z?>1
zlSELbOa<r9NeaK{tni50t|X#=1QAu>f-OWUHwr_tRvCn;uPt40+m}&=>P@`1;NhKp
z&?&d}K~3iQqonUvqBo!u7h7DC!1P=4*hngC0C-Hs{`$2Ut^f#YYt^N6P8oDB@GvA-
zJhVW#cV}yefFUY=Bw;=Rf;nbmrxCKVI~hdsfVbWZ(EJEzW?ugfo76!GmK#Tkt;jMg
z{=+e7q||oC@_H6jWeZF9Su0}jnoTzGQOqXW6+~>8`~p;CZ=U^Zdwkcj-{5*=o{#Tl
zl7_QZ;5i<SM#A0`e56tV-HKTc8Ua(?&+{i0S54~3Sxkni^Q#Uv_$#Qax|vTo4j$u}
z9vpEi4n)P~XJilg5)5Aa^9$Lx@B`n0DsUD^P!9~*o!@15QmND4z+7o3u^{*$#fw)S
zvs>MR+RZ7_G_;Vo=}wp{-)8lMGCOP$)*4K@88Hlix)Z|Qc&c*D8);ED(?r>-#C~tg
z?iQd<+vcp%PP>{C1xH3>bfBlnkcf^W)i+S&O)xghtIi6AKXqq;cRGe@MqgX(`ZubF
z6AWjqj`d1`)5QS?&%|NKXA)Cbe;0U*s~wk7aD?v#dpR_olk_?UuD8!02P;M|OX&Z(
zka>SHMgD*Ik)|Dq4Huc5JVO(C)rBs?=wNw9T7bV{G$#ck^zYc)Y~UcTf&u2k1*F^#
z-E}O?gKIAKlS+v3oiM;2V`RKjSQU_qqaEdDT~jwJS`KHOXz(B!Urbgn#I%+iIFqc>
zE9^S-UpK|R@@{a%ax-Hv*sb%+yroCE(&h9J0>#}@TH*h5uJf6rjZv3;Tes7iu#@@n
zsK;Sf^O_kKI%fKsMQATBz*z?~TscX!zHE&FGhjE2REA6rZa3`(15Ys=>Gcu7cg)Jz
zMm78%XVL|<4|6z%SlgjN=7G{$-u4JoZ*xCu^)<Ve8Rw|R6b%+eKzW*MoRPIc1tjta
zYTCf*S%8&~e72L&b(-0j)#&_|EX@Vo(*(ZbGT#K=F_oc<F&bRw*nq<zif>%4d-9Rv
zRF2}Qf1iD-%(m^jR_ht8qv&#ZKPfxAL*?9lYkNVxojOtM;#4~*RZa4?7mVZ-3>Rnu
zcHke=CzL0deH-vc4K29I>J9UN;m83qo0#^H!bBwXkiKnL3sPl%(t;gg1VY<+%8?JC
z_)x^`;E4Ps4Lmbrzp!aX`IVC^j!0n>9dJQnw6tZ5^59mjIFiWky>{%l1`F(@=rZjA
zw|Ch`&xWR1=*5|rOs@V3v|;iJ@Fpb~AcT&9wcSX`36fM=5^lnb>pV{T_dd{*?DT@C
zN`;00m@Tb!4O{Gcu({7g)>kwQ6#;2a*kTW1)YKSi$pJ(HYv4=UK2RlvK37`YxAZw)
z8p#H~R#n;#kDtokbohRi5Ng*)0Z`+A%^_-nb#U-N+HcIF$*(V!cKIU0ps;ko`!~j<
z^i+3JroJkH8*B(<Wfn(IHtf1|Q@BaDmWT_u8r_*{+S>&zU?y`O`gK@9_tSlrndCZx
ziJl&A0+rZgB=VQbAbrn%zA+$r@i_RnKrZfvLKp{B4N;Y&5*imuO9%NJlxi`5@WGl~
zkVoC0|Hgb|IuZmyuR~z*uY&Zk-Wz*BFK%CY4SHA@2q|0EK0vqGd0ncA&ZKf>?0)x|
z{@0~@#U)^n{&D$x;JmKBwZ8L;*qwo3xxX>H-p!5;|C*J7Z681JYioNpP?3`JP$H87
z0`9K@`FD?ldi~>DWb?<?C}-XqsEYw<d(L57NK+mHzpsvuO3|dmXb5TbBBCz1Pawrv
zZK&aQ>B!MJ+jCd?q}~1{B94a*2RIs`Jf{;%_!fH!bpI{@6$6YhkJW!D0bTpnRZRyv
znC~r`N%i0cJj}X>>TL^=kmrppQ?lfJmb~7~w?21{*{YS}Co04bdmNJ5n9Dhg6s(#7
z_Fx!qE^McO4~@|%gB}T-mvcl!;$0s+J4->DO>uJJ_uLXXC$yQb!82@kg4}<uX1Zsr
z5Yt$)nJ|){%n$>dv0`T-ep-?BA2G{u*$z~8<Q`INtBp61&DwzS_qv2Qz_I({kH>bH
zuU~EPw`}r4XkI5UZ-`MzeEK8=9}&+@n8R#`9%tMuNCx-{BL~pTg`aqAn_bIv7e@D*
z75P#Yh%i9nlS1my9=4W~=*WFakh<Og2QQOijS1wVV*nw7G0n<nC=a8KIxG~b47rrm
z#i*otcsM@G0VQ}D!kWCSPM+VZ;<(J^bioDY{o4uVirZw9p~SaMe}YS7wJy(i3W|t#
z!+c4Z_HUjvy?9IUi+{^!`)2kb^L2T<GRqTaM=?g4dsO$f`gXpE**KO5x_;roQr8P<
zF>8)*dcHz#Q;hm4Gaq#wxs1GmpqwpPtG=*rsyDdhtUb0lU+$QM&SGOih%5#!0u=A&
zSeGjfO$Stf%E-RyKr7BSYxytm>{%{_aw#q|Xp=mk1uovI&TZOj+9ki9ZB+MS1M#@y
za=eivkPh1_00{g@PDAq$-849B&3^eq#|kLs{&IIsG>xL!Y02US56p$!okc+|;HF1A
z9=aQn+jJTQsB}+u<Cd}qi0iX}Cm{cxHU|`Cj($VDZ_LKEvR2(Ir|e=3S$AuO^Nb&i
zy=pdY&^59SrPu;otzrx~hZmVnluM7bO*TY?=YmM;y4;eRza69%`jzTuKa|YZ>A=%l
z4+))VVvU_^&DW{Z!JU_}O`*_uM|pB^%6|a9xq;Qz4nXDdV@|FX1%?tC<av2PPtt7f
zp<}1MbuNO4B)d^0qD@vQExhh8c*Lzb1xO}n&ZH1@7W)D;=aKVvr0*471=Bk<(c=>}
zNU^l2QbD#|AcKFM*;dvE{kP9?5NfFxAk6-!AdHpWL62(6xZq$ERRZwfuQ~G*pcfMb
znHv*n^R)EVdfCPN@r&>q^Tu;21X*{rNFz&S$9d4)U;DmP<_fEnHfTZXL8L(R!zjK5
z!~%9xcr-RCaC-)^j)3@smDg1^;)h3)R<f+a98!r7-CVeNv)=eHZmHwwrbMa_wj)vO
zrQ7&75DVD8T>A$33~mE#YKo2-(AGj4%i|z+0i@JsYj_;2r#m?V^pUwQub@quVPYMi
z8`1{iAre5~25t7Oy+=Nskao^G?tUOXAG16DP0rZrx@UfOAq@kX(y#}nbSa*DJoqf+
zS#x)whbLd#Uq|{0b=^5+i`u{OkKe_?ACveOKpDHy{ci*SIN&f>?C`f<=O$Rft)fbA
z{PC?n^2OkEAqa`Z=<>csO#st|hu|-a(z`PT3nAZsV@$d1s`p#eB4rD*AJE~6e+63U
z#_VO^UnorXoIVnQq^Y^(htsBxMrc3LRkVka$2>033`Cl!IH$u42|enhC1gbn;yfO<
z)$nt=7vh;i5ttX$`v~j(0nIS*4`m>tNA=+kv}7qL0sxPVs{DWl3!rdagQ9Q%r6l(-
zV02TP(t`foz>Yt65O8t^=E^aRx9W0`lL?{=5rjj`T65(fFDk(E{}L5XHQ3Q6{gr_w
zZVM1LWv#aC06ATr?}Gh=o5G7_+b_Xk7airnQWc=RxJqrXuzM9-cWZaste$q8`QMjS
zm=QS!Mp5uyZdN!v<tRTRbp8?6AvJEi1iHz$m;M){Sw=rpN6o-L@WF~;*cy{AqnN9c
zCojxWkrYilG6A%Aj>`w}LlS@0bE}yRU@Y#y9&`~HQ^<L*J$=uCiu5UONhgn6paR60
zldcInAm3xka5(FOIkL%^)j;G|gZ^a&M%gcR)Sz<ao0K#o?hd;4m@&Tt9a@VndJX{>
zXzb_OO;#=KmESY$`W#QfvjY>~b#a2{b1P!YEb#TBqKz9#ocbj<X{YV*j|dEvo8#@e
zoq&))IOraO!eP)%SY7RuP^FfN0<jc){l)RF<=^tN^1}l~#Hf1+OYYA>5haDkar?NT
zCw#5>Mv}+P8%3yd;(xiquYk#TuZMq}XlQ~kLthH}6ZP<X@W4N^4ud27@>}IwfR>hL
zTcNy_R_+4VNL6|$Xd<mJY^f0R-YqK+hK0Qtw>;Gy+k>u$C)IRVw%M4k<?g|@yP<15
z92n-x(b-3-QR(@yUy;Pqrzu%#o#^CI1FDP_ar{gQ<%v4Twr}PH_))OKbq=_$EoV+S
z`UKPToVia6m(PM-czd5%!9xX3=BqA|Ml5q@sp!paiU)?2p)JCBc=0OuPL#`8^6gKw
zhw?MP`1j%XuAM;mUTeKO$-e{3&62-P8_J2IO*w`+B?=r58EHXRpJNR=PK${Ca)y07
z3|+3-XPMjHPYKEAW>QvazQgNpdE$6JzH3LD38rcbsFyYZ-;AtJ%pu@9r?}T&Zg4aw
zD#gisJ-o+w3!Z7=-*He;=#-%@p15XXz8dKibk7>h^nk~}L4xjT2SJye`oucIup`!)
zl(qGr&B+2%j);oNRD5I9f@pA#hz957Q<ke=LS@TOi)y+Q4-nTm(2zL>_`;R~Qr1cy
z7%z6IIEBGRI{)P@YYib9$tFL(w4Xdt_arqx*>=Sq`g(z&_nH+kMgxZP|A1lOYU3cA
zH(zH4d{<!5uv72tI7rF*qW~e<>Y}m({(ECKUQ85ptx*4|WWF}eJWdC;o7Iu~R<Hx?
zU}Y?Qt<1l%M<K^pt~l?kWMUtdgD@gx!~;|RC2ZHOr3RknVm}YRx*5ID6beuE{Tt@V
zz_&A)H;4O1zZW3QVU7+@#xDuUUBX=06#i}<yX=*H@wGJ-(LA_iuJ~!NUo<UD9OmNv
z^rZXX*(QpyoBa4-{ShX=ukGl8$kCIQc13Xba|^XuFxuRDc}?eRR9~<9X2uKph`}0v
zm&%?1$}4Qx*R|DF*>8W4a<<RI@I>7y(Srl8C>^^io+_7YYQLP5*j5#ey}fequG`7M
z^HsW+x?WR}H?6REqL3Tlu}YG@B^K-Su*nb$Jjox)`U(Ufva4O}S?=KvEldmyiV87u
z;Q5`SSaLhoT8%&t_&rVyF`B}z(2`S3F>!FlT&cC2a>1DM8?y&vlZxtH+2`a-ecmN^
z73z8o3ed6t5O`W|(oga#4?vk(e<e}iC%W|X_A#ZAk3D_sM?paIJ^ZqJlAAR-u?gn)
z8Hpw@lz~dQ^Ijo5FoFJZ#{hjS%)`!t?)!)nn6fzoi;6ohN%Ek@pYWHugJz$&9i|T%
z6WCq_#5ETyn?E1>Be6q$g1R*!z7iwt(jdO|wka!$)vPDh<_e#6?IQ6V9i`nA2R)0t
zLvJLZj&c+uyKk&nb?9IJ-AmS3l!I_+0&uJc-w0Wtp9~@duUx4a5wrPxqLFa}p|cE_
zjyacl{*1_DlYiK~^C2x>vYe%JtH-XUEKjiBUh{q0x86wFfB7SGu75;1FY#aYbEc7<
zH;~sg5Efk{tq$ajMn5J+?+v7HUs(@VAl5BmB61XqIsMwC^Ih`apTUIgX7plW;QEm%
z*gHvE#kVe8y5hSrV0u@1qP6D$wYcU>?euV!-=>MVVn7=NwtkWs+1cT;$9&Jv1BVx9
zL7oteevEh`ub$zP3c^)i?)Ll%;;)(07<A*OT;&j}*+ix1k<?XA6NLOMK0VGtIcEU0
zdqRlsQM)$lq!yI(XUpcSRZMoypY)Rfbo1Nzk*rk}76BKO1-S?PB4qtptKJWuZg{>6
zoj>yNCH`^lsz==ow6Pyztm_LP-z!?Su17+{cQ{J|rN#}ek)j}^Qf`w!J;sZs=cvUo
z-$3G6xU#Yi{KimjtMOU4l&lqPaX_}G6~-xAw$sv@#s>pkxw;5LXW7=(9x3rrB^F@z
zCq`>oI+uRTMcCb~Xa0bjCn<7-;;6J2F`F$rYY-N7Ypw!53|%bn1FfMyMhd@mxU9$V
z<im!uR=vw#La-(~%;@VUF@9;y>1|J+uZ^BGGGBM7TsCR<)U}o)qRVBiiXn|yhc*v5
zNIdzyS3jGtzV8vzT<|WQd?v4vM&&QH_16Q}zr<Q$7hX_=NmO=yi60!a0n*Cud!%&G
z@VaX%s|*SVAHto<=N8Jh1=z*2qB_8;de@lljX?#VIt<p4011>lL*OWXGP1#IZu7(_
zPXfiok6=w4*8%lldA@vDd*ui))4+KKNr;16lE)%KWwdF%<JZjBZTQ5DppAhste>9Z
zLhw-4Ss(ijMMW`(bK9aPF?TIMC0qe)%?rjyCH`OLvR1AQ2a`^ROu?l082v$q{Z0o?
z)~b_=c87qO0oeS#48KnxorCv{N?zo*sUTE;^%}?J7x4m@^ZIa$ONvC~ynzPh0HUf;
znRXfzj-Y934`nHR_gJ$7Oajksu8@*k-UVAUdt_Uk^n@Niv4CNE=9X%GtmaXS<x+@G
zs=&kahVc$jp)QjPO4N^S((6IK4nRf!*k!sgMG2XV*{tjUx(+{5y45x7ofUy0!bXtp
z0&-VXTfGAryhVrpGiyzQr*pWo<_~L{=5W4RldqFpLIZy;U*fFEcb%)(z1KQ?jyB~q
zR&P5lrmyxEcK@UIEEh&W{k|=a4M58q8@&P%F_&NT=3MOeU@HBEOEhQx(0*J1(KzPr
zV2yMkSBM{^7ik?BmjuL|0L)qRPXwg*=m}&{+`!YpH;KUeqzk5#t+aFy`Zs4lp7q{h
z&&jDJZSMqom-VETxt|2Jp}~1yaA&esKFq-bH-|^$e!EJkQ4|Y=%d(N5n*w32i2cDr
ze#o*u+4(<%_b{rfB{>P9e026q=;K4GA0Wn=Prot8)6o^@P4|i8=X9c0HEt6WpGmXZ
z@32ps|5aR6FntuKyXE2y_Zw#lW9ffO`*wR@>s7STxM4n?G%Vf`HG#Id7jsqs&332=
ztp@?2%P!pS78u9)T73RD<`W|l%nJyipL<_QFVPNJs7=inAp4~BE1J{YY8@(`P+jG;
z>DO0RmMJFII_a)+qES+=i0FrCR54M-Ag!{&18_#ZIdTortZ7;!92$ec*;T#-r)uS7
zplnGWd|I_eI*0kH$tlPhqWZ5$OUxkqW?}L+=ii1yGaF)5R=7)&!w_St5ojpm&PWQ;
zHJIBX^ynVKLSRx{UE6QW(|&>|Fgfo3!|xVS!(3~aQ{*SubB=}cUt%LX3Ii^by%HU*
z8F2&&!0obukWnKuCXJtuoz5XG7)(b`{&z{U9uiR{Uo8~Ex7DV9P~H|Sp$eSPz9T%i
z?ny!^ND7MT^lOQrOXB;OiABxqI~><3LyB9Rq>=PcT_7<J-s$k&FH7Mz7)CXN5(Un3
zG=|-`HghGzV5CxsLRkq;=YaoJ1}7CfeT6v&j~k1w(w>&GI@1Nt$?1dUN;%woWd``B
zs=+i=Z+^!tSw`vW-tmUwj$90nXM`5Fm61z_67zhP_33AEB4_a&LUUOO?(cK`&ksyR
zsFt5z6I_KT=0agXt8j#t5|7~`s!uJ&LA-rm``GNxs#!KSxCh(HQIe>xQxpCCNvEF!
z+6!FZD)*eetzQ!C<L3`fmv%50Su>xNrt^7l#Jkp`CtNjmO}-xXn=zEHnJe+6CR}X%
ztciHH`vx;-_<ETU%k@kmU&JaTE49;SvBM$r!R!3Er8<cpDdl?yZs<}GhLdux!^X)+
zOVtZaJT7*WQP<kee`=&L&UhyzbKNDyEzrpReyp@68Tz*<khC@M$zd$pnP7lM<OgC`
zDH7<vT)usvYo~_!DY9#(+x~d^ZnkAuxmS8Lzp0Q7WgGW~<1fJ6m7Oz|L*8#E60Ltq
z4ZhnQ7w$eA0@W`9JB_PM<=j;1xiR=^^wUjXUGR7)bXYek^pt)7pEt*SqhF;SVsEF|
z`=3bRcoiJX<=L@vLnK8;DiFVST^!S(({=fn76N}beUFruEyn}}pQvf4^70|7nv8;Z
zevd%)IiN~Uid7oU(`k&+s2G==zfIeve{x+MuoS}k%{a<e2P3Ru0MGn^gQnpiN~(93
ze^j-lvqS1yiy#di2U`Sgm|k>j6`4D^ItLOJ$~B1^I4NJbcVuHZYjiLJ)$!3CmEL%R
z;XEW(Hu+?ukM1b~Lu%a5sgM=901E33>n=~?k->#FMpfpYlBg!5%PTRX5+^n_;d50(
zfHM^Lr0&6>)D<)I{e=Zg<@Y=WPdkcGser6FqA76pZbz7nEDiz(LW*XZpuM=8h#(+6
zm^JVhofv}XNe8jU3Z(&xtzo^qfS-rgU!Ksc`wc|WBRD<F3yvWYXl^Uc3FYm87SI5E
z;#kDX#}bbxJOCo}wcAAWw*b?BnLPKpbAb+wK`jw8VAX4^Y&JF^WSy*#jTUI+O?(5|
zyXAj^E>-WHao@?CY*>GVs-}RSCBH6V)_EhCRq;kx-m2z10i)Xt{b!t2E$eWQ7lX`V
z&YpYgZNG<(A1;#n*KaIOa?i-@d<q^0)RyK{Zygv6@JE;?nxI=4HHbABrXOjBGSGQ!
zgrMMo2gboDtd;c#98O&A1&$_q^t8FM9|DI`ydJcjMg^QKFex9i)i&kxy2kty)rs}9
zkfPNex8aCf%g$lD$|-Q4yFvlPz~l|`dlcJj?jar44%2`dFI>?%<NQNRzo#y6ngv!@
z8ncdL8Qp0V0#bSV4DyO*f-%zv&G-Vv!GJ@0psr47U~wu?d2^*%b)P@$`fiTRk{6Fa
z0%)H8FN>pk@!uq}^-@!%A#1{J5A#1`xxg{J$zKx58Tz>ROnN&Tsma6GM>R*ciTvAu
zZJ^5$Ff~WxSYtxnh(>oM&J?ePg;ocnfGAkhfzjQM^9a08q9pBJ%0g9twry`+wzPTk
z;Cr1_%p1gy!FH9H7X(qYZyZUpsXuPDI#cWs?}Fp)4Op`c(ChAC$|Lt$g}~+5nJk4d
z!WdFwXUqfutX9}-Qwkm(HvX)jiEmB$;2<e7FdAo9s;GnaePY!xjeJ{0#sW*Xcpydk
zrQemjNYS3bwjH~nqPFyo$85Fu3IggA?HPRxpuEDw#9XX&B~Sn+b3xArz$!4DOgL22
zg|VFOx<hKShie2*OijZsd83-K0BqS(SLp$;6H|p{lbF7qziQrc&<@X*#RIUw<V+6$
z2g5&t&pS{!>L|tiQ5;z1xK(r6U-?MFam}QO9!17iS<xw^^rX$Dv-FpR4js-X_hoAz
z={zxwUu4hQng96UK8|JrG6Up8!mS2bM1D@oeZaB(>L<uBEPVWn2kl+!20wNPrNvS@
zY%mi&c?pPpYocL&DD`l?OMJw-=tV=;zxYQ`hl3mxcRL20kdy>KB*Y~(f*F8d3=~nA
z^w!CeQ?Nu?(C@KaW28MBq^^E^!+Om~;Bk*p=#Z-X5P`IjBhUgu=$xH^kBtR4$qp!k
zcKAvPwGn31u|0O?6=%(W8O^I3eF2buGLYA|Hl07^02+&h(3-vX1Vg~%yD0zFP~y`)
zg}XJ6+L|7Se8HK1UNKSi{;h<=oB%C~!veChk~r-v#>Ti@I>Bg%#=SOcj9%q>o;(Kj
zkM`P+Sub7Uv}AS7YmjP$c8U%FS`<yc)=q0O7ycd)u_8FW?_@$_k)u7^*5y7-6Egvq
zp)IBg9IdOH(5(qLR|KKg66(!2Mlp0DHmaA%1s(v9QinMvJs=pi5l$g<v>Uhpe>S!h
zM8R)fh;#ZF-gNOFJcNMo1Q5aMD^fS#&-k7iC{h&AFmHP}-MUOA*h~^=Xz}V*Pe@d-
zeC^`G>nMA0J5T)3fGRzkM53s{)MS2t6oH)2NHpLU*YVv*!wteAw@b5X{5l{;=bq#x
z<%cGumKHLpKEzryxa05b(F4)#Pb#2_Ca-XlE!lPpn)?H#262a9!ZxZMn{y3}qQ60a
zgPhKa{mTCU_Jn>t?yIO&kmugih95dryy=M-=iF{bvd|)!;igynu<R#py=I*QFzFCy
z=1*idE4uT{Zs4DC{;^Q#v|S8kuMcw_-qLl!#=XA&-Hqy+<j-&IkWE<2_nkcj;sn3k
z^TdrdYwtCbRR<Q1+CR1UB5#m$NrY~Ua}@JkJd8f$eC-&zWuV+kbXFsM&le0op8vTm
z_k}N<E^x7>eUMFtgv!{&q>RuS4l?M!J9D?I<SZ_LfW;r^M7YJIVWz>b$A$sIjTM`0
z-y)^9!yQgH>{$05MnIiexcfO%HhY@8PsU4C%cy=50*i0~%Rc^Szce&xDuch|7@lT|
zw?G3Cfd!p)&qEWag*vI-whoN3!k#??RbC4{q@ffhR`gR2z6MxMBZKx*XX$$!nANmH
z;P9WjEr;N+NE01>k!SRu_)jSupfH$Rvkhw)y?A05s7|3Db4<jrOJT+^BmiSu(c>*{
z5Fy6QG2(kX<CqrN*CCzX^8=w*C&X(4B$a38ar^#{)m6;6L{4J8b0)J%YO+cE8}lt|
z`6^KHNB<nSD<P9a^wA<ItS#7-FiG1dAOKEcXBw3`%8}xm>{|sK=2+nis}@d{!bb#T
znQ7IAc?<0aelx7kyP*#vk6igRunCqgZAFT(Np{Vg#G0^S55J7rDIu9802;xji(jzO
z90V}c7{)@C^VK%t>v@j7vfUUI8R&H7TlI0)Sps-lTZ)XIo{R<+omQt2bS)6LXslJf
z-5Oh$uBk1mar55)s3MRzDBYhjvs+luAq1lW)*~0+ZvhHIAB6Q#7$gB4{I=Y%_QDPk
z<=L9`gsVWr9ZtUsx|s{cnnu9Reg^I2pn3|ebM2sz9Kv!)l-s8h0d$_74H~ose_lNp
zUF}H$>Yep_!en3(;%d^!KvmJMEjYIUPypXD)ov4ZIgTf}3ji2sKXY=>sbxD%NmhqJ
z$5jqbRhO0sSs96bFvveI*%LKfRM-pP_YDm<=Ka)v-}pF*$N?uny~HjKf8pLX%ZddV
zPN}uc{y&3^`UUVI;#!u8^q+l~z`T)Rh`0U+uZ;js0;>rM<GZin|45<$dHnR0gf6ir
zq=46YOe;#F&{qB|xgF;f>++{BM0s+OX=Ws4saTG;hoNIzK%2YU@bJDM`Z{$o2-0V*
z<%8I8Xn|vwA6py!9>rR{8wOmLcDl7ir&vu?6yx1yC~YeTej|9%CK@_#(i=7mp6h~k
zOcNr?xI~bQ-cgkc2e?OJs32kRr(A~5z$`!8u2UN6DWf>!8OQM;MIG9Zp>cLN6Zt5?
zf@~G>0v850GV7>QVs;4^dhQNNuS+YA8mmTNyr}rcFE{)U9JLM$%Ku@E83kY$-FhK$
ze5kaV_8i~lAW7$U$?w)|Wc@o8i*~Gc(+rz&PH%1o5{q<vlhin>bJoSM3Fn2-KY0oq
zm-!^&WM*WSV7wnyDC^Ic1kpu6(Q~4FFFWOkk7;#lZ1)4vgeey6_pvGSOtbgT5Ax;4
zVf;e_mOrwSAI)bfRX<Uh#WSR?okp6WPvWCt3N;O8fLHL5O7;cH4gi8oP9!3e@lcJq
z@)lLvwWGVtu)_nk9}H%Ck8yzEN{U$!M;MYXK<5FILQa%M$|nE8i?P6*?Sm*l0RfGW
z!DEI%x%F%fQM1WbNoq_pss^`OuWR|o5WC7Do`imPN)pyv-e-Q`vnqB<HY}(YoKAy5
zE2X=hHs+Vp{*8tCz>Vh3>qU2_b6=X)4Cl{9U<P`iAFbajy)}Op!gD=^M0s?Nutr3w
zEI|Ve#2ejXmlC=jNa&1P$N)54Xvv9q@k18G6u4^fU2Zw6J0BBGWCmC@$gcm}XqkOe
zJ@9D6{a2x4KLCJydq4{RnsIaE7{VMbwd;F3T@A9}dGMW|D|2{BU6KS1yLWcd^B&+C
zpl3xX^pLy_WKk<KtiXDEcf)K{)x@^!Wv^&F=N|^O{=y6bX*f@~R~N~Zq&@y;Yzt7t
zF@vqsgjo3giv{6w(D(*l)lwMcG*B!AsYRp;(~qH&0H+|h34p<z45gGp93k!29*>&`
zQE!=mk2qWUmruFnWUR<ga0Q7r2bRGj#Q+7s9~tb-g_Wcv=f~GK`Rte~oa;0i8!8nA
zfCz9+5&SFk^|V~50(VVW%Bt-;`)o0`BMn|STb%Zop%H@LtIwSJs-Y2n10Sn3_!0;x
zv5?^@ly@dskY{(9Y(<q(?xBmU58jrweEe$Q*_&DX<+%Y{BOQ&v&X!t;9V#aX97$j*
z`sFvq<JWp%JQ&I6RyUgcwe9Wvjg6ZXVXUZO-b8D#o+=K!e73xxm1YQTNDi_qftvI+
z>_;7=KKn?6g}1a#SYnX6C*YkYzyvUFiJbu(h&iI7+NMuFlB?Jb;H0^&g^TitDX!3e
z;9n~HNibaYb9}vXVmr7L4^h#KYmWxaP#Y92JXgyUNrOjm+>&acg(&Bfr}K$s&{0P@
zK>~4|lW+ApESh~x`!m{y{S=_A1TIo6z9G?JJs<?8T)f#JdHCe+WHOJLgNxR{!zsSv
z13u{p{!vo0trjTOeG8hgfL;r$nSUKbnC_T{w=Dk=-MCjYSTj@jX%^^8i?{QNc`i1f
zf5tRo>54ee1l3*TZ1)bFciTSFV3k{u%br2b;bYgvn#*1#FvJ}e)YLsd;kEY6jxBFf
znG*v6clUK3LJsHDN!l6Ji*hH0?fTu$erJeB>W5kHe`5}Ua+4}?{1N12F#H>HS{i6m
zZ&m#<|8&wWNpIM*B6#ny#kk(&bIeC>RqraUm%n{%e2?5pb-NAjH+eq8Kw1v|t~Q5j
zj~-G%A%rdYSXuV<?D-*Zpv0+B<Ab}yf(-?dbGIhu>7`hu<v4hx+Xq;YzjuB0NQ3av
zlR3`*1)4}P`h@zShSi}2YRF?CNIC1G(dcj@=7U21)EVHnNq<xgIM^Ho)t}FE$u3IN
zaW?$H8T0BlhC{~?HB`MeQGvJ?;|~^;ysN^8rfcp6m7&Ql?a!ccwLQC}&WH_-V(4t(
z0nL_}4b~`St=#<8uYK<6=XIWHP@BlD=(xI=_+bpd7Se*hT+jP$P=x<kDpE>$bg@KF
zyHi*oU73=KR2m$d+iHRHaM^eAXPXjDHU`Iq%HYu3V9OXrz5lFN&tMyYKc7EV9mO;;
ziwr{MsG|eIt{6Y6;gp-TZHMgRptDaZ&cl`mL>2FMgX7Hski`ff3x+u0pGm>2cAIT<
z3jh=X3g)4usmPZ?D|dMJ8h}8(%M!B3%}|NjDEJlgN-KHX?<8q~XpRc;NT2CdKmy2*
zfx=|}a{npyG1z%GIk2v17f(VRM_un+fdG@M{2q19Qm_<iNgu)-j-@~eAx!n4(*<qi
zcas`^09Mu!e?MoJNi_4Ql|2LmON1~`8~u?uLP$$hn6Bte?6fmyMvDFAmUzY0z91D9
zS%-v0RVwdTS1Ox~Z)V`U<`16Uf`t^d66nWH`~l1fq{ewzCSdIW|J@2AdCWF%R3nA-
zjj1nxWtbW6z62b>fR%b5IhYp7E%<>qIfxTv&~4+G5iz@g%792SlolV?1oI<dBKm~N
zJ@|&z@~7d@J{({TePehI!rgFP=BT%?AT8$7&0$)LWjd2Dtvc)ph&~2VnZH`=+ZWLC
zF616-{j}UhYG8Lg-t7~QC1VY-cB`Yl4h+EV_KcsX(31n(xHOwP+@<#b7^Qz7a1!Zh
zh2&%^?4)RUA=NH-Z<Z+BI@|3z=2Mt!8~qXNmFWJmEpMl?fK#55EkJn$s~Rb@3GFj(
zn&lyb#90O1)4jSv=T*}*gSInKrNdLM5zxTyOQ$YL+{J}lHC@{tIT?T)9)8x|Wp22D
za>{WjwZW^hwo9_*;a@0XAo9p8OXq(*u`;C;EzgwEwn{sNMbZ)%p5s*`>djnDBdwC%
z#GR7#r3>TkxE~i?T*hQL*WXd#RFK+cjd~V7k=wzRqn!xz!|72gX85mH$i|?dL3Qxj
zvfo#STyii#zz{~{F~sQErl%@H0Mg49$dZb)k(J{^okG6kY=A>qhy*+^!usD2J#O?C
zy+|P@FaxCwh~Z_t$!@k7$AgFI<o8?ixf1AsjD7waxt+V>4rn#9)~>XKK!w@l?!2Jh
z;ES}KmSxlkq6V4uF1$Mf&p*8(y#qt{*88`R=dXAA79n)l_g;h0Y3X}RU>p+Gd#Sg4
zqGs&%8&88zgV^9a^b7ERl?{@8g754TJMkV&eKDU17NrZowncdxQUe1ERd^*;xWV=K
zo6H;Zr^K1|B)kZ)!I2iY6Der>rRWl2%`k^u+_voyBS*^Q>ACwIcwQ{DTGCvsb^H6(
zmhQftH++#+4t~witgG8P2h=VG!LyKBK*in{joNH#E-DE4>D@aJ#*Z#)11^0*&$2D`
zqL|^K3&xS=qkp}>1m8%)y5QP#!1f_#9mmM)WRj(n5KiV9Avk=dG{u*c&X1nzS;!eZ
zh_A>XL^M)sAT?W7X}%S`Hkl+<(o7{iy7~Q4z|^3O^Pt35Sxutu4Q*nd?|!heU3M#U
zSM>sEA(_u&4h)(af^8M4*LQt6N=@gYfevx-D5qkKkh)|;`rt3wGiK8o-?*Ox@9tEL
z&bJg)sp7i+QaS*o`wA%8&Cui0wHCpklvF(8c|n8hAXdFTtF_kfJ~Wh{en#T)`cZHv
zm>wNi=>FmsXCI$f{VWWKU_9`?un4-Jx!?n%^V>!~fh%8Og;kL>1oUode+?8b`&>Gx
zN|{a|U7pw}kDYcZOKkHf_mnNTJEYI#A%|&60PeN6Syrw;vHKVUl|S*ZLj){_uLY0g
zf3>R=^EMa2r<RVGaC5fa6Hk6bzl{&xD7qgI4#FRCa1`N#h*~<b^t<<am|&--`pQ%*
zzpiFnG!TVd54cL4>IX<Cgz%2xh-T!l6?P_!ff6Jw&n9%BHZW|;MM-iI_zeKoi?)fT
zm23TQvP2XHcBtJMJ-8wt&g>O9EjWCS_}ToT97F+?IM}d9!|;NhUgP9oP4rAp0XuOZ
z)p*XeoXs3A1_xyZ1e|374iz%WZXklLOOr$6XabY)zhln_XR^*bz+T2j8X$d}k<>jc
zi%ZzBWvFDwI$u5i2c3?T7sGW~*V^Yu^3YV@L|tL${Tn-fW9*+UVZV2s|I!eXi1UTm
zn^$G-W4@K?B-zYaW_-%c{h^Wi3k{uhjI-oaoeFn{9~{|a?WWAoht$_$77X$f0Xy!V
z^X3vfwwHUx&1d2D<E!De*f;kwQLf-So!qol`x7+>o$P-{aXGzjD&uQAseYrZGhqEQ
zCay&`Xwbm`e|^G%%cF*0XxnA+)G+-G6CJ`}NhoUaCT&CcE~zj)h;dd-r`gBjDWzbz
zhJ15r^nQF_N{gKl)KSsSak4C^S?s@uXM;dor_!^-vmn(;%NN}YbXkP{yu(*N3a4Nh
zk5${)g45qQ{79`sYB%9T^>_AS`a)Ess(Y=K^KL)8a)XZTaQ)+Xt#1}0^|Pk0`#HZl
z4qPs~8<c}L?I@4to<X;2Rj?nof*^ht7(|VE68+Zh9h11#U`v-rvmYUUS!>hQ7<34`
zzu;U9kfXk*&zc&(<}mSNPRnafMpqnXeh{^sm-d%5B>4n$i%wLV-2=<z)t_w}S5c2V
z?Gn)#UpyOCXeuLDO73}gMmbd;DJo@%ZhSm-{>~3$ryF{D!EV)r)WFUhfJ3E0b3lrv
zsOF=&o4{uoh$e{^tVc3-EGl#UR<HzNk3+sSqH1aJ--ZErUr?u6)cVeD34L{bzDv40
zaqAh`1S*K&W=ad9OGRfJX2<J~m<kWI9KDBl2F-3&OQ4E9HBE`7k#+i?l|UuaGPyd$
z@bMrggIO=r%Xm9X<2+@!I{fviVYazb27i|ZRMrGnggxa6`>%cJtZxu5LErF8tAUqI
zU*R9$BqYDHq54!Fx-et+lxqpJS$I=ez*1-@Wi;@x>ST{9<-cN&eAeV=16M!VyWroL
zYh$_1lSIy$o!ycIW>}kyy&G}(T-GaNzxXQ{_vPn=VLS6i^%cqkGf)=fW;XZTF*E?N
z1U42>#T=0{FoFPc+P_2|&+a!<38A83K=S|CJ{R_lS0iw7@sGHI$8iJznHg1?_T571
zfYPMR7iGUv><9r!0_ediz8=^o_7#)j<Gf&h2_ew+iso<~*cX=8XUx?9x<pOX+dd?V
z&}Ds18?%ooNUH$SR5d<v<0Erw&|tRkAMk+8`No2pEpOA&dNoNO&{*Fuz+ZGjXCXaz
zPB|FO;sITIBtfhu%uD8<0!P$@MAvxm$u-xOIm;oEovx_vrwQAThO0d<LI5Llw20=c
zb|SA=NopqrKYjiy;d6itAhI}cai^4kIdm#5UxUqji2ud@Aw^YRlJVc~M>8W4fbdDW
zmRIx2-oGV`NQlS0sN`QExstGMwAVfB%59~Q0eb_{);qO;QkAjS@+JNl7-)spaw!|}
z(_0<g`9)yRT}kS;cLAV~qJvZ%h_@|7d?;9wmi2OE*1}W#lp+t2b0zL$0T?VVx<piH
zW(nFJIc+FD6&lDrQKchyJVa6h#!2}O3v?r?jfFIdrMxQTdpuY?O4^l}N`L>&aoHbW
zAXYGFuOP0DV$o}S*_eOy;HwlcMo1^SA<XHmq3&XTojXx}Kw&JkbI{%18lpwWD3p8c
z4z*d41Fj58R|~snheH5gPC~5b)ck-2*9vD1;1MhwCIPsAqfqWhGpg+%R@4nw6X1a%
zK`rjmpf&hURAgby{4DIQza30KxGy$ThvZE4*n*NbIP17sDN-!*KVDKF#xIDzeVWXb
zF?p^94#|R`K}`{pVR=wu{ULPGX)ht5KaQw;0ANoyw}5KnS9Kt0^^6~Dy*MSomZC?0
zIc)cv*+bIU$A`j#^&2vloeOscZ(^f#*v+!is=?-2BiqsrtSGvl|M)|PBpukld+iRj
zSu1PtAu+1-P83+s>X2f_HG`m@g%1mUf9}sGWV&3fnJ&%K?a9&ISku~L6b+AP_1Ary
z1L7eZ={xY!<oDjs&>WWF1T(I6;P)8pP1h7*p>j^ZrJi(wUQ|_grrw`UTVA4qnck+9
zoj6imNzDz1s(nw!d#zepKZCQqo((NnbUbGCHSn%)7-*#3*cc+nAo3rnePJA7G8pv^
zX6sM9K)-zHOb&uTe6%%wxUj1#C_Fy4EXlNV+)V_a<Vdz~y(>5^zEO#@(l#57hEJKH
zX3=oHyKS+^BP+~B*d)dCx(i#6w|-W3i#3(dus=>8%}${4qG0{AH&aEQN@w-W_0i~G
zvj&LCrPOVDQAxeqO`&wKZ8mp7*^Hl{*X{v8$-Hk)#*RZzhmRuwZtkfTv8$?$n<XL$
zYy~STI8HO#%j-Kb^66UHL_EOrMvz`5<-ACe%zb^^?3DYU)Z~JGI%x5o?}~bGm~ydL
z`gt}4>AQN=hzwpo0J3M^g(5ZlZ!o9$(0dsRfg?$?h1d2yX->4gdw3rx00dBi!}b^b
z6GG{$D*A%&Q&%6mqRJ^Kj4WW-JP$R*R}6{+Tzoq=jh`G86+7<A-c<vt*uc0ecSg}!
z*IA{MkBE9S*BbX(o67KOg(GTKRFg>z`wf;%E|kh-fGySDRHYFBrk;B8BpYxfe#MMO
zc8>*ATbuUc$w7w&55TDyt;oT{4kJ?C{LdE6CpjKm0Kn=&$q6OZYAl`6tIzI#CU@5Z
z!SU1XcQAPOtow>)uv8&HouT>9Kxv5DvCjQvJHZ>gXz;09CP>viRepDf36Mi>aIWjn
zYs8aZvLn{E@KtP$tmweDJcEiKT!(sKUaPMvs_x7n3;SOI<w~T?%TOoh?@SlLzG#79
zjr)4%m>LO=ltEP1`67#zv3upOfg_QcM%`1*qY`91X49z;Da9I<J_{AnSImfK(+4_$
z|I#Si6b}*&k)FSY3Q<vV$~hlhebpp&FeBR|oAeu4I2;U$A+|^T7*9f8;7WXWz#<c8
z>5$4?bKroBHgc5QC8!@b3-w*8&VAe)0bDDzIbL*8K#ym&$Q4*jyMfb~_BR{LhK<`~
zli*>l-?@sL3k5xT-R`r^PTkD7lHKcOz!;S{bf!9g8%e_P6sJCY6yLF_N4uj;oy+Es
zFR(N9p9ef{k7bC@Hi*XEIa(5R0d{(^N_RhEN*YALKF3tGwOe9I<0nzlq7iU|sQtm(
zz)sRv-E%THu1#tUd@iB`Po_F#5cnWL-U3xfJaZW3sjXG@7$i13)r+%V{W(0Art^2i
zRCa;mk-Ys4tcO1VM?76rus&L*cO|d=6Tb#;%41%>pm<&A;iJ)TDv5fvhB@M}$qCTl
zVWC`KTRF<$^Diws7BxOVZSC#FA~z>FQbgINyMvrON-!MWK;DeFyDbF2rfv*@)5jK}
z!^_pPhdzM|WcjDW{-VI*?7KWvpW&9eK)!A{!Z;<#+-`v|jbu~TReL`#e^k~7ctGa%
zl>EJ`lC(u(*w3`txN{?||0u5CoXxJlr%SE-_HW(&M}FThaGT{A=miFO>@O77w9Q7n
z;@qUiTW=KE1BPme_Iv)9tyN{AQ}3sHs_7Fh2}eD-aVmtFg<}4Tt5J#7_;hqRl&5#h
z(5AlHKm-j+1HxNc{f^Qygmqd#Q$V|TUq7}&+(1fR?58CG0%{d9crA)?6Yt^VTgZ>+
zw-(n3y4$zq83nz5SS%%Q@@2`R9AP-sEwmic>pFx@Ns!uz=-<w|T+>Dff=KYA`EE^5
z>w=ROT7<}TdXIi-6|;|rY8D8KPX~_{z!n@)4K89a(xnkv-wEiX;YFwR6@;BN%;^fp
zG-MZ43wof!=<YMe^%}-dgD+`TgHVUCX2w9=-M)fUQB;Q==7>YG1`Q}wd|yS#AR6gb
zwtbHMiF$!FD|Y$Z+yb~fJ*O+e=MCjl11G3{*3IVH{{a2@uU~kl@elZYIyg_jKY+y<
z%#YWd{)&bA+tB$_Qq}!AhD@Zxv42`6#x*H=F@7r`%5RuAg6#_GV*GHa<2$cKlb*%K
zwng`J@y5GL+v^I3$C35pnzK#CYBNb2zl>Ls>RwMWLQ4_LMQ7RLQ{T#mKtJ~t=h=KQ
z?h+OMA0fQX6?&)HQkxoD%3AE(y3Q)iGXXIzjsk0MjaT(K4MM}dpsE+M-p|YiK~ykf
zn=^jW%?`|-I|N{s2TBQ%2;(opi8<qMy*lxOfY<g};Mvq4*McI)&Y%m#(!HZMg5v=n
zndoTs+O<{KSrNwJ%;kTX`iZ!R0&BuLf7uRy>Qoa|qx1CvTgKg?Oim~`=MwI-jSW9U
z1i&|>QKNNV_;uEk0p;0H<#8HtQ5v8=ij+!OZPbS+rr@z^I2Fps{?~3H6%0&i@=J&3
z1t*`j2%{bY2<gt3GW(0D_uVbvT6Zp?#608*NPv-JMPnN-wKaHw54i+VW6skbBKz2S
zZxW{*eTTRiUG6B~BgtUKLJYUjTAx%?CLf9ocnVxCo3Dnm@4gn)HncMhzXElr7c&-(
zjD>#1ech;dm6`A&(_kbU=%-ekB+Ec7Fl~*Ud@{hNt-b^K<`_l`80U;@0=acX!Csx9
zQAH8pl#QYvC4NV@&aSozFXs(+aPjE<K-*o6q>jYUF@5!VCKyJj87n-}52ZqJ*=95l
z;qsu=?&9vTBX3q%a!`YMXK6{rje{Y693}`jirWb=Fnf1fbrauY_XW(|IIBn&z;;a?
z^^AoojP;!Z2syaT?y<=Mgv%Zz!g>Ht<3$}OABf%2#Von+!+`G34Px#C{(6&_L*4TZ
zyvMl%E$TBgOfqq>Id?rA<~N+BD)}k~bN8mQ5-R{r8GX;aM+st8;~eebtTm0g8^?$>
z!NsTF4mQ9eiDD+42ljHBYu2SB4Ft6F+}qL->PW-E=LQQ8+5mo!1Ii=uTIldor$;bY
zYXA6upSr7r9^U<j3}^ygn;g-cnMTOJJRpzza^MTU66{DI5-16wwu1Sh-<U(IXyi6@
zg|rZ=Rg*<^G5_Bu$#)-tLB{^fPhJYG>LSAY0F-(Jpsq*Kg?t+kfKRV~N$FyjD<o7j
zR}^hEb)6Cl^PoRMAW7(3NuZ76x`tH}a&X;Yw8o8^AA)|JSym&RdCQsaAQJMUHtKpI
z%rbYOT1rl>gZHgANZAD^LKqEhbSpQY)X+D!g0<YUt|n+*lU8!3m?pO21WJsWFK~Tk
zm~Q~fYLx1oBvYCJ1#M?=f1{$|{Af7CA9F%#XW=d|49RPp8iJcdL|E7wv&@t!BHqJU
zy2D`OR#<QfzI6_>IyAo@DYg-zJ}6JuEP2d96ku#fx{<2kj#Og&G<i-;KMquXEU5<M
zVvuL6><^U8I?AuUB%$(4@Z?Y^A|+K~3dFGM8KyO@EX<OqR3@l*j$%~zYTbZ^f&#S<
zQ!uK6`7fS+5){?j*_ZXpbaRcg+o}F?c{uCP(50W=1FoJx3QxJ+%C~~C2%*WP{Z4Ai
z`=;ea&<bMo9Y1MVxH?kop4|%+&!aprL3r(@&`7?m_WwG%5`QSyKRQzBmYWt8x>BeZ
zO2`tzO}4qYvJ6E`H(8P~*ESQzyw$B-`xX;ZM#;Wq87>o(vcy<!qGB+WW?b70GvzgA
z>G$;e6W;gpJm2Sh&pF@oW!FCjsCaG;YdSbYjpz8x?LLQ{YYF0r$71x&G>=LerzFnj
z7xpa<`J6sYB>`<Bv@GLyj2`|gmJ!!RZVWl>ddN&KfwMR*TJj2bmH|C@#+wo*3`FrS
zwsnh*b7j3*B_h9Zh~7}w{WR7YSmGUV8{>DjfJq>_42`^?D{97yIxuxKyK-y0pHH?^
z_Fcis)Ur;}T)rc;c&t`3AP73KEg=833HP!@d@=;sS3>JxC~@KZ{GQiQb5|?>=27t_
zdy_GwVTwfWPhTuKGJz`sKjSXyV5$XCc8R()GOM9`ZxxELN#s7w?j-O;W~Ng$>^UFO
zS)D?6NhKp5xBNCR_YcQtP}87S(nXk?e!1S=QV|7?IFXegtvI)}f-6aDS!)g!R!DkW
z+vZxrx&HH^_hH33#u_y2W3r)_CtJkCFp$nxjDO}@N&HWqvbQIqMXR8rEgC)IAc7P4
z&nrh4H;J^-(PD7_N8K;=^wCIsF&gEeO=XK1i4)m+H#j0+P*>wpHuc>}Q?p<Uy5$^Q
z2K%hktcQk@B$mFo+W9Q~FTwV~6HH;e$?1(~upNAYx+eTr9*mpY<V*Q{ucvqvowY_@
z^Djx?vI;e@L0V#cp8og~G1bIiH6C!4$FM2btT36{eOtQC^BO6yskJxYxTU!Q(_jM4
zXy2t!r4$%a=;7<qis#{Sg4kD(@3hWFJF?pH4|=ssW`KDo(WoD+q0_lxQRJtVX-hZd
zPu581BQ4LQ*DvOXtJ{$;omD@u30xKcnu$ydHT;`QBaeF5+0A;v8TKj6Mq1JFP(06L
z=v_(x@ePoHp$Gzl3DZX&m=S@bzxej-Vm2?y8ZA5UP17n87w8J-Wg_goCo16bad3U$
zyhrWnJ+8UH@6e6x5;QH#__+Qzalm6gs%#cKc~#_7B6!aa6Vnh-mT6cJh7!7t25($9
z%t+4Md8<_&|AQnf7tCPDK}+mcPT^K{k2=s(w02!kv~tJaazIs3xtlnU4&Wk|<)Lxn
z67ff-6rn_wB?+OER_CvGz%eNSX0XpqWk(KiF~eykmVxB6V1^oDfNe~yWJ>&-_=bhr
zUasvD8x$gFk6G1GaTQ7lCiF03pqEM7equ^645`@}0Hc8s_AWyojKeo_a1=4i{eBu>
z@C1szmK__+4Q7G(wbFMY4-ydX5fRSn)>q@s>IvK0O<p!YwJ}(>L7!8$F|m4ii6tHy
zl{+*+@^WEHd_4dirJO3x3r;J>ed@%#E5v*`3!Ya{GagUdu9(6hP`mB+GyRl65o4k(
zODN(0_&CYe@~gz+rx-m0CTt$+sc-F-&|f8J?$7)sfYr`enXq;fmjD|J-L3cNgju5<
zt+-;^M5z_{OPOuun^B&`Wbws<Cx==Vv5V}NpuA~$SU7o0*}N#XZtWc0xVQ(?)=;L5
zc)Uj=N@ST&APy%7h>~DDmL(Voa^a1%g@b0*^TSIi()suv%ymXTn*hSO{_ur{#L)1H
z=Zi*7;{WOS=*o_`ZUK&Ug#XQtA}rZ#L}76zSkU^Y+zI<#9kU_|m*o_|5*`O<guMQ*
z*0?^yQWQ^GfRtu_cV4}8bhwow_2&ySUX0#SvB#K<sWaMJ3U2Hy)@E3RF$lDiKV|#X
z%$`ggpnKddo0IA`#P(D2W&CNsM^eVi@@+pg9n{m-K0um9A={sc&m9`iay{o}3szJP
z@u-Wn(@isKU0KK{4uf=@XyKfLQ7(RFK-_Pk;ghH0Wsbk?6p`0Ae=S=R(&%d;h?F~m
zrjlRJ55m4Rrk|C6+msd6N~xXc9l4eFcA6itD^9+bW2<ECvltEBzZ01qgNy8LK@}bs
zu3O#utQmiW9bz7HG&SCR7gMP~wWZouSXgF0yZqGckmYW|dOMR&P@qQ5xd^qz)FWI!
z2GZR^vnzE+^pIsxzP8|4^$nW^jh}hO$%shJ=k?gT`#1tPK5oTh<_jM4Sv-b#h4Kwi
zwKtc)dF@;x^y|Z5^I7wvpHlx!Ou-G(IeufisnqLIZjc{S8j=DpC})f{W?DqJIvk6u
zjN3FbaZ__kr)ix;p=H+n)T?3(8!-lhib&PH(P^1reEt&maFD~ns))f82k@c_cpqoV
zj=`ki!>1&k9}M>|7p0ZmHs?|gy5()%>|1KCj40wI)JV`86UOcDf%Ry$1Tnx;PdAHE
z*j%#n4q?Jc3%@-UWL-p-@faU1+vob)%vci3X0d0Gp+3ns+gmZB@T(m>PUdJEn)Biy
zB!WwWhbpPB(16j)_<`mt6R;_vTY78k6(k_GZtxNswz&37HDduIoxfK~mR<)mquaY>
z&4AF5VL;nw8!-HwUOGNq+bwm6+WpBS&k!@q4u19+w{Rmkyi~q-Nhp=REM;wnq9+gJ
zQr2FZpW`L1@<kn9U@v2+ttz}Eg9oaBxTg7()>ZvqzrseI{KJA`#ae97cGG)3rxQp`
z$`=hZnF1g{yuchOAcV!b<LIz=>5SW7%~2{EIyw<KeOd*_Rl2_*1=>^e)Bnl2u?8K;
z!Myiez^3efz#@GSforb*9ieuM8&cF3h<LEt@FjY6-7~U&dT`3Y@!f;n^uB$AjbMW#
z6hFE((cFc;lZ<1cIl1o@l?+?uCpCQHdk)OKNwQRJZjM#%IvePfP*<Nzmg0gmi^VvJ
zg0%L7$;R3@eX%=Ec}~t))8q#RSbrh{ILj7Fp(C%)j#!)Of%Inn`K0%=SaB{17Nai)
z#vYmeef#uZC2p~bPH2Q&KCm`srg$(n{++}KgSye({nBxg5CmC;Hl?*6o-A6L>$bB<
zZpxyBWuPrbyuKsK9DoCMAt{}H?AK%#GeZQJw(*7Z6#jdFf|9h}7fa0ZCIbS`{us>8
zN(mcuAW7YIdGWn3FHBe-1HBZDdo;-p`e8CP_NOiv+x&r^j1a(e$8u!WhXLHo_yP4<
zn?UwM@8T^Ro9~F-=Zp-dJf{GMy?5r_18O9FSjUWGmM|9Td9IXGcE^jI1vG3sVp+-g
zojDn8U%$-o_@#K(#O<OOQAd;9@zrtKH3gX^>WZURkgDEDvA@OnjsLKP3GZZJbWG4(
zNfL@#^M-KqYQ@ITktMBUL<UDm0+|h>Oaa`-5U^I|J=3g;tr;fdhOb3(!>`5uImZM<
zP@wsqDMHifzb3NCJM@#gFSccd$ephs&n7UAoxqM8fG2Q$q&VEK+ktc+tgR<=G;*Up
zyGMUBdA#yBG&92yH)Tfr2_Of}5oXWM68zcyk2EAi8*$C0ofc26mGU`YOg=R41MeSb
z{j01g@6A22m$N8LaEfnF9*nSt?!C<zs*`kSO2r0%GcR+7!4;}2z^#l!FBrLcl4&n!
zmRr}Vo@m~Ce-I{eWN0vRf^BPo^Pc>lUiW)f0%h~Y$aN2Bt`*xJk6i2Y@LNIFEwlWV
z*5$oouK%6$VsLlI`0<nYdnQv%!#2>P)uE%uu9=)Z<7)V(_Nm~i-Yr4@2V(r^7Hgdl
z3sO$-<83-bS}GH9=?k_qOvu)%Yb{atFZnH?-(7dr@;RGcg?I))YPHJy_?7br67GSd
z{Z#Et!I^!S_WHSx5+K7%Cu)N(58c^t+KF2bnIWi`{I~Nm@SK$edIx&m_J*EEp~yzD
z^cy{FRFVEqW*zL$WePGSzQ>-_?9v<So?<)f@JbArx$9v7Oj??e4;z3-FEn>F><3e?
z>zB3rS~miv08_E@Tu}?)B-GM@SUWuEV)6IW4-b|6zu6vCC9vFfm4PMoK0BT?FjTCI
zYh2Wue4Cd(KUJ*fG<NXG*x!^D*%t5CFTS8N@Y|<83~KLv)Ab#3#1Uz+TEPvxsH!<m
zz0y3$e#t`iUu<B~R-t2K^q-#_v-Im!6bD*+QPD?bM<Q9~N@`yx<xI9$>DsFrUUOGZ
zs~;x?v82epxBG*>y5^JS`JAe<<cSjl#Rqj?bap$gUO=nkIlgf_;;uX%ve!;6&noCY
zLXPX@V*UEy{nNFq5BhG{gltD4ar#?@dbMfuw5MJZayhQxnP%E5&z2Cdd@$y~H%eGj
zR?eQ=rCrhD8W<n3hJLU(hS#)gioZy@DlVmYozT9g>FlW5X%jtD{?%ktu_|epK|N`R
zt2LI)A7?fgFI6|AfK6Ysc4<(8zTs%pEdcAC>EqDxv1_vH&Ve>iKbsooq|#5pJgPp$
zi&}7Q*2z44U-!>sMi--Nc01dDOdmgD<r_Gzwj?`H$?$n}KOFlVVQ!adb|{fi;|U&s
z*zf{ttLIqtdvPOlRby69hi5WqgY)xG;cA@R&JfwAT)&Ro-<>H}maT(klkcX;arO2D
zv9f<gV6utYRU5F_Dq8-U#NHuX%h8eDG9YG-UiCsv_J7jGPqNL9lw><3b3;Zs4vX>=
zH;?zlw_K&~WF&HA8mQmWel1Pf`DwC}p$C0iu-4I1($blDY5aOV!fo%=-p|FB-ZXS(
zEi=-UoQF9j=`*ct5w}-Z_2s_FeappA=FT4pcpjsOO21jS$v;{9(&dEd`!6aJ0oaG`
zGHT2g2irkWyo#M>Qs;cGUEezJAvMrJj-On=aVOJY$hhfp0@Ai8-XUMznm5JJi}##9
zi~AE$aRT0W#!H%2QSHd)Q<mq`PuT01rwWKSRfc|5cUAw7E^mIpfYR&-fcetGn%k;#
zp1~vQ1!$`V$0w!BefCkAymhX6Z4fyu^+J5X@gCb_hj0v-Bn<!dty@z|GyJNEfc3)6
z9QdaSRa7=8BrZN&_t3g>??Mj8{=fx!ansGDkEtC?l-!QMCHi!>)A(^~h!R<amC>}T
zz0Usn_I<m9psia^epsUhv1`x1pXg9N>`N#su@XT`JPhBn1Jz_1X^XRaJLeSn%&9Xy
zAmOjV;_1vCoNzNqk}!c2n!&s($aS;%c*(OuSj_u6Jmcnk$aKD1e)FkQ>i@|VUZF3g
z@D2L=`_f)bl%8b^L<TSkSC}>M7yfWW(*_H|($~_epfMvkiS8|JDB*LoJ+56tjJAA=
z3;%Bp?hu+d?hnt1aHE!(7}fn_$c*7;**$S^OrYBkXui0|b6zMT2_30kgfx=W%v+4;
zH`omDF7WuayB(kyFi^O$`gO_|x>3st^w2{K+hB3iP>3&!Y!v;GJ}I9HpF}M0^=374
z#iPZrQ!>@qV9+)-ka`sPTyf<$#ZW=Rt!H|Q*qJ&Xgk4*(JwzUm?fv4BG!6hfX#p$C
zbp#1Gw~bJBXS#AkW91+0Pwqf&s8-n(^)UEd=3WJU2k!F}K%YjZCR~>GP2X)^a+Ey^
z$z{YN+Y%346u&yH+gz*mhJ5Ac_AS5syYUH>HRd-4BB3W`H%j;46T0OC<umq1NvzfD
zZOXP6K7J%Ie4GPBntr|eeMfF;yJ|C~bNkmYBM$`5Y8KKl%%_sZyFs^7?=(8p&>C;s
zAQK*<<QxunsxW`a)R7}^87g#l0Sg0KGudelw|Cc%o0(0CV%KFRMuDXc`cX9cx;x9s
zpEZoo0-cJ^i`PY4W<`gcuZ+{66fwgGe>DwmVM@94y4%zj=2EjhP~(!yZiF|NZ!|cU
zjL6plL)*j#BCBN<2PC_rE5s2!tmJfP;N3I*^Qhb&gjLizGIH<v-Y7Gx726HryXbln
z7L>SlEz?)u+c%dTmB5+CkB;26G}FPA7l$A8_ClV&jJN^fd{=`+)V1c(>{x(zr+~8j
zGx}J^Cqg-vIb{F4H#avDpo|K+Gr9>C_4v905ZHD!03_S7yBm|Q3=Ghp$+6QFLicZr
z;9xfqqO#sE*zUZ8p<B4L5c-*~0hi|SZ*>H5xY<Uy;BisYnTA4CtL!+fXVtQ9^jk(g
zM*a6KaOH-71z=Bkpll%;SH~!^)e=p42lK7r_ae_mL#G^^7cy#6BQ)JloCle}W^O$?
z8!l))>}~+1uLDD^*^;)4_*(3}mT&XAtZ`4vXEIX|jt@V6SpPz^@z-_FTig16p{QoT
zP>e|RTUk*)3G<D@pchj68)JO?K8+R`T6blgcyrT~3e|)hYjTOpx_pOJWLPPe(|bMQ
ei0BWOwa#gZtFk9$T4}0R>#q9d8G8iuef)ofhjWnt

literal 0
HcmV?d00001

diff --git a/examples/llava_example.py b/examples/llava_example.py
index 3d22b492..4da36532 100644
--- a/examples/llava_example.py
+++ b/examples/llava_example.py
@@ -3,9 +3,10 @@ import os
 import subprocess
 
 import torch
+from PIL import Image
 
 from vllm import LLM
-from vllm.sequence import MultiModalData
+from vllm.sequence import ImageFeatureData, ImagePixelData
 
 # The assets are located at `s3://air-example-data-2/vllm_opensource_llava/`.
 
@@ -23,11 +24,9 @@ def run_llava_pixel_values():
         "\nUSER: What is the content of this image?\nASSISTANT:")
 
     # This should be provided by another online or offline component.
-    images = torch.load("images/stop_sign_pixel_values.pt")
+    image = Image.open("images/stop_sign.jpg")
 
-    outputs = llm.generate(prompt,
-                           multi_modal_data=MultiModalData(
-                               type=MultiModalData.Type.IMAGE, data=images))
+    outputs = llm.generate(prompt, multi_modal_datas=ImagePixelData(image))
     for o in outputs:
         generated_text = o.outputs[0].text
         print(generated_text)
@@ -46,11 +45,9 @@ def run_llava_image_features():
         "\nUSER: What is the content of this image?\nASSISTANT:")
 
     # This should be provided by another online or offline component.
-    images = torch.load("images/stop_sign_image_features.pt")
+    image: torch.Tensor = torch.load("images/stop_sign_image_features.pt")
 
-    outputs = llm.generate(prompt,
-                           multi_modal_data=MultiModalData(
-                               type=MultiModalData.Type.IMAGE, data=images))
+    outputs = llm.generate(prompt, multi_modal_datas=ImageFeatureData(image))
     for o in outputs:
         generated_text = o.outputs[0].text
         print(generated_text)
diff --git a/examples/phi3_v_chat_completion_client.py b/examples/phi3_v_chat_completion_client.py
new file mode 100644
index 00000000..227b0beb
--- /dev/null
+++ b/examples/phi3_v_chat_completion_client.py
@@ -0,0 +1,127 @@
+from openai import OpenAI
+import base64
+
+
+
+# clone model from https://github.com/microsoft/Phi-3-mini-v-128k-instruct 
+# first launch the vLLM API server with:
+# python -m vllm.entrypoints.openai.api_server --model Phi-3-mini-v-128k-instruct --image-input-type pixel_values --image-token-id 32044 --image-input-shape 1,3,336,336 --image-feature-size 576 --chat-template examples/template_phi3_v.jinja --trust-remote-code --image-openai phi3v_single_image 
+
+# Modify OpenAI's API key and API base to use vLLM's API server.
+openai_api_key = "EMPTY"
+openai_api_base = "http://localhost:8000/v1"
+
+client = OpenAI(
+    # defaults to os.environ.get("OPENAI_API_KEY")
+    api_key=openai_api_key,
+    base_url=openai_api_base,
+)
+
+models = client.models.list()
+model = models.data[0].id
+
+chat_response = client.chat.completions.create(
+    model=model,
+    messages=[{
+        "role": "user",
+        "content": [
+            {"type": "text", "text": "What's in this image?"},
+            {
+                "type": "image_url",
+                "image_url": {
+                    "url": "https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg",
+                },
+            },
+        ],
+    }],
+)
+print("Chat response:", chat_response)
+
+
+################# Text-only example #################
+print("<<<<< Text-only example >>>>>")
+
+chat_response = client.chat.completions.create(
+    model=model,
+    messages=[{
+        "role": "user",
+        "content": [
+            {"type": "text", "text": "what is the answer for 1+1? Explain it."}
+        ],
+    }],
+)
+print("Chat response:", chat_response)
+
+####################### single-image prompt #########################
+
+chat_response = client.chat.completions.create(
+    model=model,
+    messages=[{
+        "role": "user",
+        "content": [
+            {"type": "image_url", 
+                "image_url": 
+                    {"url": "https://www.ilankelman.org/stopsigns/australia.jpg"}
+            },
+            {"type": "text", "text": "What is shown in this image?"}
+        ],
+    }],
+)
+print("Chat response:", chat_response)
+
+
+######################### multi-turn ##################################
+chat_response = client.chat.completions.create(
+    model=model,
+    messages=[
+        {
+        "role": "user",
+        "content": [
+            {"type": "image_url", 
+                "image_url": 
+                    {"url": "https://www.ilankelman.org/stopsigns/australia.jpg"}
+            },
+            {"type": "text", "text": "What is shown in this image?"}
+        ],
+        },
+        {
+            "role": "assistant",
+            "content": "The image depicts a street scene with a stop sign prominently displayed in the foreground. Furthermore, a black vehicle, possibly a car or truck, is driving on the road and appears to be approaching the stop sign."
+        },
+        {
+            "role": "user",
+            "content": "Where do you think it is taken?" 
+        }
+    ],
+)
+print("Chat response:", chat_response)
+
+####################### single-image prompt (b64 image) #########################
+
+
+# Function to encode the image
+def encode_image(image_path):
+    with open(image_path, "rb") as image_file:
+        return base64.b64encode(image_file.read()).decode('utf-8')
+
+# Path to your image
+image_path = "examples/images/stop_sign.jpg"
+
+# Getting the base64 string
+base64_image = encode_image(image_path)
+
+
+chat_response = client.chat.completions.create(
+    model=model,
+    messages=[{
+        "role": "user",
+        "content": [
+            {"type": "image_url", 
+                "image_url": 
+                    {"url": f"data:image/jpeg;base64,{base64_image}"}
+            },
+            {"type": "text", "text": "What is shown in this image?"}
+        ],
+    }],
+)
+print("Chat response:", chat_response)
\ No newline at end of file
diff --git a/examples/phi3_v_example.py b/examples/phi3_v_example.py
new file mode 100644
index 00000000..a6bf85fa
--- /dev/null
+++ b/examples/phi3_v_example.py
@@ -0,0 +1,153 @@
+import argparse
+import os
+import requests
+import numpy as np
+
+from vllm import LLM, SamplingParams
+
+from PIL import Image
+
+from vllm import LLM
+from vllm.sequence import ImagePixelData
+
+from transformers import AutoProcessor 
+
+def add_special_image_to_prompt(prompt, num_image_tokens):
+    # Replace the <|image|> tokens in the prompt with the calculated number of tokens  
+    # Split the prompt by "<|image|>" and reconstruct it with the correct number of tokens  
+    prompt_parts = prompt.split("<|image|>")  
+    new_prompt_parts = []  
+    for i, part in enumerate(prompt_parts):  
+        new_prompt_parts.append(part)  
+        if i < len(num_image_tokens):  # Avoid index out of range  
+            new_prompt_parts.append(num_image_tokens[i] * "<|image|>")  
+    
+    # Reconstruct the prompt with the correct number of image tokens  
+    prompt = "".join(new_prompt_parts)  
+    return prompt
+
+def run_phi3_v_pixel_values():
+    # phi3_v model prompt template
+    user_prompt = '<|user|>\n'
+    assistant_prompt = '<|assistant|>\n'
+    prompt_suffix = "<|end|>\n"
+
+    # phi-3-mini-v huggingface model path
+    # clone from https://github.com/microsoft/Phi-3-mini-v-128k-instruct 
+    model_path = "Phi-3-mini-v-128k-instruct"
+    # model_path = "/data6/haiping/models/shared-models/RC1.5-public-release-phi3v"
+
+    # # get processor for image utils
+    processor = AutoProcessor.from_pretrained(model_path, trust_remote_code=True)
+    image_token_id = processor.special_image_token_id
+    print("image_token_id: ", image_token_id)
+
+    llm = LLM(
+        model=model_path,
+        image_input_type="pixel_values",
+        image_token_id=image_token_id,
+        # image_input_shape not used
+        image_input_shape="1,3,336,336",
+        # image_feature_size only placeholder for profile run 
+        image_feature_size=4000,
+        trust_remote_code=True,
+        # max_model_len set here for fitting into local gpu memory, adjust according to your gpu memory
+        max_model_len=20000
+    )
+
+    sampling_params = SamplingParams(temperature=0.0, max_tokens=1000)
+
+    ################# Text-only example #################
+    print("<<<<< Text-only example >>>>>")
+    prompt = f"{user_prompt}what is the answer for 1+1? Explain it.{prompt_suffix}{assistant_prompt}"
+    print("<<<<<<<<<<Prompt: \n", prompt)
+    outputs = llm.generate(prompt, sampling_params=sampling_params)
+
+    for o in outputs:
+        generated_text = o.outputs[0].text
+        print(generated_text)
+
+    ####################### single-image prompt #########################
+    prompt = f"{user_prompt}<|image|>\nWhat is shown in this image?{prompt_suffix}{assistant_prompt}"
+    url = "https://www.ilankelman.org/stopsigns/australia.jpg"
+    image = Image.open(requests.get(url, stream=True).raw)
+    num_image_tokens = processor.calc_num_image_tokens([image])
+    # replace <|image|> with the actual image tokens
+    prompt = add_special_image_to_prompt(prompt, num_image_tokens)
+    outputs = llm.generate(prompt, sampling_params=sampling_params, multi_modal_datas=ImagePixelData(image))
+
+    for _idx, o in enumerate(outputs):
+        generated_text = o.outputs[0].text
+        print(f"<<<Response for example {_idx}\n", generated_text)
+
+    ############################## multi-request example (batch mode) ####################
+    print("<<<<< Multi-request example >>>>>")
+    prompts = []
+    images = []
+    multi_modal_datas = []
+
+    prompt = f"{user_prompt}<|image|>\nWhat is shown in this image?{prompt_suffix}{assistant_prompt}"
+    url = "https://www.ilankelman.org/stopsigns/australia.jpg"
+    image = Image.open(requests.get(url, stream=True).raw)
+    prompts.append(prompt)
+    images.append(image)
+    multi_modal_datas.append(ImagePixelData(image))
+
+    prompt = f"{user_prompt}<|image|>\nCan you convert the table to markdown format?{prompt_suffix}{assistant_prompt}"
+    url = "https://support.content.office.net/en-us/media/3dd2b79b-9160-403d-9967-af893d17b580.png"
+    image = Image.open(requests.get(url, stream=True).raw)
+    prompts.append(prompt)
+    images.append(image)
+    multi_modal_datas.append(ImagePixelData(image))
+
+    num_image_tokens = processor.calc_num_image_tokens(images)
+    for i, prompt in enumerate(prompts):
+        # replace <|image|> with the actual image tokens
+        prompts[i] = prompt.replace("<|image|>", "<|image|>" * num_image_tokens[i])
+
+    outputs = llm.generate(prompts, sampling_params=sampling_params, multi_modal_datas=multi_modal_datas)
+
+    for _idx, o in enumerate(outputs):
+        generated_text = o.outputs[0].text
+        print(f"<<<Response for example {_idx}\n", generated_text)
+
+
+    # ####################### multi-image prompt (not supported) #########################
+    # # multiple image prompt, number of <|image|> must match number of images
+    # print("<<<<< Multi-image prompt example >>>>>")
+    # prompt = f"{user_prompt}<|image|>\n <|image|>\n What is shown in this two images?{prompt_suffix}{assistant_prompt}"
+    # url = "https://www.ilankelman.org/stopsigns/australia.jpg"
+    # image_1 = Image.open(requests.get(url, stream=True).raw)
+    # url = "https://img.freepik.com/free-photo/painting-mountain-lake-with-mountain-background_188544-9126.jpg?w=2000"
+    # image_2 = Image.open(requests.get(url, stream=True).raw)
+    # images = [image_1, image_2]
+    # num_image_tokens = processor.calc_num_image_tokens(images)
+    # # replace i-th <|image|> with num_image_tokens[i]x<|image|>
+    # prompt = add_special_image_to_prompt(prompt, num_image_tokens) 
+    # outputs = llm.generate(prompt, sampling_params=sampling_params, multi_modal_datas=ImagePixelData(images))
+
+    # for _idx, o in enumerate(outputs):
+    #     generated_text = o.outputs[0].text
+    #     print(f"<<<Response for example {_idx}\n", generated_text)
+
+def main(args):
+    if args.type == "pixel_values":
+        run_phi3_v_pixel_values()
+    else:
+        raise ValueError(f"Unknown image input type: {args.type}")
+
+
+if __name__ == "__main__":
+    parser = argparse.ArgumentParser(description="Demo on Phi3-V")
+    parser.add_argument("--type",
+                        type=str,
+                        choices=["pixel_values"],
+                        default="pixel_values",
+                        help="image input type")
+    args = parser.parse_args()
+    local_directory = "images"
+
+    # Make sure the local directory exists or create it
+    os.makedirs(local_directory, exist_ok=True)
+
+    main(args)
diff --git a/examples/phi3_v_nonopenai_entry_readme.md b/examples/phi3_v_nonopenai_entry_readme.md
new file mode 100644
index 00000000..9518e58b
--- /dev/null
+++ b/examples/phi3_v_nonopenai_entry_readme.md
@@ -0,0 +1,159 @@
+# Serving Phi-3-mini-V-128k-instruct with OpenAI GPT with Vision like API (Non-openai entrypoint)
+   
+This document outlines the steps to use vLLM with the OpenAI Python client to serve Phi-3-mini-V-128k-instruct.
+
+## Step 1: Compile vLLM
+
+```
+pip install -e .
+```
+   
+## Step 2: Cloning the Model  
+   
+First, clone the model `Phi-3-mini-v-128k-instruct` from the GitHub repository:  
+   
+```shell  
+git lfs clone https://github.com/microsoft/Phi-3-mini-v-128k-instruct  
+```  
+   
+## Step 3: Launching the vLLM API Server  
+   
+Launch the vLLM API server using the following command:  
+   
+```shell  
+python -m vllm.entrypoints.api_server --model Phi-3-mini-v-128k-instruct --image-input-type pixel_values --image-token-id 32044 --image-input-shape 1,3,336,336 --image-feature-size 2509 --chat-template examples/template_phi3_v.jinja --trust-remote-code --image-openai phi3v_single_image --max-model-len 60000
+```  
+
+**Modify the model path** if you clone model to anywhere else. --model {model_folder_path}
+
+Please note --image-input-shape and --image-feature-size is set for api compatibility and initialization, and does not effect the real usage. Please do not change these parameters. 
+
+Please adjust --max-num-seqs {max_num_seqs} (default 256, Maximum number of sequences per iteration.) when launching the server if you encounter GPU out-of-memory issue. 
+
+Please adjust by --max-model-len {max-model-len} if it exceeds the maximum number of tokens that can be stored in KV cache.
+   
+## prepare the messages
+   
+```python  
+    messages=[{
+        "role": "user",
+        "content": [
+            {"type": "image_url", 
+                "image_url": 
+                    {"url": "https://www.ilankelman.org/stopsigns/australia.jpg"}
+            },
+            {"type": "text", "text": "What is shown in this image?"}
+        ],
+    }]
+    prompt = json.dumps(messages)
+```  
+
+## Post request and get respone
+
+```python
+    def post_http_request(prompt: str,
+                        api_url: str,
+                        n: int = 1,
+                        stream: bool = False,
+                        use_beam_search: bool = True,
+                        max_tokens: int = 100
+                        ) -> requests.Response:
+        headers = {"User-Agent": "Test Client"}
+        pload = {
+            "prompt": prompt,
+            "n": n,
+            "use_beam_search": use_beam_search,
+            "temperature": 0.0,
+            "max_tokens": max_tokens,
+            "stream": stream,
+        }
+        response = requests.post(api_url, headers=headers, json=pload, stream=True)
+        return response
+
+    # modify host and port accordingly if you launch the server with different settings
+    host = 'localhost'
+    port = 8000
+    api_url = f"http://{host}:{port}/generate"
+    n = args.n
+    stream = args.stream
+
+    print(f"Prompt: {prompt!r}\n", flush=True)
+    response = post_http_request(prompt, api_url, n, stream)
+```
+   
+
+## parse response
+
+```python  
+    def get_response(response: requests.Response) -> List[str]:
+        data = json.loads(response.content)
+        output = [_choice['message']['content'] for _choice in data["choices"]]
+        return output
+
+    output = get_response(response)
+    for i, line in enumerate(output):
+        print(f"Response {i}: {line!r}", flush=True)
+```  
+
+## local/base64 image example
+
+```python
+    def encode_image(image_path):
+        with open(image_path, "rb") as image_file:
+            return base64.b64encode(image_file.read()).decode('utf-8')
+
+    # Path to your image
+    image_path = "examples/images/stop_sign.jpg"
+
+    # Getting the base64 string
+    base64_image = encode_image(image_path)
+
+    messages=[{
+        "role": "user",
+        "content": [
+            {"type": "image_url", 
+                "image_url": 
+                {
+                     "url": f"data:image/jpeg;base64,{base64_image}"
+                }
+            },
+            {"type": "text", "text": "What is shown in this image?"}
+        ],
+    }]
+    prompt = json.dumps(messages)
+```
+
+   
+
+## Example client script
+Please check examples/phi3_v_nonopeni_client.py for exact usage. 
+
+After you launch the server.
+```bash
+    python examples/phi3_v_nonopeni_client.py
+```
+
+
+## Environment Error
+
+1. if you see error like 
+
+    '/usr/local/lib/python3.8/dist-packages/transformer_engine_extensions.cpython-38-x86_64-linux-gnu.so: undefined symbol: _ZN2at4_ops5zeros4callEN3c108ArrayRefINS2_6SymIntEEENS2_8optionalINS2_10ScalarTypeEEENS6_INS2_6LayoutEEENS6_INS2_6DeviceEEENS6_IbEE'
+
+    try 
+
+    ```
+    pip uninstall transformer-engine
+    ```
+    refer: https://github.com/chenfei-wu/TaskMatrix/issues/116
+
+2. if you see flash attn import error
+    try
+    ```
+    pip install flash-attn --no-build-isolation --force-reinstall 
+    ```
+
+## Contact
+Please contact [Haiping Wu](haipingwu@microsoft.com) for any questions regarding serving Phi-3-mini-V-128k-instruct
+
+
diff --git a/examples/phi3_v_nonopeni_client.py b/examples/phi3_v_nonopeni_client.py
new file mode 100644
index 00000000..b47626f0
--- /dev/null
+++ b/examples/phi3_v_nonopeni_client.py
@@ -0,0 +1,371 @@
+"""Example Python client for vllm.entrypoints.api_server"""
+
+import base64
+import argparse
+import json
+from typing import Iterable, List
+from PIL import Image  
+from io import BytesIO  
+
+import requests
+
+# start your server with
+ #python -m vllm.entrypoints.api_server --model Phi-3-mini-v-128k-instruct --image-input-type pixel_values --image-token-id 32044 --image-input-shape 1,3,336,336 --image-feature-size 2509 --chat-template examples/template_phi3_v.jinja --trust-remote-code --image-openai phi3v_single_image 
+
+def clear_line(n: int = 1) -> None:
+    LINE_UP = '\033[1A'
+    LINE_CLEAR = '\x1b[2K'
+    for _ in range(n):
+        print(LINE_UP, end=LINE_CLEAR, flush=True)
+
+
+def post_http_request(prompt: str,
+                      api_url: str,
+                      n: int = 1,
+                      stream: bool = False,
+                      use_beam_search: bool = True,
+                      max_tokens: int = 100
+                      ) -> requests.Response:
+    headers = {"User-Agent": "Test Client"}
+    pload = {
+        "prompt": prompt,
+        "n": n,
+        "use_beam_search": use_beam_search,
+        "temperature": 0.0,
+        "max_tokens": max_tokens,
+        "stream": stream,
+    }
+    response = requests.post(api_url, headers=headers, json=pload, stream=True)
+    return response
+
+
+def get_streaming_response(response: requests.Response) -> Iterable[List[str]]:
+    for chunk in response.iter_lines(chunk_size=8192,
+                                     decode_unicode=False,
+                                     delimiter=b"\0"):
+        if chunk:
+            data = json.loads(chunk.decode("utf-8"))
+            output = data["text"]
+            yield output
+
+
+def get_response(response: requests.Response) -> List[str]:
+    data = json.loads(response.content)
+    output = [_choice['message']['content'] for _choice in data["choices"]]
+    return output
+
+
+if __name__ == "__main__":
+    parser = argparse.ArgumentParser()
+    parser.add_argument("--host", type=str, default="localhost")
+    parser.add_argument("--port", type=int, default=8000)
+    parser.add_argument("--n", type=int, default=4)
+    # parser.add_argument("--prompt", type=str, default="San Francisco is a")
+    parser.add_argument("--stream", action="store_true")
+    args = parser.parse_args()
+
+
+    prompt = "what is the answer for 1+1? Explain it."
+
+    # chat as a string
+
+
+
+    ######################### TExt-only example #########################
+
+    messages=[{
+        "role": "user",
+        "content":  "what is the answer for 1+1? Explain it."
+    }]
+    prompt = json.dumps(messages)
+
+    api_url = f"http://{args.host}:{args.port}/generate"
+    n = args.n
+    stream = args.stream
+
+    print(f"Prompt: {prompt!r}\n", flush=True)
+    response = post_http_request(prompt, api_url, n, stream)
+    if stream:
+        num_printed_lines = 0
+        for h in get_streaming_response(response):
+            clear_line(num_printed_lines)
+            num_printed_lines = 0
+            for i, line in enumerate(h):
+                num_printed_lines += 1
+                print(f"Beam candidate {i}: {line!r}", flush=True)
+    else:
+        output = get_response(response)
+        for i, line in enumerate(output):
+            print(f"Beam candidate {i}: {line!r}", flush=True)
+
+
+    ######################### single-image example #########################
+
+    messages=[{
+        "role": "user",
+        "content": [
+            {"type": "image_url", 
+                "image_url": 
+                    {"url": "https://www.ilankelman.org/stopsigns/australia.jpg"}
+            },
+            {"type": "text", "text": "What is shown in this image?"}
+        ],
+    }]
+    prompt = json.dumps(messages)
+
+    api_url = f"http://{args.host}:{args.port}/generate"
+    n = args.n
+    stream = args.stream
+
+    print(f"Prompt: {prompt!r}\n", flush=True)
+    response = post_http_request(prompt, api_url, n, stream)
+    if stream:
+        num_printed_lines = 0
+        for h in get_streaming_response(response):
+            clear_line(num_printed_lines)
+            num_printed_lines = 0
+            for i, line in enumerate(h):
+                num_printed_lines += 1
+                print(f"Beam candidate {i}: {line!r}", flush=True)
+    else:
+        output = get_response(response)
+        for i, line in enumerate(output):
+            print(f"Beam candidate {i}: {line!r}", flush=True)
+
+
+    ######################### single-image example (non beam search) #########################
+    print("<<<<< Single-image example (non beam search) >>>>>")
+
+    messages=[{
+        "role": "user",
+        "content": [
+            {"type": "image_url", 
+                "image_url": 
+                    {"url": "https://www.ilankelman.org/stopsigns/australia.jpg"}
+            },
+            {"type": "text", "text": "What is shown in this image?"}
+        ],
+    }]
+    prompt = json.dumps(messages)
+
+    api_url = f"http://{args.host}:{args.port}/generate"
+    n = 1 
+    stream = args.stream
+
+    print(f"Prompt: {prompt!r}\n", flush=True)
+    response = post_http_request(prompt, api_url, n, stream, use_beam_search=False, max_tokens=100)
+    if stream:
+        num_printed_lines = 0
+        for h in get_streaming_response(response):
+            clear_line(num_printed_lines)
+            num_printed_lines = 0
+            for i, line in enumerate(h):
+                num_printed_lines += 1
+                print(f"Beam candidate {i}: {line!r}", flush=True)
+    else:
+        output = get_response(response)
+        for i, line in enumerate(output):
+            print(f"Response {i}: {line!r}", flush=True)
+
+
+    ######################### single-image multi-trun example (non beam search) #########################
+    print("<<<<< Single-image multi-turn example (non beam search) >>>>>")
+
+    messages=[
+        {
+        "role": "user",
+        "content": [
+            {"type": "image_url", 
+                "image_url": 
+                    {"url": "https://www.ilankelman.org/stopsigns/australia.jpg"}
+            },
+            {"type": "text", "text": "What is shown in this image?"}
+        ],
+        },
+        {
+            "role": "assistant",
+            "content": "The image depicts a street scene with a stop sign prominently displayed in the foreground. Furthermore, a black vehicle, possibly a car or truck, is driving on the road and appears to be approaching the stop sign."
+        },
+        {
+            "role": "user",
+            "content": "Where do you think it is taken?" 
+        }
+    ]
+
+    prompt = json.dumps(messages)
+
+    api_url = f"http://{args.host}:{args.port}/generate"
+    n = 1 
+    stream = args.stream
+
+    print(f"Prompt: {prompt!r}\n", flush=True)
+    response = post_http_request(prompt, api_url, n, stream, use_beam_search=False, max_tokens=100)
+    if stream:
+        num_printed_lines = 0
+        for h in get_streaming_response(response):
+            clear_line(num_printed_lines)
+            num_printed_lines = 0
+            for i, line in enumerate(h):
+                num_printed_lines += 1
+                print(f"Beam candidate {i}: {line!r}", flush=True)
+    else:
+        output = get_response(response)
+        for i, line in enumerate(output):
+            print(f"Response {i}: {line!r}", flush=True)
+
+
+    ######################### single-image example (local image) #########################
+    print("<<<<< Single-image example (local image) >>>>>")
+
+    # Function to encode the image
+    def encode_image(image_path):
+        with open(image_path, "rb") as image_file:
+            return base64.b64encode(image_file.read()).decode('utf-8')
+
+    # Path to your image
+    image_path = "examples/images/stop_sign.jpg"
+
+    # Getting the base64 string
+    base64_image = encode_image(image_path)
+
+    messages=[{
+        "role": "user",
+        "content": [
+            {"type": "image_url", 
+                "image_url": 
+                {
+                     "url": f"data:image/jpeg;base64,{base64_image}"
+                }
+            },
+            {"type": "text", "text": "What is shown in this image?"}
+        ],
+    }]
+    prompt = json.dumps(messages)
+
+    api_url = f"http://{args.host}:{args.port}/generate"
+    n = 1 
+    stream = args.stream
+
+    print(f"Prompt: {prompt!r}\n", flush=True)
+    response = post_http_request(prompt, api_url, n, stream, use_beam_search=False, max_tokens=100)
+    if stream:
+        num_printed_lines = 0
+        for h in get_streaming_response(response):
+            clear_line(num_printed_lines)
+            num_printed_lines = 0
+            for i, line in enumerate(h):
+                num_printed_lines += 1
+                print(f"Beam candidate {i}: {line!r}", flush=True)
+    else:
+        output = get_response(response)
+        for i, line in enumerate(output):
+            print(f"Response {i}: {line!r}", flush=True)
+
+    print("<<<<< Single-image example (png as b64) >>>>>")
+
+    # Function to encode the image
+    def encode_image_from_url(image_url):  
+        response = requests.get(image_url)  
+        response.raise_for_status()  
+        
+        image = Image.open(BytesIO(response.content))  
+        buffered = BytesIO()  
+        image_format = image.format or 'PNG'  # Default to 'PNG' if format cannot be detected  
+        image.save(buffered, format=image_format)  
+        
+        return base64.b64encode(buffered.getvalue()).decode('utf-8')  
+
+    # Path to your image
+    image_url = "https://commondatastorage.googleapis.com/codeskulptor-assets/data_clustering/USA_Counties.png"
+
+    # Getting the base64 string
+    base64_image = encode_image_from_url(image_url)  
+
+    messages=[{
+        "role": "user",
+        "content": [
+            {"type": "image_url", 
+                "image_url": 
+                {
+                     "url": f"data:image/png;base64,{base64_image}"
+                }
+            },
+            {"type": "text", "text": "What is shown in this image?"}
+        ],
+    }]
+    prompt = json.dumps(messages)
+
+    api_url = f"http://{args.host}:{args.port}/generate"
+    n = 1 
+    stream = args.stream
+
+    print(f"Prompt: {prompt!r}\n", flush=True)
+    response = post_http_request(prompt, api_url, n, stream, use_beam_search=False, max_tokens=100)
+    if stream:
+        num_printed_lines = 0
+        for h in get_streaming_response(response):
+            clear_line(num_printed_lines)
+            num_printed_lines = 0
+            for i, line in enumerate(h):
+                num_printed_lines += 1
+                print(f"Beam candidate {i}: {line!r}", flush=True)
+    else:
+        output = get_response(response)
+        for i, line in enumerate(output):
+            print(f"Response {i}: {line!r}", flush=True)
+
+
+    # webp not supported.
+    # print("<<<<< Single-image example (webp as b64) >>>>>")
+    ###########################################not supported############################
+
+    # # Function to encode the image
+    # def encode_image_from_url(image_url):  
+    #     response = requests.get(image_url)  
+    #     response.raise_for_status()  
+        
+    #     image = Image.open(BytesIO(response.content))  
+    #     buffered = BytesIO()  
+    #     image_format = image.format or 'PNG'  # Default to 'PNG' if format cannot be detected  
+    #     image.save(buffered, format=image_format)  
+        
+    #     return base64.b64encode(buffered.getvalue()).decode('utf-8')  
+
+    # # Path to your image
+    # image_url = "https://www.gstatic.com/webp/gallery/1.webp"
+
+    # # Getting the base64 string
+    # base64_image = encode_image_from_url(image_url)  
+
+    # messages=[{
+    #     "role": "user",
+    #     "content": [
+    #         {"type": "image_url", 
+    #             "image_url": 
+    #             {
+    #                  "url": f"data:image/webp;base64,{base64_image}"
+    #             }
+    #         },
+    #         {"type": "text", "text": "What is shown in this image?"}
+    #     ],
+    # }]
+    # prompt = json.dumps(messages)
+
+    # api_url = f"http://{args.host}:{args.port}/generate"
+    # n = 1 
+    # stream = args.stream
+
+    # print(f"Prompt: {prompt!r}\n", flush=True)
+    # response = post_http_request(prompt, api_url, n, stream, use_beam_search=False, max_tokens=100)
+    # if stream:
+    #     num_printed_lines = 0
+    #     for h in get_streaming_response(response):
+    #         clear_line(num_printed_lines)
+    #         num_printed_lines = 0
+    #         for i, line in enumerate(h):
+    #             num_printed_lines += 1
+    #             print(f"Beam candidate {i}: {line!r}", flush=True)
+    # else:
+    #     output = get_response(response)
+    #     for i, line in enumerate(output):
+    #         print(f"Response {i}: {line!r}", flush=True)
\ No newline at end of file
diff --git a/examples/phi3_v_readme.md b/examples/phi3_v_readme.md
new file mode 100644
index 00000000..5303cdbf
--- /dev/null
+++ b/examples/phi3_v_readme.md
@@ -0,0 +1,197 @@
+# Serving Phi-3-mini-V-128k-instruct with OpenAI GPT with Vision like API 
+   
+This document outlines the steps to use vLLM with the OpenAI Python client to serve Phi-3-mini-V-128k-instruct.
+
+## Step 1: Compile vLLM
+
+```
+pip install -e .
+```
+   
+## Step 2: Cloning the Model  
+   
+First, clone the model `Phi-3-mini-v-128k-instruct` from the GitHub repository:  
+   
+```shell  
+git lfs clone https://github.com/microsoft/Phi-3-mini-v-128k-instruct  
+```  
+   
+## Step 3: Launching the vLLM API Server  
+   
+Launch the vLLM API server using the following command:  
+   
+```shell  
+python -m vllm.entrypoints.openai.api_server --model Phi-3-mini-v-128k-instruct --image-input-type pixel_values --image-token-id 32044 --image-input-shape 1,3,336,336 --image-feature-size 2509 --chat-template examples/template_phi3_v.jinja --trust-remote-code --image-openai phi3v_single_image --max-model-len 60000
+```  
+
+**Modify the model path** if you clone model to anywhere else. --model {model_folder_path}
+
+Please note --image-input-shape and --image-feature-size is set for api compatibility and initialization, and does not effect the real usage. Please do not change these parameters. 
+
+Please adjust --max-num-seqs {max_num_seqs} (default 256, Maximum number of sequences per iteration.) when launching the server if you encounter GPU out-of-memory issue. 
+
+Please adjust by --max-model-len {max-model-len} if it exceeds the maximum number of tokens that can be stored in KV cache.
+   
+## Configuring the OpenAI Python Client  
+   
+Modify the OpenAI's API key and API base to use vLLM's API server.  
+   
+```python  
+from openai import OpenAI  
+   
+# "EMPTY" as default if you didn't specify it in step 2.
+# openai_api_key = "EMPTY"  
+openai_api_key = "YOUR_API_KEY_HERE"  
+openai_api_base = "http://localhost:8000/v1"  
+   
+client = OpenAI(  
+    api_key=openai_api_key,  
+    base_url=openai_api_base,  
+)  
+   
+models = client.models.list()  
+model = models.data[0].id  
+```  
+   
+Replace `"YOUR_API_KEY_HERE"` with your actual API key (specified when you launch vLLM server in Step 3, "EMPTY" as default).  
+   
+## Image and Text Prompt Example  
+   
+The following example shows how to use the client to send an image and a text prompt:  
+   
+```python  
+chat_response = client.chat.completions.create(  
+    model=model,  
+    messages=[{  
+        "role": "user",  
+        "content": [  
+            {"type": "text", "text": "What's in this image?"},  
+            {  
+                "type": "image_url",  
+                "image_url": {  
+                    "url": "IMAGE_URL_HERE",  
+                },  
+            },  
+        ],  
+    }],  
+)  
+print("Chat response:", chat_response)  
+```  
+   
+Replace `"IMAGE_URL_HERE"` with the URL of the image you want to analyze.  
+   
+## Text-Only Example  
+   
+Here's a text-only prompt example:  
+   
+```python  
+print("<<<<< Text-only example >>>>>")  
+   
+chat_response = client.chat.completions.create(  
+    model=model,  
+    messages=[{  
+        "role": "user",  
+        "content": [  
+            {"type": "text", "text": "what is the answer for 1+1? Explain it."}  
+        ],  
+    }],  
+)  
+print("Chat response:", chat_response)  
+```  
+   
+## Single-Image Multi-Turn Conversation Prompt Example  
+   
+This example sends a single-image multi-turn conversation prompt:  
+   
+```python  
+######################### multi-turn ##################################
+chat_response = client.chat.completions.create(
+    model=model,
+    messages=[
+        {
+        "role": "user",
+        "content": [
+            {"type": "image_url", 
+                "image_url": 
+                    {"url": "https://www.ilankelman.org/stopsigns/australia.jpg"}
+            },
+            {"type": "text", "text": "What is shown in this image?"}
+        ],
+        },
+        {
+            "role": "assistant",
+            "content": "The image depicts a street scene with a stop sign prominently displayed in the foreground. Furthermore, a black vehicle, possibly a car or truck, is driving on the road and appears to be approaching the stop sign."
+        },
+        {
+            "role": "user",
+            "content": "Where do you think it is taken?" 
+        }
+    ],
+)
+print("Chat response:", chat_response)
+```  
+
+## local/base64 image example
+
+```python
+    # Function to encode the image
+    def encode_image(image_path):
+        with open(image_path, "rb") as image_file:
+            return base64.b64encode(image_file.read()).decode('utf-8')
+
+    # Path to your image
+    image_path = "examples/images/stop_sign.jpg"
+
+    # Getting the base64 string
+    base64_image = encode_image(image_path)
+
+
+    chat_response = client.chat.completions.create(
+        model=model,
+        messages=[{
+            "role": "user",
+            "content": [
+                {"type": "image_url", 
+                    "image_url": 
+                        {"url": f"data:image/jpeg;base64,{base64_image}"}
+                },
+                {"type": "text", "text": "What is shown in this image?"}
+            ],
+        }],
+    )
+    print("Chat response:", chat_response)
+```  
+   
+Make sure to replace placeholder text like `"YOUR_API_KEY_HERE"`, `"IMAGE_URL_HERE"`, and `"ANOTHER_IMAGE_URL_HERE"` with the actual values before using the snippets.
+
+
+## Example script
+After starting your server as in Step 3. 
+```
+python examples/phi3_v_chat_completion_client.py
+```
+
+
+## Environment Error
+
+1. if you see error like 
+
+    '/usr/local/lib/python3.8/dist-packages/transformer_engine_extensions.cpython-38-x86_64-linux-gnu.so: undefined symbol: _ZN2at4_ops5zeros4callEN3c108ArrayRefINS2_6SymIntEEENS2_8optionalINS2_10ScalarTypeEEENS6_INS2_6LayoutEEENS6_INS2_6DeviceEEENS6_IbEE'
+
+    try 
+
+    ```
+    pip uninstall transformer-engine
+    ```
+    refer: https://github.com/chenfei-wu/TaskMatrix/issues/116
+
+2. if you see flash attn import error
+    try
+    ```
+    pip install flash-attn --no-build-isolation --force-reinstall 
+    ```
+
+## Contact
+Please contact [Haiping Wu](haipingwu@microsoft.com) for any questions regarding serving Phi-3-mini-V-128k-instruct
+
+
diff --git a/examples/template_llava.jinja b/examples/template_llava.jinja
new file mode 100644
index 00000000..16b38546
--- /dev/null
+++ b/examples/template_llava.jinja
@@ -0,0 +1,11 @@
+{%- for message in messages -%}
+    {{ message['role'].upper() + ': ' + message['content'] }}
+    {%- if (loop.last and add_generation_prompt) or not loop.last -%}
+        {{- '\n' -}}
+    {%- endif -%}
+{%- endfor -%}
+
+
+{%- if add_generation_prompt and messages[-1]['role'] != 'assistant' -%}
+    {{- 'ASSISTANT:' -}}
+{% endif %}
\ No newline at end of file
diff --git a/examples/template_phi3_v.jinja b/examples/template_phi3_v.jinja
new file mode 100644
index 00000000..83e32262
--- /dev/null
+++ b/examples/template_phi3_v.jinja
@@ -0,0 +1,5 @@
+{% for message in messages %}{{'<|' + message['role'] + '|>' + '\n' + message['content'] + '<|end|>\n' }}{% endfor %}
+
+{%- if add_generation_prompt and messages[-1]['role'] != 'assistant' -%}
+    {{- '<|assistant|>\n' -}}
+{% endif %}
\ No newline at end of file
diff --git a/requirements-common.txt b/requirements-common.txt
index 3abb8281..094ac172 100644
--- a/requirements-common.txt
+++ b/requirements-common.txt
@@ -10,7 +10,7 @@ tokenizers >= 0.19.1  # Required for Llama 3.
 fastapi
 openai
 uvicorn[standard]
-pydantic >= 2.0  # Required for OpenAI server.
+pillow  # Required for image processing
 prometheus_client >= 0.18.0
 prometheus-fastapi-instrumentator >= 7.0.0
 tiktoken == 0.6.0  # Required for DBRX tokenizer
@@ -18,3 +18,8 @@ lm-format-enforcer == 0.9.8
 outlines == 0.0.34 # Requires torch >= 2.1.0
 typing_extensions
 filelock >= 3.10.4 # filelock starts to support `mode` argument from 3.10.4
+
+# OpenAI server
+openai
+pydantic >= 2.0
+pillow
diff --git a/requirements-dev.txt b/requirements-dev.txt
index e6d375cb..886e6d38 100644
--- a/requirements-dev.txt
+++ b/requirements-dev.txt
@@ -28,6 +28,3 @@ awscli
 
 # Benchmarking
 aiohttp
-
-# Multimodal
-pillow
diff --git a/tests/conftest.py b/tests/conftest.py
index 67132691..cd5cc05b 100644
--- a/tests/conftest.py
+++ b/tests/conftest.py
@@ -7,12 +7,13 @@ import pytest
 import torch
 from PIL import Image
 from transformers import (AutoModelForCausalLM, AutoProcessor,
-                          LlavaForConditionalGeneration)
+                          LlavaForConditionalGeneration,
+                          LlavaNextForConditionalGeneration)
 
 from vllm import LLM, SamplingParams
 from vllm.config import TokenizerPoolConfig, VisionLanguageConfig
 from vllm.distributed import destroy_model_parallel
-from vllm.sequence import MultiModalData
+from vllm.sequence import ImageFeatureData, ImagePixelData, MultiModalData
 from vllm.transformers_utils.tokenizer import get_tokenizer
 
 _TEST_DIR = os.path.dirname(__file__)
@@ -20,10 +21,6 @@ _TEST_PROMPTS = [os.path.join(_TEST_DIR, "prompts", "example.txt")]
 _LONG_PROMPTS = [os.path.join(_TEST_DIR, "prompts", "summary.txt")]
 
 # Multi modal related
-_PIXEL_VALUES_FILES = [
-    os.path.join(_TEST_DIR, "images", filename) for filename in
-    ["stop_sign_pixel_values.pt", "cherry_blossom_pixel_values.pt"]
-]
 _IMAGE_FEATURES_FILES = [
     os.path.join(_TEST_DIR, "images", filename) for filename in
     ["stop_sign_image_features.pt", "cherry_blossom_image_features.pt"]
@@ -36,8 +33,7 @@ _IMAGE_PROMPTS = [
     "<image>\nUSER: What's the content of the image?\nASSISTANT:",
     "<image>\nUSER: What is the season?\nASSISTANT:"
 ]
-assert len(_PIXEL_VALUES_FILES) == len(_IMAGE_FEATURES_FILES) == len(
-    _IMAGE_FILES) == len(_IMAGE_PROMPTS)
+assert len(_IMAGE_FEATURES_FILES) == len(_IMAGE_FILES) == len(_IMAGE_PROMPTS)
 
 
 def _read_prompts(filename: str) -> List[str]:
@@ -85,17 +81,18 @@ def hf_images() -> List[Image.Image]:
 
 
 @pytest.fixture()
-def vllm_images(request) -> "torch.Tensor":
+def vllm_images(request) -> List[MultiModalData]:
     vision_language_config = request.getfixturevalue("model_and_config")[1]
-    all_images = []
     if vision_language_config.image_input_type == (
             VisionLanguageConfig.ImageInputType.IMAGE_FEATURES):
-        filenames = _IMAGE_FEATURES_FILES
+        return [
+            ImageFeatureData(torch.load(filename))
+            for filename in _IMAGE_FEATURES_FILES
+        ]
     else:
-        filenames = _PIXEL_VALUES_FILES
-    for filename in filenames:
-        all_images.append(torch.load(filename))
-    return torch.concat(all_images, dim=0)
+        return [
+            ImagePixelData(Image.open(filename)) for filename in _IMAGE_FILES
+        ]
 
 
 @pytest.fixture()
@@ -130,7 +127,8 @@ _STR_DTYPE_TO_TORCH_DTYPE = {
 }
 
 _VISION_LANGUAGE_MODELS = {
-    "llava-hf/llava-1.5-7b-hf": LlavaForConditionalGeneration,
+    "llava-hf/llava-1.5-13b-hf": LlavaForConditionalGeneration,
+    "llava-hf/llava-v1.6-34b-hf": LlavaNextForConditionalGeneration,
 }
 
 
@@ -172,15 +170,17 @@ class HfRunner:
         images: Optional[List[Image.Image]] = None,
         **kwargs,
     ) -> List[Tuple[List[int], str]]:
-        outputs: List[Tuple[List[int], str]] = []
-        if images:
+        if images is not None:
             assert len(prompts) == len(images)
+
+        outputs: List[Tuple[List[int], str]] = []
         for i, prompt in enumerate(prompts):
             if self.model_name not in _VISION_LANGUAGE_MODELS:
                 input_ids = self.tokenizer(prompt,
                                            return_tensors="pt").input_ids
                 inputs = {"input_ids": input_ids.cuda()}
             else:
+                assert self.processor is not None
                 image = images[i] if images else None
                 inputs = self.processor(text=prompt,
                                         images=image,
@@ -189,6 +189,7 @@ class HfRunner:
                     key: value.cuda() if value is not None else None
                     for key, value in inputs.items()
                 }
+
             output_ids = self.model.generate(
                 **inputs,
                 use_cache=True,
@@ -207,7 +208,7 @@ class HfRunner:
         self,
         prompts: List[str],
         max_tokens: int,
-        images: Optional["torch.Tensor"] = None,
+        images: Optional[List[Image.Image]] = None,
     ) -> List[Tuple[List[int], str]]:
         outputs = self.generate(prompts,
                                 do_sample=False,
@@ -317,16 +318,15 @@ class VllmRunner:
         self,
         prompts: List[str],
         sampling_params: SamplingParams,
-        images: Optional["torch.Tensor"] = None,
+        multi_modal_datas: Optional[List[Optional[MultiModalData]]] = None,
     ) -> List[Tuple[List[int], str]]:
-        if images is not None:
-            assert len(prompts) == images.shape[0]
-        req_outputs = self.model.generate(
-            prompts,
-            sampling_params=sampling_params,
-            multi_modal_data=MultiModalData(type=MultiModalData.Type.IMAGE,
-                                            data=images)
-            if images is not None else None)
+        if multi_modal_datas is not None:
+            assert len(prompts) == len(multi_modal_datas)
+
+        req_outputs = self.model.generate(prompts,
+                                          sampling_params=sampling_params,
+                                          multi_modal_datas=multi_modal_datas)
+
         outputs = []
         for req_output in req_outputs:
             prompt_str = req_output.prompt
@@ -363,10 +363,12 @@ class VllmRunner:
         self,
         prompts: List[str],
         max_tokens: int,
-        images: Optional[torch.Tensor] = None,
+        multi_modal_datas: Optional[List[Optional[MultiModalData]]] = None,
     ) -> List[Tuple[List[int], str]]:
         greedy_params = SamplingParams(temperature=0.0, max_tokens=max_tokens)
-        outputs = self.generate(prompts, greedy_params, images=images)
+        outputs = self.generate(prompts,
+                                greedy_params,
+                                multi_modal_datas=multi_modal_datas)
         return [(output_ids[0], output_str[0])
                 for output_ids, output_str in outputs]
 
diff --git a/tests/entrypoints/test_openai_server.py b/tests/entrypoints/test_openai_server.py
index e53e64a0..b11a681e 100644
--- a/tests/entrypoints/test_openai_server.py
+++ b/tests/entrypoints/test_openai_server.py
@@ -1,10 +1,6 @@
 # imports for guided decoding tests
 import json
-import os
 import re
-import subprocess
-import sys
-import time
 
 import jsonschema
 import openai  # use the official client for correctness check
@@ -18,9 +14,9 @@ import torch
 from huggingface_hub import snapshot_download
 from openai import BadRequestError
 
+from vllm.entrypoints.openai.test_utils import ServerRunner
 from vllm.transformers_utils.tokenizer import get_tokenizer
 
-MAX_SERVER_START_WAIT_S = 600  # wait for server to start for 60 seconds
 # any model with a chat template should work here
 MODEL_NAME = "HuggingFaceH4/zephyr-7b-beta"
 # technically this needs Mistral-7B-v0.1 as base, but we're not testing
@@ -77,51 +73,12 @@ TEST_CHOICE = [
 pytestmark = pytest.mark.asyncio
 
 
-@ray.remote(num_gpus=1)
-class ServerRunner:
-
-    def __init__(self, args):
-        env = os.environ.copy()
-        env["PYTHONUNBUFFERED"] = "1"
-        self.proc = subprocess.Popen(
-            ["python3", "-m", "vllm.entrypoints.openai.api_server"] + args,
-            env=env,
-            stdout=sys.stdout,
-            stderr=sys.stderr,
-        )
-        self._wait_for_server()
-
-    def ready(self):
-        return True
-
-    def _wait_for_server(self):
-        # run health check
-        start = time.time()
-        while True:
-            try:
-                if requests.get(
-                        "http://localhost:8000/health").status_code == 200:
-                    break
-            except Exception as err:
-                if self.proc.poll() is not None:
-                    raise RuntimeError("Server exited unexpectedly.") from err
-
-                time.sleep(0.5)
-                if time.time() - start > MAX_SERVER_START_WAIT_S:
-                    raise RuntimeError(
-                        "Server failed to start in time.") from err
-
-    def __del__(self):
-        if hasattr(self, "proc"):
-            self.proc.terminate()
-
-
 @pytest.fixture(scope="session")
 def zephyr_lora_files():
     return snapshot_download(repo_id=LORA_NAME)
 
 
-@pytest.fixture(scope="session")
+@pytest.fixture(scope="module")
 def server(zephyr_lora_files):
     ray.init()
     server_runner = ServerRunner.remote([
@@ -415,50 +372,52 @@ async def test_chat_streaming(server, client: openai.AsyncOpenAI,
 )
 async def test_batch_completions(server, client: openai.AsyncOpenAI,
                                  model_name: str):
-    # test simple list
-    batch = await client.completions.create(
-        model=model_name,
-        prompt=["Hello, my name is", "Hello, my name is"],
-        max_tokens=5,
-        temperature=0.0,
-    )
-    assert len(batch.choices) == 2
-    assert batch.choices[0].text == batch.choices[1].text
-
-    # test n = 2
-    batch = await client.completions.create(
-        model=model_name,
-        prompt=["Hello, my name is", "Hello, my name is"],
-        n=2,
-        max_tokens=5,
-        temperature=0.0,
-        extra_body=dict(
-            # NOTE: this has to be true for n > 1 in vLLM, but not necessary
-            # for official client.
-            use_beam_search=True),
-    )
-    assert len(batch.choices) == 4
-    assert batch.choices[0].text != batch.choices[
-        1].text, "beam search should be different"
-    assert batch.choices[0].text == batch.choices[
-        2].text, "two copies of the same prompt should be the same"
-    assert batch.choices[1].text == batch.choices[
-        3].text, "two copies of the same prompt should be the same"
-
-    # test streaming
-    batch = await client.completions.create(
-        model=model_name,
-        prompt=["Hello, my name is", "Hello, my name is"],
-        max_tokens=5,
-        temperature=0.0,
-        stream=True,
-    )
-    texts = [""] * 2
-    async for chunk in batch:
-        assert len(chunk.choices) == 1
-        choice = chunk.choices[0]
-        texts[choice.index] += choice.text
-    assert texts[0] == texts[1]
+    # test using text and token IDs
+    for prompts in (["Hello, my name is"] * 2, [[0, 0, 0, 0, 0]] * 2):
+        # test simple list
+        batch = await client.completions.create(
+            model=model_name,
+            prompt=prompts,
+            max_tokens=5,
+            temperature=0.0,
+        )
+        assert len(batch.choices) == 2
+        assert batch.choices[0].text == batch.choices[1].text
+
+        # test n = 2
+        batch = await client.completions.create(
+            model=model_name,
+            prompt=prompts,
+            n=2,
+            max_tokens=5,
+            temperature=0.0,
+            extra_body=dict(
+                # NOTE: this has to be true for n > 1 in vLLM, but not necessary
+                # for official client.
+                use_beam_search=True),
+        )
+        assert len(batch.choices) == 4
+        assert batch.choices[0].text != batch.choices[
+            1].text, "beam search should be different"
+        assert batch.choices[0].text == batch.choices[
+            2].text, "two copies of the same prompt should be the same"
+        assert batch.choices[1].text == batch.choices[
+            3].text, "two copies of the same prompt should be the same"
+
+        # test streaming
+        batch = await client.completions.create(
+            model=model_name,
+            prompt=prompts,
+            max_tokens=5,
+            temperature=0.0,
+            stream=True,
+        )
+        texts = [""] * 2
+        async for chunk in batch:
+            assert len(chunk.choices) == 1
+            choice = chunk.choices[0]
+            texts[choice.index] += choice.text
+        assert texts[0] == texts[1]
 
 
 async def test_logits_bias(server, client: openai.AsyncOpenAI):
@@ -860,7 +819,7 @@ async def test_echo_logprob_completion(server, client: openai.AsyncOpenAI,
         prompt_text = tokenizer.decode(prompt) if isinstance(prompt,
                                                              list) else prompt
         assert (completion.choices[0].text is not None
-                and re.search(r"^" + prompt_text, completion.choices[0].text))
+                and completion.choices[0].text.startswith(prompt_text))
         logprobs = completion.choices[0].logprobs
         assert logprobs is not None
         assert len(logprobs.text_offset) > 5
diff --git a/tests/entrypoints/test_openai_server_vision.py b/tests/entrypoints/test_openai_server_vision.py
new file mode 100644
index 00000000..f50537bd
--- /dev/null
+++ b/tests/entrypoints/test_openai_server_vision.py
@@ -0,0 +1,173 @@
+from pathlib import Path
+
+import openai  # use the official client for correctness check
+import pytest
+# using Ray for overall ease of process management, parallel requests,
+# and debugging.
+import ray
+
+from vllm.entrypoints.openai.test_utils import ServerRunner
+
+MODEL_NAME = "llava-hf/llava-1.5-7b-hf"
+CHAT_TEMPLATE = (Path(__file__).parent.parent.parent /
+                 "examples/template_llava.jinja")
+assert CHAT_TEMPLATE.exists()
+
+# Test different image extensions (JPG/PNG) and formats (gray/RGB/RGBA)
+TEST_IMAGE_URLS = [
+    "https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg",
+    "https://upload.wikimedia.org/wikipedia/commons/f/fa/Grayscale_8bits_palette_sample_image.png",
+    "https://upload.wikimedia.org/wikipedia/commons/thumb/9/91/Venn_diagram_rgb.svg/1280px-Venn_diagram_rgb.svg.png",
+    "https://upload.wikimedia.org/wikipedia/commons/0/0b/RGBA_comp.png",
+]
+
+pytestmark = pytest.mark.asyncio
+
+
+@pytest.fixture(scope="module")
+def server():
+    ray.init()
+    server_runner = ServerRunner.remote([
+        "--model",
+        MODEL_NAME,
+        # use half precision for speed and memory savings in CI environment
+        "--dtype",
+        "bfloat16",
+        "--max-model-len",
+        "4096",
+        "--enforce-eager",
+        # vision language config below
+        "--image-input-type",
+        "pixel_values",
+        "--image-token-id",
+        "32000",
+        "--image-input-shape",
+        "1,3,336,336",
+        "--image-feature-size",
+        "576",
+        # chat template required for LLaVA
+        "--chat-template",
+        str(CHAT_TEMPLATE),
+    ])
+    ray.get(server_runner.ready.remote())
+    yield server_runner
+    ray.shutdown()
+
+
+@pytest.fixture(scope="session")
+def client():
+    client = openai.AsyncOpenAI(
+        base_url="http://localhost:8000/v1",
+        api_key="token-abc123",
+    )
+    yield client
+
+
+@pytest.mark.parametrize("model_name", [MODEL_NAME])
+@pytest.mark.parametrize("image_url", TEST_IMAGE_URLS)
+async def test_single_chat_session_image(server, client: openai.AsyncOpenAI,
+                                         model_name: str, image_url: str):
+    messages = [{
+        "role":
+        "user",
+        "content": [
+            {
+                "type": "image_url",
+                "image_url": {
+                    "url": image_url
+                }
+            },
+            {
+                "type": "text",
+                "text": "What's in this image?"
+            },
+        ],
+    }]
+
+    # test single completion
+    chat_completion = await client.chat.completions.create(model=model_name,
+                                                           messages=messages,
+                                                           max_tokens=10,
+                                                           logprobs=True,
+                                                           top_logprobs=5)
+    assert chat_completion.id is not None
+    assert chat_completion.choices is not None and len(
+        chat_completion.choices) == 1
+    assert chat_completion.choices[0].message is not None
+    assert chat_completion.choices[0].logprobs is not None
+    assert chat_completion.choices[0].logprobs.top_logprobs is not None
+    assert len(chat_completion.choices[0].logprobs.top_logprobs[0]) == 5
+    message = chat_completion.choices[0].message
+    assert message.content is not None and len(message.content) >= 10
+    assert message.role == "assistant"
+    messages.append({"role": "assistant", "content": message.content})
+
+    # test multi-turn dialogue
+    messages.append({"role": "user", "content": "express your result in json"})
+    chat_completion = await client.chat.completions.create(
+        model=model_name,
+        messages=messages,
+        max_tokens=10,
+    )
+    message = chat_completion.choices[0].message
+    assert message.content is not None and len(message.content) >= 0
+
+
+@pytest.mark.parametrize("model_name", [MODEL_NAME])
+@pytest.mark.parametrize("image_url", TEST_IMAGE_URLS)
+async def test_chat_streaming_image(server, client: openai.AsyncOpenAI,
+                                    model_name: str, image_url: str):
+    messages = [{
+        "role":
+        "user",
+        "content": [
+            {
+                "type": "image_url",
+                "image_url": {
+                    "url": image_url
+                }
+            },
+            {
+                "type": "text",
+                "text": "What's in this image?"
+            },
+        ],
+    }]
+
+    # test single completion
+    chat_completion = await client.chat.completions.create(
+        model=model_name,
+        messages=messages,
+        max_tokens=10,
+        temperature=0.0,
+    )
+    output = chat_completion.choices[0].message.content
+    stop_reason = chat_completion.choices[0].finish_reason
+
+    # test streaming
+    stream = await client.chat.completions.create(
+        model=model_name,
+        messages=messages,
+        max_tokens=10,
+        temperature=0.0,
+        stream=True,
+    )
+    chunks = []
+    finish_reason_count = 0
+    async for chunk in stream:
+        delta = chunk.choices[0].delta
+        if delta.role:
+            assert delta.role == "assistant"
+        if delta.content:
+            chunks.append(delta.content)
+        if chunk.choices[0].finish_reason is not None:
+            finish_reason_count += 1
+    # finish reason should only return in last block
+    assert finish_reason_count == 1
+    assert chunk.choices[0].finish_reason == stop_reason
+    assert delta.content
+    assert "".join(chunks) == output
+
+
+if __name__ == "__main__":
+    pytest.main([__file__])
diff --git a/tests/models/test_llava.py b/tests/models/test_llava.py
index f86cd3fa..e07bc008 100644
--- a/tests/models/test_llava.py
+++ b/tests/models/test_llava.py
@@ -9,19 +9,52 @@ from transformers import AutoTokenizer
 
 from vllm.config import VisionLanguageConfig
 
+
+def iter_llava_configs(model_name: str):
+    image_hw_to_feature_size = {
+        (336, 336): 576,
+    }
+
+    for (h, w), f in image_hw_to_feature_size.items():
+        for input_type, input_shape in [
+            (VisionLanguageConfig.ImageInputType.PIXEL_VALUES, (1, 3, h, w)),
+            (VisionLanguageConfig.ImageInputType.IMAGE_FEATURES, (1, f, 1024)),
+        ]:
+            yield (model_name,
+                   VisionLanguageConfig(image_input_type=input_type,
+                                        image_feature_size=f,
+                                        image_token_id=32000,
+                                        image_input_shape=input_shape,
+                                        image_processor=model_name,
+                                        image_processor_revision=None))
+
+
+def iter_llava_next_configs(model_name: str):
+    image_hw_to_feature_size = {
+        (336, 336): 1176,
+        (672, 672): 2928,
+        (1344, 336): 1944,
+        (336, 1344): 1890,
+    }
+
+    for (h, w), f in image_hw_to_feature_size.items():
+        for input_type, input_shape in [
+            (VisionLanguageConfig.ImageInputType.PIXEL_VALUES, (1, 3, h, w)),
+            (VisionLanguageConfig.ImageInputType.IMAGE_FEATURES, (1, f, 1024)),
+        ]:
+            yield (model_name,
+                   VisionLanguageConfig(image_input_type=input_type,
+                                        image_feature_size=f,
+                                        image_token_id=64000,
+                                        image_input_shape=input_shape,
+                                        image_processor=model_name,
+                                        image_processor_revision=None))
+
+
 model_and_vl_config = [
-    ("llava-hf/llava-1.5-7b-hf",
-     VisionLanguageConfig(
-         image_input_type=VisionLanguageConfig.ImageInputType.PIXEL_VALUES,
-         image_feature_size=576,
-         image_token_id=32000,
-         image_input_shape=(1, 3, 336, 336))),
-    ("llava-hf/llava-1.5-7b-hf",
-     VisionLanguageConfig(
-         image_input_type=VisionLanguageConfig.ImageInputType.IMAGE_FEATURES,
-         image_feature_size=576,
-         image_token_id=32000,
-         image_input_shape=(1, 576, 1024)))
+    *iter_llava_configs("llava-hf/llava-1.5-7b-hf"),
+    # Not enough memory
+    # *iter_llava_next_configs("llava-hf/llava-v1.6-34b-hf"),
 ]
 
 
@@ -39,6 +72,10 @@ def as_dict(vision_language_config: VisionLanguageConfig) -> Dict:
             result[field.name] = ",".join([str(item) for item in value])
         else:
             result[field.name] = value
+
+    result[
+        "no_image_processor"] = vision_language_config.image_processor is None
+
     return result
 
 
@@ -72,36 +109,56 @@ def test_models(hf_runner, vllm_runner, hf_image_prompts, hf_images,
     """Inference result should be the same between hf and vllm.
 
     All the image fixtures for the test is under tests/images.
-    For huggingface runner, we provide the raw images as input.
-    For vllm runner, we provide image tensors and corresponding
+    For huggingface runner, we provide the PIL images as input.
+    For vllm runner, we provide MultiModalData objects and corresponding
     vision language config as input.
     Note, the text input is also adjusted to abide by vllm contract.
     The text output is sanitized to be able to compare with hf.
     """
     model_id, vision_language_config = model_and_config
+
     hf_model = hf_runner(model_id, dtype=dtype)
-    hf_outputs = hf_model.generate_greedy(hf_image_prompts,
-                                          max_tokens,
-                                          images=hf_images)
+    _, vision_language_config = model_and_config
+    if vision_language_config.image_input_type == (
+            VisionLanguageConfig.ImageInputType.IMAGE_FEATURES):
+        # HuggingFace does not support image feature input
+        hf_outputs = [None] * len(hf_image_prompts)
+    else:
+        _, _, h, w = vision_language_config.image_input_shape
+        hf_outputs = hf_model.generate_greedy(
+            hf_image_prompts,
+            max_tokens,
+            # To be compatible with the patch for LLaVA-NeXT
+            images=[im.resize((w, h)) for im in hf_images])
     del hf_model
 
     vllm_model = vllm_runner(model_id,
                              dtype=dtype,
                              worker_use_ray=worker_use_ray,
+                             enforce_eager=True,
                              **as_dict(vision_language_config))
     vllm_outputs = vllm_model.generate_greedy(vllm_image_prompts,
                                               max_tokens,
-                                              images=vllm_images)
+                                              multi_modal_datas=vllm_images)
     del vllm_model
 
     gc.collect()
     torch.cuda.empty_cache()
 
     for i in range(len(hf_image_prompts)):
-        hf_output_ids, hf_output_str = hf_outputs[i]
+        hf_output = hf_outputs[i]
+        if hf_output is None:
+            continue
+
+        hf_output_ids, hf_output_str = hf_output
         vllm_output_ids, vllm_output_str = sanitize_vllm_output(
             vllm_outputs[i], vision_language_config, model_id)
+        print(f"Test{i}:\nHF: {hf_output_str!r}\nvLLM: {vllm_output_str!r}")
         assert hf_output_str == vllm_output_str, (
             f"Test{i}:\nHF: {hf_output_str!r}\nvLLM: {vllm_output_str!r}")
         assert hf_output_ids == vllm_output_ids, (
             f"Test{i}:\nHF: {hf_output_ids}\nvLLM: {vllm_output_ids}")
+
+
+# TODO: Add test for `tensor_parallel_size` [ref: PR #3883]
+# (Requires multiple GPUs)
diff --git a/tests/test_utils.py b/tests/test_utils.py
new file mode 100644
index 00000000..affcb939
--- /dev/null
+++ b/tests/test_utils.py
@@ -0,0 +1,70 @@
+import base64
+import mimetypes
+from tempfile import NamedTemporaryFile
+from typing import Dict, Tuple
+
+import numpy as np
+import pytest
+from PIL import Image
+
+from vllm.utils import get_image
+
+# Test different image extensions (JPG/PNG) and formats (gray/RGB/RGBA)
+TEST_IMAGE_URLS = [
+    "https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg",
+    "https://upload.wikimedia.org/wikipedia/commons/f/fa/Grayscale_8bits_palette_sample_image.png",
+    "https://upload.wikimedia.org/wikipedia/commons/thumb/9/91/Venn_diagram_rgb.svg/1280px-Venn_diagram_rgb.svg.png",
+    "https://upload.wikimedia.org/wikipedia/commons/0/0b/RGBA_comp.png",
+]
+
+
+@pytest.fixture(scope="session")
+def url_images() -> Dict[str, Image.Image]:
+    return {image_url: get_image(image_url) for image_url in TEST_IMAGE_URLS}
+
+
+def get_supported_suffixes() -> Tuple[str, ...]:
+    # We should at least test the file types mentioned in GPT-4 with Vision
+    OPENAI_SUPPORTED_SUFFIXES = ('.png', '.jpeg', '.jpg', '.webp', '.gif')
+
+    # Additional file types that are supported by us
+    EXTRA_SUPPORTED_SUFFIXES = ('.bmp', '.tiff')
+
+    return OPENAI_SUPPORTED_SUFFIXES + EXTRA_SUPPORTED_SUFFIXES
+
+
+def _image_equals(a: Image.Image, b: Image.Image) -> bool:
+    return (np.asarray(a) == np.asarray(b.convert(a.mode))).all()
+
+
+@pytest.mark.parametrize("image_url", TEST_IMAGE_URLS)
+@pytest.mark.parametrize("suffix", get_supported_suffixes())
+def test_get_image_base64(url_images: Dict[str, Image.Image], image_url: str,
+                          suffix: str):
+    url_image = url_images[image_url]
+
+    try:
+        mime_type = Image.MIME[Image.registered_extensions()[suffix]]
+    except KeyError:
+        try:
+            mime_type = mimetypes.types_map[suffix]
+        except KeyError:
+            pytest.skip('No MIME type')
+
+    with NamedTemporaryFile(suffix=suffix) as f:
+        try:
+            url_image.save(f.name)
+        except Exception as e:
+            if e.args[0] == 'cannot write mode RGBA as JPEG':
+                pytest.skip('Conversion not supported')
+
+            raise
+
+        base64_image = base64.b64encode(f.read()).decode("utf-8")
+        data_url = f"data:{mime_type};base64,{base64_image}"
+
+        with get_image(data_url) as data_image:
+            if _image_equals(url_image, Image.open(f)):
+                assert _image_equals(url_image, data_image)
+            else:
+                pass  # Lossy format; only check that image can be opened
diff --git a/tests/tokenization/test_image_processor.py b/tests/tokenization/test_image_processor.py
new file mode 100644
index 00000000..5ba23233
--- /dev/null
+++ b/tests/tokenization/test_image_processor.py
@@ -0,0 +1,20 @@
+import pytest
+from transformers.image_processing_utils import BaseImageProcessor
+
+from vllm.transformers_utils.image_processor import get_image_processor
+
+IMAGE_PROCESSOR_NAMES = [
+    "llava-hf/llava-1.5-7b-hf",
+    "llava-hf/llava-v1.6-34b-hf",
+]
+
+
+@pytest.mark.parametrize("processor_name", IMAGE_PROCESSOR_NAMES)
+def test_image_processor_revision(processor_name: str):
+    # Assume that "main" branch always exists
+    image_processor = get_image_processor(processor_name, revision="main")
+    assert isinstance(image_processor, BaseImageProcessor)
+
+    # Assume that "never" branch always does not exist
+    with pytest.raises(OSError, match='not a valid git identifier'):
+        get_image_processor(processor_name, revision="never")
diff --git a/vllm/config.py b/vllm/config.py
index 3bdd3f77..9053e995 100644
--- a/vllm/config.py
+++ b/vllm/config.py
@@ -1,11 +1,13 @@
 import enum
 import json
 from dataclasses import dataclass, field, fields
-from typing import TYPE_CHECKING, ClassVar, List, Optional, Union
+from typing import (TYPE_CHECKING, ClassVar, Dict, List, Optional, Protocol,
+                    Union, Tuple, Any)
 
 import torch
 from packaging.version import Version
-from transformers import PretrainedConfig
+from transformers import PretrainedConfig, PreTrainedTokenizerBase
+from transformers import AutoProcessor
 
 from vllm.logger import init_logger
 from vllm.model_executor.layers.quantization import (QUANTIZATION_METHODS,
@@ -969,6 +971,61 @@ class LoRAConfig:
                 "LoRA is enabled.")
 
 
+class OpenAIVisionAdapter(Protocol):
+
+    def get_image_token_text(self, config: "VisionLanguageConfig",
+                             tokenizer: PreTrainedTokenizerBase,
+                             image_idx: int) -> str:
+        """Defines how to represent an image in the text prompt."""
+        ...
+
+
+class OpenAIVisionAdapterForNoImage(OpenAIVisionAdapter):
+
+    def get_image_token_text(self, config: "VisionLanguageConfig",
+                             tokenizer: PreTrainedTokenizerBase,
+                             image_idx: int) -> str:
+        raise NotImplementedError("Image input not supported")
+
+
+class OpenAIVisionAdapterForSingleImage(OpenAIVisionAdapter):
+
+    def get_image_token_text(self, config: "VisionLanguageConfig",
+                             tokenizer: PreTrainedTokenizerBase,
+                             image_idx: int) -> str:
+        if image_idx > 0:
+            raise NotImplementedError("Multiple image input not supported")
+
+        image_token_str = tokenizer.decode(config.image_token_id)
+        return image_token_str * config.image_feature_size
+
+
+class OpenAIVisionAdapterForMultiImage(OpenAIVisionAdapter):
+
+    def get_image_token_text(self, config: "VisionLanguageConfig",
+                             tokenizer: PreTrainedTokenizerBase,
+                             image_idx: int) -> str:
+        image_token_str = tokenizer.decode(config.image_token_id + image_idx)
+        return image_token_str * config.image_feature_size
+
+class OpenAIVisionAdapterForPhi3VImage(OpenAIVisionAdapter):
+    """
+        OpenAIVisionAdapter for Phi3VImage model.
+    """
+
+    def get_image_token_text(self, config: "VisionLanguageConfig",
+                             processor,
+                             image_idx: int,
+                             image_size: Optional[Tuple[int, int]] = None,
+                             ) -> str:
+        if image_idx > 0:
+            raise NotImplementedError("Multiple image input not supported")
+
+        image_token_str = processor.tokenizer.decode(config.image_token_id + image_idx)
+        num_image_tokens = processor.calc_num_image_tokens_from_image_size(image_size[0], image_size[1])
+        return image_token_str * num_image_tokens
+
+
 @dataclass
 class VisionLanguageConfig:
     """Configs the input data format and how models should run for
@@ -990,6 +1047,16 @@ class VisionLanguageConfig:
         PIXEL_VALUES = enum.auto()
         IMAGE_FEATURES = enum.auto()
 
+    class ImageOpenAI(enum.Enum):
+        """Specifies how the model implements
+        `OpenAI's GPT-4 with Vision API <https://platform.openai.com/docs/guides/vision>`_.
+        """
+        UNSUPPORTED = enum.auto()
+        SINGLE_IMAGE = enum.auto()
+        MULTI_IMAGE = enum.auto()
+        # phi-3-V
+        PHI3V_SINGLE_IMAGE = enum.auto()
+
     image_input_type: ImageInputType
     # The input id corresponding to image token.
     image_token_id: int
@@ -998,10 +1065,21 @@ class VisionLanguageConfig:
     # worst case scenario (biggest supported resolution).
     image_input_shape: tuple
     image_feature_size: int
+    # The image processor to load from HuggingFace
+    image_processor: Optional[str]
+    image_processor_revision: Optional[str]
+
+    image_openai: ImageOpenAI = ImageOpenAI.SINGLE_IMAGE
+    _image_openai_processors: ClassVar[Dict[
+        ImageOpenAI, OpenAIVisionAdapter]] = {
+            ImageOpenAI.UNSUPPORTED: OpenAIVisionAdapterForNoImage(),
+            ImageOpenAI.SINGLE_IMAGE: OpenAIVisionAdapterForSingleImage(),
+            ImageOpenAI.MULTI_IMAGE: OpenAIVisionAdapterForMultiImage(),
+            ImageOpenAI.PHI3V_SINGLE_IMAGE: OpenAIVisionAdapterForPhi3VImage(),
+        }
 
     @classmethod
-    def get_image_input_enum_type(
-            cls, value: str) -> "VisionLanguageConfig.ImageInputType":
+    def get_image_input_enum_type(cls, value: str) -> ImageInputType:
         """Get the image input type from a string."""
         try:
             return cls.ImageInputType[value.upper()]
@@ -1010,6 +1088,34 @@ class VisionLanguageConfig:
                              f"Expecting to choose from "
                              f"{[x.name for x in cls.ImageInputType]}.") from e
 
+    @classmethod
+    def get_image_openai_enum_type(cls, value: str) -> ImageOpenAI:
+        """Get the GPT-4 with Vision API implementation from a string."""
+        try:
+            return cls.ImageOpenAI[value.upper()]
+        except KeyError as e:
+            raise ValueError(f"{value} is not a valid choice. "
+                             f"Expecting to choose from "
+                             f"{[x.name for x in cls.ImageOpenAI]}.") from e
+
+    def get_image_token_text(self, config: "VisionLanguageConfig",
+                             tokenizer: PreTrainedTokenizerBase,
+                             image_idx: int,
+                             image_size: Optional[Tuple[int, int]] = None,
+                             processor: Optional[Any] = None
+                             ) -> str:
+        
+        if self.image_openai == self.ImageOpenAI.PHI3V_SINGLE_IMAGE:
+            return self._image_openai_processors[self.image_openai].get_image_token_text(
+                config, 
+                processor, 
+                image_idx,
+                image_size
+            )
+        else:
+            return self._image_openai_processors[self.image_openai] \
+                .get_image_token_text(config, tokenizer, image_idx)
+
 
 _STR_DTYPE_TO_TORCH_DTYPE = {
     "half": torch.float16,
diff --git a/vllm/core/scheduler.py b/vllm/core/scheduler.py
index 7c55b08d..0e32e17e 100644
--- a/vllm/core/scheduler.py
+++ b/vllm/core/scheduler.py
@@ -969,11 +969,11 @@ class Scheduler:
                 lora_request=seq_group.lora_request,
                 computed_block_nums=common_computed_block_nums,
                 state=seq_group.state,
-                # `multi_modal_data` will only be present for the 1st comm
+                # `multi_modal_kwargs` will only be present for the 1st comm
                 # between engine and worker.
                 # the subsequent comms can still use delta, but
-                # `multi_modal_data` will be None.
-                multi_modal_data=seq_group.multi_modal_data
+                # `multi_modal_kwargs` will be None.
+                multi_modal_kwargs=seq_group.multi_modal_kwargs
                 if scheduler_outputs.num_prefill_groups > 0 else None,
             )
             seq_group_metadata_list.append(seq_group_metadata)
diff --git a/vllm/engine/arg_utils.py b/vllm/engine/arg_utils.py
index 78cd0757..2e49492b 100644
--- a/vllm/engine/arg_utils.py
+++ b/vllm/engine/arg_utils.py
@@ -74,6 +74,11 @@ class EngineArgs:
     image_token_id: Optional[int] = None
     image_input_shape: Optional[str] = None
     image_feature_size: Optional[int] = None
+    image_processor: Optional[str] = None
+    image_processor_revision: Optional[str] = None
+    no_image_processor: bool = False
+    image_openai: str = VisionLanguageConfig.ImageOpenAI.SINGLE_IMAGE.name
+
     scheduler_delay_factor: float = 0.0
     enable_chunked_prefill: bool = False
 
@@ -408,15 +413,15 @@ class EngineArgs:
                             choices=["auto", "cuda", "neuron", "cpu"],
                             help='Device type for vLLM execution.')
         # Related to Vision-language models such as llava
-        parser.add_argument(
-            '--image-input-type',
-            type=nullable_str,
-            default=None,
-            choices=[
-                t.name.lower() for t in VisionLanguageConfig.ImageInputType
-            ],
-            help=('The image input type passed into vLLM. '
-                  'Should be one of "pixel_values" or "image_features".'))
+        # (listed separately in docs/source/models/vlm.rst)
+        parser.add_argument('--image-input-type',
+                            type=str,
+                            default=None,
+                            choices=[
+                                t.name.lower()
+                                for t in VisionLanguageConfig.ImageInputType
+                            ],
+                            help=('The image input type passed into vLLM.'))
         parser.add_argument('--image-token-id',
                             type=int,
                             default=None,
@@ -432,6 +437,30 @@ class EngineArgs:
             type=int,
             default=None,
             help=('The image feature size along the context dimension.'))
+        parser.add_argument(
+            '--image-openai',
+            type=str,
+            default=VisionLanguageConfig.ImageOpenAI.SINGLE_IMAGE.name.lower(),
+            choices=[t.name.lower() for t in VisionLanguageConfig.ImageOpenAI],
+            help=('Specifies how the model implements GPT-4 with Vision API.'))
+        parser.add_argument(
+            '--image-processor',
+            type=str,
+            default=EngineArgs.image_processor,
+            help='name or path of the huggingface image processor to use')
+        parser.add_argument(
+            '--image-processor-revision',
+            type=str,
+            default=None,
+            help='the specific image processor version to use. It can be a '
+            'branch name, a tag name, or a commit id. If unspecified, will use '
+            'the default version.')
+        parser.add_argument(
+            '--no-image-processor',
+            action='store_true',
+            help='Disables the use of image processor, even if one is defined '
+            'for the model on huggingface.')
+
         parser.add_argument(
             '--scheduler-delay-factor',
             type=float,
@@ -450,7 +479,6 @@ class EngineArgs:
             default=EngineArgs.speculative_model,
             help=
             'The name of the draft model to be used in speculative decoding.')
-
         parser.add_argument(
             '--num-speculative-tokens',
             type=int,
@@ -570,12 +598,27 @@ class EngineArgs:
                 raise ValueError(
                     'Specify `image_token_id`, `image_input_shape` and '
                     '`image_feature_size` together with `image_input_type`.')
+
+            if self.image_processor is None:
+                self.image_processor = self.model
+            if self.no_image_processor:
+                if self.image_processor != self.model:
+                    raise ValueError(
+                        'Do not specify `image_processor` when it is disabled '
+                        'by `--no-image-processor`.')
+
+                self.image_processor = None
+
             vision_language_config = VisionLanguageConfig(
                 image_input_type=VisionLanguageConfig.
                 get_image_input_enum_type(self.image_input_type),
                 image_token_id=self.image_token_id,
                 image_input_shape=str_to_int_tuple(self.image_input_shape),
                 image_feature_size=self.image_feature_size,
+                image_processor=self.image_processor,
+                image_processor_revision=self.image_processor_revision,
+                image_openai=VisionLanguageConfig.get_image_openai_enum_type(
+                    self.image_openai),
             )
         else:
             vision_language_config = None
diff --git a/vllm/engine/async_llm_engine.py b/vllm/engine/async_llm_engine.py
index cf5053bb..b42c6988 100644
--- a/vllm/engine/async_llm_engine.py
+++ b/vllm/engine/async_llm_engine.py
@@ -323,7 +323,7 @@ class AsyncLLMEngine:
         # We need to keep a reference to unshielded
         # task as well to prevent it from being garbage
         # collected
-        self._background_loop_unshielded: Optional[asyncio.Task[Any]] = None
+        self._background_loop_unshielded: Optional[asyncio.Task] = None
         self.start_engine_loop = start_engine_loop
         self._errored_with: Optional[BaseException] = None
 
diff --git a/vllm/engine/llm_engine.py b/vllm/engine/llm_engine.py
index 94a5b397..927da9b9 100644
--- a/vllm/engine/llm_engine.py
+++ b/vllm/engine/llm_engine.py
@@ -403,7 +403,10 @@ class LLMEngine:
         if lora_request is not None and not self.lora_config:
             raise ValueError(f"Got lora_request {lora_request} but LoRA is "
                              "not enabled!")
-        max_logprobs = self.get_model_config().max_logprobs
+
+        model_config = self.get_model_config()
+
+        max_logprobs = model_config.max_logprobs
         if (sampling_params.logprobs
                 and sampling_params.logprobs > max_logprobs) or (
                     sampling_params.prompt_logprobs
@@ -441,9 +444,21 @@ class LLMEngine:
         sampling_params.update_from_generation_config(
             self.generation_config_fields)
 
+        # Process multi-modal data
+        if multi_modal_data is None:
+            mm_kwargs = {}
+        else:
+            vlm_config = self.vision_language_config
+            assert vlm_config is not None, (
+                "Multi-modal inputs are only supported by "
+                "vision language models.")
+
+            mm_kwargs = multi_modal_data.get_input_kwargs(
+                self.model_config, vlm_config)
+
         # Create the sequence group.
         seq_group = SequenceGroup(request_id, [seq], sampling_params,
-                                  arrival_time, lora_request, multi_modal_data)
+                                  arrival_time, lora_request, mm_kwargs)
 
         # Add the sequence group to the scheduler.
         self.scheduler.add_seq_group(seq_group)
diff --git a/vllm/entrypoints/api_server.py b/vllm/entrypoints/api_server.py
index 075de0b4..7f55a7c8 100644
--- a/vllm/entrypoints/api_server.py
+++ b/vllm/entrypoints/api_server.py
@@ -15,23 +15,44 @@ import uvicorn
 from fastapi import FastAPI, Request
 from fastapi.responses import JSONResponse, Response, StreamingResponse
 
-from vllm.engine.arg_utils import AsyncEngineArgs
+from vllm.engine.arg_utils import AsyncEngineArgs, nullable_str
 from vllm.engine.async_llm_engine import AsyncLLMEngine
 from vllm.sampling_params import SamplingParams
 from vllm.usage.usage_lib import UsageContext
 from vllm.utils import random_uuid
 
+from vllm.entrypoints.openai.serving_engine import LoRAModulePath
+from vllm.entrypoints.openai.protocol import ChatCompletionRequest
+from vllm.entrypoints.openai.protocol import (ChatCompletionRequest,
+                                              ChatCompletionResponse,
+                                              CompletionRequest, ErrorResponse)
+from vllm.entrypoints.openai.serving_chat import OpenAIServingChat
+from vllm.entrypoints.openai.serving_completion import OpenAIServingCompletion
+from vllm.usage.usage_lib import UsageContext
+
+TIMEOUT_KEEP_ALIVE = 5  # seconds
+
+openai_serving_chat: OpenAIServingChat
+openai_serving_completion: OpenAIServingCompletion
+
 TIMEOUT_KEEP_ALIVE = 5  # seconds.
 app = FastAPI()
 engine = None
 
+class LoRAParserAction(argparse.Action):
+
+    def __call__(self, parser, namespace, values, option_string=None):
+        lora_list = []
+        for item in values:
+            name, path = item.split('=')
+            lora_list.append(LoRAModulePath(name, path))
+        setattr(namespace, self.dest, lora_list)
 
 @app.get("/health")
 async def health() -> Response:
     """Health check."""
     return Response(status_code=200)
 
-
 @app.post("/generate")
 async def generate(request: Request) -> Response:
     """Generate completion for the request.
@@ -46,37 +67,29 @@ async def generate(request: Request) -> Response:
     stream = request_dict.pop("stream", False)
     sampling_params = SamplingParams(**request_dict)
     request_id = random_uuid()
+    # create ChatCompletionRequest object
+    # load messages from prompt
+    messages = json.loads(prompt)
+
+    chat_request = ChatCompletionRequest(
+        model=served_model_names[0],
+        messages=messages,
+        stream=stream,
+        **request_dict
+    )
 
-    assert engine is not None
-    results_generator = engine.generate(prompt, sampling_params, request_id)
-
-    # Streaming case
-    async def stream_results() -> AsyncGenerator[bytes, None]:
-        async for request_output in results_generator:
-            prompt = request_output.prompt
-            text_outputs = [
-                prompt + output.text for output in request_output.outputs
-            ]
-            ret = {"text": text_outputs}
-            yield (json.dumps(ret) + "\0").encode("utf-8")
-
-    if stream:
-        return StreamingResponse(stream_results())
-
-    # Non-streaming case
-    final_output = None
-    async for request_output in results_generator:
-        if await request.is_disconnected():
-            # Abort the request if the client disconnects.
-            await engine.abort(request_id)
-            return Response(status_code=499)
-        final_output = request_output
-
-    assert final_output is not None
-    prompt = final_output.prompt
-    text_outputs = [prompt + output.text for output in final_output.outputs]
-    ret = {"text": text_outputs}
-    return JSONResponse(ret)
+    generator = await openai_serving_chat.create_chat_completion(
+        chat_request, request)
+    if isinstance(generator, ErrorResponse):
+        return JSONResponse(content=generator.model_dump(),
+                            status_code=generator.code)
+    if chat_request.stream:
+        return StreamingResponse(content=generator,
+                                 media_type="text/event-stream")
+    else:
+        assert isinstance(generator, ChatCompletionResponse)
+        response = JSONResponse(content=generator.model_dump())
+        return response
 
 
 if __name__ == "__main__":
@@ -100,6 +113,25 @@ if __name__ == "__main__":
         type=str,
         default=None,
         help="FastAPI root_path when app is behind a path based routing proxy")
+    parser.add_argument("--chat-template",
+                        type=nullable_str,
+                        default=None,
+                        help="The file path to the chat template, "
+                        "or the template in single-line form "
+                        "for the specified model")
+    parser.add_argument("--response-role",
+                        type=nullable_str,
+                        default="assistant",
+                        help="The role name to return if "
+                        "`request.add_generation_prompt=true`.")
+    parser.add_argument(
+        "--lora-modules",
+        type=nullable_str,
+        default=None,
+        nargs='+',
+        action=LoRAParserAction,
+        help="LoRA module configurations in the format name=path. "
+        "Multiple modules can be specified.")
     parser.add_argument("--log-level", type=str, default="debug")
     parser = AsyncEngineArgs.add_cli_args(parser)
     args = parser.parse_args()
@@ -107,6 +139,12 @@ if __name__ == "__main__":
     engine = AsyncLLMEngine.from_engine_args(
         engine_args, usage_context=UsageContext.API_SERVER)
 
+    served_model_names = [args.model]
+    openai_serving_chat = OpenAIServingChat(engine, served_model_names,
+                                            args.response_role,
+                                            args.lora_modules,
+                                            args.chat_template)
+
     app.root_path = args.root_path
     uvicorn.run(app,
                 host=args.host,
diff --git a/vllm/entrypoints/llm.py b/vllm/entrypoints/llm.py
index 3ed660e1..c13ccdc6 100644
--- a/vllm/entrypoints/llm.py
+++ b/vllm/entrypoints/llm.py
@@ -1,6 +1,5 @@
 from typing import List, Optional, Union
 
-import torch
 from tqdm import tqdm
 from transformers import PreTrainedTokenizer, PreTrainedTokenizerFast
 
@@ -142,7 +141,8 @@ class LLM:
         prompt_token_ids: Optional[List[List[int]]] = None,
         use_tqdm: bool = True,
         lora_request: Optional[LoRARequest] = None,
-        multi_modal_data: Optional[MultiModalData] = None,
+        multi_modal_datas: Optional[Union[
+            Optional[MultiModalData], List[Optional[MultiModalData]]]] = None,
     ) -> List[RequestOutput]:
         """Generates the completions for the input prompts.
 
@@ -161,7 +161,7 @@ class LLM:
                 use the tokenizer to convert the prompts to token IDs.
             use_tqdm: Whether to use tqdm to display the progress bar.
             lora_request: LoRA request to use for generation, if any.
-            multi_modal_data: Multi modal data.
+            multi_modal_datas: A list of multi modal data, one per prompt.
 
         Returns:
             A list of `RequestOutput` objects containing the generated
@@ -196,25 +196,36 @@ class LLM:
                         list) and len(sampling_params) != num_requests:
             raise ValueError("The lengths of prompts and sampling_params "
                              "must be the same.")
-        if multi_modal_data:
-            multi_modal_data.data = multi_modal_data.data.to(torch.float16)
 
         # Add requests to the engine.
+        if prompts is not None:
+            num_requests = len(prompts)
+        else:
+            assert prompt_token_ids is not None
+            num_requests = len(prompt_token_ids)
+        
+        if isinstance(multi_modal_datas, MultiModalData):
+            # Convert a single multi_modal_data to a list.
+            multi_modal_datas = [multi_modal_datas]
+        if (multi_modal_datas is not None
+                and len(multi_modal_datas) != num_requests):
+            raise ValueError(f"The lengths of prompts/prompt_token_ids "
+                             f"({num_requests}) and multi_modal_datas "
+                             f"({len(multi_modal_datas)}) must be the same.")
+
         for i in range(num_requests):
             prompt = prompts[i] if prompts is not None else None
             token_ids = None if prompt_token_ids is None else prompt_token_ids[
                 i]
+            multi_modal_data = multi_modal_datas[
+                i] if multi_modal_datas is not None else None
             self._add_request(
                 prompt,
                 sampling_params[i]
                 if isinstance(sampling_params, list) else sampling_params,
                 token_ids,
                 lora_request=lora_request,
-                # Get ith image while maintaining the batch dim.
-                multi_modal_data=MultiModalData(
-                    type=multi_modal_data.type,
-                    data=multi_modal_data.data[i].unsqueeze(0))
-                if multi_modal_data else None,
+                multi_modal_data=multi_modal_data,
             )
         return self._run_engine(use_tqdm)
 
diff --git a/vllm/entrypoints/openai/api_server.py b/vllm/entrypoints/openai/api_server.py
index f9e294af..50957bf5 100644
--- a/vllm/entrypoints/openai/api_server.py
+++ b/vllm/entrypoints/openai/api_server.py
@@ -4,7 +4,7 @@ import inspect
 import re
 from contextlib import asynccontextmanager
 from http import HTTPStatus
-from typing import Any, Set
+from typing import Set
 
 import fastapi
 import uvicorn
@@ -34,7 +34,8 @@ openai_serving_chat: OpenAIServingChat
 openai_serving_completion: OpenAIServingCompletion
 logger = init_logger(__name__)
 
-_running_tasks: Set[asyncio.Task[Any]] = set()
+#_running_tasks: Set[asyncio.Task[Any]] = set()
+_running_tasks: Set[asyncio.Task] = set()
 
 
 @asynccontextmanager
diff --git a/vllm/entrypoints/openai/serving_chat.py b/vllm/entrypoints/openai/serving_chat.py
index c8f4a6b3..5bec5913 100644
--- a/vllm/entrypoints/openai/serving_chat.py
+++ b/vllm/entrypoints/openai/serving_chat.py
@@ -8,6 +8,7 @@ from fastapi import Request
 from openai.types.chat import (ChatCompletionContentPartParam,
                                ChatCompletionRole)
 
+from vllm.config import VisionLanguageConfig
 from vllm.engine.async_llm_engine import AsyncLLMEngine
 from vllm.entrypoints.openai.protocol import (
     ChatCompletionRequest, ChatCompletionResponse,
@@ -20,7 +21,8 @@ from vllm.logger import init_logger
 from vllm.model_executor.guided_decoding import (
     get_guided_decoding_logits_processor)
 from vllm.outputs import RequestOutput
-from vllm.utils import random_uuid
+from vllm.sequence import ImagePixelData
+from vllm.utils import get_image_async, random_uuid, get_image_size
 
 logger = init_logger(__name__)
 
@@ -47,27 +49,70 @@ class OpenAIServingChat(OpenAIServing):
 
         self.response_role = response_role
 
-    def _parse_chat_message_content(
+    async def _get_and_parse_image(self, image_url: str) -> ImagePixelData:
+        with await get_image_async(image_url) as image:
+            return ImagePixelData(image)
+
+    def _parse_chat_message_image_input(
         self,
         role: ChatCompletionRole,
-        content: Optional[Union[str,
-                                Iterable[ChatCompletionContentPartParam]]],
-    ) -> Tuple[List[ConversationMessage], List[Awaitable[object]]]:
-        if content is None:
-            return [], []
-        if isinstance(content, str):
-            return [ConversationMessage(role=role, content=content)], []
+        content: Iterable[ChatCompletionContentPartParam],
+    ) -> Tuple[List[ConversationMessage], List[Awaitable[ImagePixelData]]]:
+        """Parse image input defined by OpenAI Chat Completions API."""
+        config = getattr(self.engine.engine, "vision_language_config", None)
+        if not isinstance(config, VisionLanguageConfig):
+            raise ValueError("GPT-4 with Vision API is only supported for "
+                             "vision language models.")
+
+        tokenizer = self.tokenizer
+        assert tokenizer is not None
 
         texts: List[str] = []
-        for _, part in enumerate(content):
+        image_futures: List[Awaitable[ImagePixelData]] = []
+
+        for i, part in enumerate(content):
             if part["type"] == "text":
                 text = part["text"]
 
                 texts.append(text)
+            elif part["type"] == "image_url":
+                image_url = part["image_url"]
+                if image_url.get("detail", "auto") != "auto":
+                    logger.info("content[%s].image_url.detail is ignored", i)
+
+                image_future = self._get_and_parse_image(image_url["url"])
+
+                image_size = get_image_size(image_url["url"])
+                text = config.get_image_token_text(
+                    config, 
+                    tokenizer, 
+                    image_idx=len(image_futures),
+                    image_size=image_size,
+                    processor=self.processor
+                    )
+
+                texts.append(text)
+                image_futures.append(image_future)
             else:
                 raise NotImplementedError(f"Unknown part type: {part['type']}")
 
-        return [ConversationMessage(role=role, content="\n".join(texts))], []
+        messages = [ConversationMessage(role=role, content="\n".join(texts))]
+        data_futures = image_futures
+
+        return messages, data_futures
+
+    def _parse_chat_message_content(
+        self,
+        role: ChatCompletionRole,
+        content: Optional[Union[str,
+                                Iterable[ChatCompletionContentPartParam]]],
+    ) -> Tuple[List[ConversationMessage], List[Awaitable[ImagePixelData]]]:
+        if content is None:
+            return [], []
+        if isinstance(content, str):
+            return [ConversationMessage(role=role, content=content)], []
+
+        return self._parse_chat_message_image_input(role, content)
 
     async def create_chat_completion(
         self, request: ChatCompletionRequest, raw_request: Request
@@ -88,12 +133,14 @@ class OpenAIServingChat(OpenAIServing):
 
         try:
             conversation: List[ConversationMessage] = []
+            multi_modal_futures: List[Awaitable[ImagePixelData]] = []
 
             for m in request.messages:
-                messages, _ = self._parse_chat_message_content(
+                messages, futures = self._parse_chat_message_content(
                     m["role"], m["content"])
 
                 conversation.extend(messages)
+                multi_modal_futures.extend(futures)
 
             prompt = self.tokenizer.apply_chat_template(
                 conversation=conversation,
@@ -104,11 +151,20 @@ class OpenAIServingChat(OpenAIServing):
             logger.error("Error in applying chat template from request: %s", e)
             return self.create_error_response(str(e))
 
+        try:
+            if len(multi_modal_futures) == 0:
+                multi_modal_data = None
+            elif len(multi_modal_futures) == 1:
+                multi_modal_data = await multi_modal_futures[0]
+            else:
+                # multi_modal_datas = await asyncio.gather(*multi_modal_futures)
+                raise NotImplementedError("Multiple image input not supported")
+        except Exception as e:
+            logger.error(f"Error in loading multi-modal data: {str(e)}")
+            return self.create_error_response(str(e))
+
         request_id = f"cmpl-{random_uuid()}"
         try:
-            # Tokenize/detokenize depending on prompt format (string/token list)
-            prompt_ids, prompt_text = self._validate_prompt_and_tokenize(
-                request, prompt=prompt)
             sampling_params = request.to_sampling_params()
             lora_request = self._maybe_get_lora(request)
             decoding_config = await self.engine.get_decoding_config()
@@ -123,21 +179,42 @@ class OpenAIServingChat(OpenAIServing):
                     sampling_params.logits_processors = []
                 sampling_params.logits_processors.append(
                     guided_decode_logits_processor)
+
+            prompt_ids, prompt_text = self._tokenize_prompt_input(
+                request,
+                prompt,
+                truncate_prompt_tokens=sampling_params.truncate_prompt_tokens,
+            )
+
+            result_generator = self.engine.generate(
+                prompt_text,
+                sampling_params,
+                request_id,
+                prompt_ids,
+                lora_request=lora_request,
+                multi_modal_data=multi_modal_data,
+            )
         except ValueError as e:
+            # TODO: Use a vllm-specific Validation Error
             return self.create_error_response(str(e))
 
-        result_generator = self.engine.generate(prompt_text, sampling_params,
-                                                request_id, prompt_ids,
-                                                lora_request)
         # Streaming response
         if request.stream:
             return self.chat_completion_stream_generator(
-                request, result_generator, request_id, conversation)
+                request,
+                conversation,
+                result_generator,
+                request_id,
+            )
         else:
             try:
                 return await self.chat_completion_full_generator(
-                    request, raw_request, result_generator, request_id,
-                    conversation)
+                    request,
+                    conversation,
+                    raw_request,
+                    result_generator,
+                    request_id,
+                )
             except ValueError as e:
                 # TODO: Use a vllm-specific Validation Error
                 return self.create_error_response(str(e))
@@ -149,9 +226,11 @@ class OpenAIServingChat(OpenAIServing):
             return request.messages[-1]["role"]
 
     async def chat_completion_stream_generator(
-            self, request: ChatCompletionRequest,
-            result_generator: AsyncIterator[RequestOutput], request_id: str,
-            conversation: List[ConversationMessage]
+        self,
+        request: ChatCompletionRequest,
+        conversation: List[ConversationMessage],
+        result_generator: AsyncIterator[RequestOutput],
+        request_id: str,
     ) -> AsyncGenerator[str, None]:
         model_name = self.served_model_names[0]
         created_time = int(time.time())
@@ -159,10 +238,11 @@ class OpenAIServingChat(OpenAIServing):
         first_iteration = True
 
         # Send response for each token for each request.n (index)
-        assert request.n is not None
-        previous_texts = [""] * request.n
-        previous_num_tokens = [0] * request.n
-        finish_reason_sent = [False] * request.n
+        num_choices = 1 if request.n is None else request.n
+        previous_texts = [""] * num_choices
+        previous_num_tokens = [0] * num_choices
+        finish_reason_sent = [False] * num_choices
+
         try:
             async for res in result_generator:
                 # We need to do it here, because if there are exceptions in
@@ -172,7 +252,7 @@ class OpenAIServingChat(OpenAIServing):
                     # Send first response for each request.n (index) with
                     # the role
                     role = self.get_chat_request_role(request)
-                    for i in range(request.n):
+                    for i in range(num_choices):
                         choice_data = ChatCompletionResponseStreamChoice(
                             index=i,
                             delta=DeltaMessage(role=role),
@@ -197,19 +277,19 @@ class OpenAIServingChat(OpenAIServing):
                             last_msg_content = conversation[-1]["content"]
 
                         if last_msg_content:
-                            for i in range(request.n):
+                            for i in range(num_choices):
                                 choice_data = (
                                     ChatCompletionResponseStreamChoice(
                                         index=i,
                                         delta=DeltaMessage(
                                             content=last_msg_content),
+                                        logprobs=None,
                                         finish_reason=None))
                                 chunk = ChatCompletionStreamResponse(
                                     id=request_id,
                                     object=chunk_object_type,
                                     created=created_time,
                                     choices=[choice_data],
-                                    logprobs=None,
                                     model=model_name)
                                 data = chunk.model_dump_json(
                                     exclude_unset=True)
@@ -289,11 +369,13 @@ class OpenAIServingChat(OpenAIServing):
         yield "data: [DONE]\n\n"
 
     async def chat_completion_full_generator(
-        self, request: ChatCompletionRequest, raw_request: Request,
-        result_generator: AsyncIterator[RequestOutput], request_id: str,
-        conversation: List[ConversationMessage]
+        self,
+        request: ChatCompletionRequest,
+        conversation: List[ConversationMessage],
+        raw_request: Request,
+        result_generator: AsyncIterator[RequestOutput],
+        request_id: str,
     ) -> Union[ErrorResponse, ChatCompletionResponse]:
-
         model_name = self.served_model_names[0]
         created_time = int(time.time())
         final_res: Optional[RequestOutput] = None
@@ -306,7 +388,7 @@ class OpenAIServingChat(OpenAIServing):
             final_res = res
         assert final_res is not None
 
-        choices = []
+        choices: List[ChatCompletionResponseChoice] = []
 
         role = self.get_chat_request_role(request)
         for output in final_res.outputs:
@@ -333,9 +415,11 @@ class OpenAIServingChat(OpenAIServing):
 
         if request.echo:
             last_msg_content = ""
-            if conversation and conversation[-1].get(
-                    "content") and conversation[-1].get("role") == role:
-                last_msg_content = conversation[-1]["content"]
+            if request.messages and isinstance(
+                    request.messages, list) and request.messages[-1].get(
+                        "content") and request.messages[-1].get(
+                            "role") == role:
+                last_msg_content = request.messages[-1]["content"]
 
             for choice in choices:
                 full_message = last_msg_content + choice.message.content
@@ -382,11 +466,11 @@ class OpenAIServingChat(OpenAIServing):
                 tokenizer.chat_template = codecs.decode(
                     chat_template, "unicode_escape")
 
-            logger.info("Using supplied chat template:\n%s",
-                        tokenizer.chat_template)
+            logger.info(
+                f"Using supplied chat template:\n{tokenizer.chat_template}")
         elif tokenizer.chat_template is not None:
-            logger.info("Using default chat template:\n%s",
-                        tokenizer.chat_template)
+            logger.info(
+                f"Using default chat template:\n{tokenizer.chat_template}")
         else:
             logger.warning(
                 "No chat template provided. Chat API will not work.")
diff --git a/vllm/entrypoints/openai/serving_completion.py b/vllm/entrypoints/openai/serving_completion.py
index 6a7f29c4..617ac20e 100644
--- a/vllm/entrypoints/openai/serving_completion.py
+++ b/vllm/entrypoints/openai/serving_completion.py
@@ -27,29 +27,6 @@ TypeCreateLogProbsFn = Callable[
     [TypeTokenIDs, TypeTopLogProbs, Optional[int], int], LogProbs]
 
 
-def parse_prompt_format(prompt) -> Tuple[bool, list]:
-    # get the prompt, openai supports the following
-    # "a string, array of strings, array of tokens, or array of token arrays."
-    prompt_is_tokens = False
-    prompts = [prompt]  # case 1: a string
-    if isinstance(prompt, list):
-        if len(prompt) == 0:
-            raise ValueError("please provide at least one prompt")
-        elif isinstance(prompt[0], str):
-            prompt_is_tokens = False
-            prompts = prompt  # case 2: array of strings
-        elif isinstance(prompt[0], int):
-            prompt_is_tokens = True
-            prompts = [prompt]  # case 3: array of tokens
-        elif isinstance(prompt[0], list) and isinstance(prompt[0][0], int):
-            prompt_is_tokens = True
-            prompts = prompt  # case 4: array of token arrays
-        else:
-            raise ValueError("prompt must be a string, array of strings, "
-                             "array of tokens, or array of token arrays")
-    return prompt_is_tokens, prompts
-
-
 class OpenAIServingCompletion(OpenAIServing):
 
     def __init__(self,
@@ -101,23 +78,16 @@ class OpenAIServingCompletion(OpenAIServing):
                     sampling_params.logits_processors = []
                 sampling_params.logits_processors.append(
                     guided_decode_logit_processor)
-            prompt_is_tokens, prompts = parse_prompt_format(request.prompt)
-
-            for i, prompt in enumerate(prompts):
-                if prompt_is_tokens:
-                    prompt_formats = self._validate_prompt_and_tokenize(
-                        request,
-                        prompt_ids=prompt,
-                        truncate_prompt_tokens=sampling_params.
-                        truncate_prompt_tokens)
-                else:
-                    prompt_formats = self._validate_prompt_and_tokenize(
-                        request,
-                        prompt=prompt,
-                        truncate_prompt_tokens=sampling_params.
-                        truncate_prompt_tokens)
-                prompt_ids, prompt_text = prompt_formats
 
+            prompts = list(
+                self._tokenize_prompt_input_or_inputs(
+                    request,
+                    request.prompt,
+                    truncate_prompt_tokens=sampling_params.
+                    truncate_prompt_tokens,
+                ))
+
+            for i, (prompt_ids, prompt_text) in enumerate(prompts):
                 generators.append(
                     self.engine.generate(prompt_text,
                                          sampling_params,
@@ -157,8 +127,19 @@ class OpenAIServingCompletion(OpenAIServing):
                     await self.engine.abort(f"{request_id}-{i}")
                     return self.create_error_response("Client disconnected")
                 final_res_batch[i] = res
+
+            final_res_batch_checked: List[RequestOutput] = []
+            for final_res in final_res_batch:
+                assert final_res is not None
+                final_res_batch_checked.append(final_res)
+
             response = self.request_output_to_completion_response(
-                final_res_batch, request, request_id, created_time, model_name)
+                final_res_batch_checked,
+                request,
+                request_id,
+                created_time,
+                model_name,
+            )
         except ValueError as e:
             # TODO: Use a vllm-specific Validation Error
             return self.create_error_response(str(e))
@@ -186,10 +167,10 @@ class OpenAIServingCompletion(OpenAIServing):
         model_name: str,
         num_prompts: int,
     ) -> AsyncGenerator[str, None]:
-        assert request.n is not None
-        previous_texts = [""] * request.n * num_prompts
-        previous_num_tokens = [0] * request.n * num_prompts
-        has_echoed = [False] * request.n * num_prompts
+        num_choices = 1 if request.n is None else request.n
+        previous_texts = [""] * num_choices * num_prompts
+        previous_num_tokens = [0] * num_choices * num_prompts
+        has_echoed = [False] * num_choices * num_prompts
 
         try:
             async for prompt_idx, res in result_generator:
@@ -200,7 +181,7 @@ class OpenAIServingCompletion(OpenAIServing):
                     raise StopAsyncIteration()
 
                 for output in res.outputs:
-                    i = output.index + prompt_idx * request.n
+                    i = output.index + prompt_idx * num_choices
                     # TODO(simon): optimize the performance by avoiding full
                     # text O(n^2) sending.
 
@@ -285,8 +266,8 @@ class OpenAIServingCompletion(OpenAIServing):
         choices: List[CompletionResponseChoice] = []
         num_prompt_tokens = 0
         num_generated_tokens = 0
+
         for final_res in final_res_batch:
-            assert final_res is not None
             prompt_token_ids = final_res.prompt_token_ids
             prompt_logprobs = final_res.prompt_logprobs
             prompt_text = final_res.prompt
diff --git a/vllm/entrypoints/openai/serving_engine.py b/vllm/entrypoints/openai/serving_engine.py
index 21baea2e..96b8310a 100644
--- a/vllm/entrypoints/openai/serving_engine.py
+++ b/vllm/entrypoints/openai/serving_engine.py
@@ -2,7 +2,8 @@ import asyncio
 import json
 from dataclasses import dataclass
 from http import HTTPStatus
-from typing import Any, Awaitable, Dict, List, Optional, Tuple, Union
+from typing import (Dict, Iterable, Iterator, List, Literal, Optional, Tuple,
+                    TypedDict, Union, cast, Awaitable, Any)
 
 from pydantic import Field
 from transformers import PreTrainedTokenizer, PreTrainedTokenizerFast
@@ -17,10 +18,21 @@ from vllm.logger import init_logger
 from vllm.lora.request import LoRARequest
 from vllm.sequence import Logprob
 from vllm.transformers_utils.tokenizer import get_tokenizer
+from vllm.transformers_utils.processor import get_processor
 
 logger = init_logger(__name__)
 
 
+class InputString(TypedDict):
+    text: str
+    is_tokens: Literal[False]
+
+
+class InputTokens(TypedDict):
+    text: List[int]
+    is_tokens: Literal[True]
+
+
 @dataclass
 class LoRAModulePath:
     name: str
@@ -50,6 +62,7 @@ class OpenAIServing:
         self.max_model_len = 0
         # Lazy initialized
         self.tokenizer: Union[PreTrainedTokenizer, PreTrainedTokenizerFast]
+        self.processor: Any
 
         try:
             event_loop = asyncio.get_running_loop()
@@ -75,6 +88,16 @@ class OpenAIServing:
             tokenizer_revision=engine_model_config.tokenizer_revision,
             trust_remote_code=engine_model_config.trust_remote_code,
             truncation_side="left")
+        
+        try:
+            print("engine_model_config.tokenizer: ", engine_model_config.tokenizer)
+            self.processor = get_processor(
+                engine_model_config.tokenizer,
+                trust_remote_code=engine_model_config.trust_remote_code
+            )
+        except ValueError as e:
+            logger.error(f"Failed to load the processor: {e}")
+            self.processor = None
 
         if await_post_init is not None:
             await await_post_init
@@ -185,32 +208,48 @@ class OpenAIServing:
         # if _check_model has been called earlier, this will be unreachable
         raise ValueError(f"The model `{request.model}` does not exist.")
 
-    def _validate_prompt_and_tokenize(
+    def _normalize_prompt_text_to_input(
         self,
         request: Union[ChatCompletionRequest, CompletionRequest],
-        prompt: Optional[str] = None,
-        prompt_ids: Optional[List[int]] = None,
+        prompt: str,
+        tokenizer: Union[PreTrainedTokenizer, PreTrainedTokenizerFast],
         truncate_prompt_tokens: Optional[Annotated[int, Field(ge=1)]] = None
     ) -> Tuple[List[int], str]:
-        if not (prompt or prompt_ids):
-            raise ValueError("Either prompt or prompt_ids should be provided.")
-        if (prompt and prompt_ids):
-            raise ValueError(
-                "Only one of prompt or prompt_ids should be provided.")
-
-        if prompt_ids is None:
-            tokenizer_kwargs = {} if truncate_prompt_tokens is None else {
-                "truncation": True,
-                "max_length": truncate_prompt_tokens,
-            }
-            input_ids = self.tokenizer(prompt, **tokenizer_kwargs).input_ids
-        elif truncate_prompt_tokens is not None:
-            input_ids = prompt_ids[-truncate_prompt_tokens:]
+        if truncate_prompt_tokens is None:
+            encoded = tokenizer(prompt)
         else:
+            encoded = tokenizer(prompt,
+                                truncation=True,
+                                max_length=truncate_prompt_tokens)
+
+        input_ids = encoded.input_ids
+
+        input_text = prompt
+
+        return self._validate_input(request, input_ids, input_text)
+
+    def _normalize_prompt_tokens_to_input(
+        self,
+        request: Union[ChatCompletionRequest, CompletionRequest],
+        prompt_ids: List[int],
+        tokenizer: Union[PreTrainedTokenizer, PreTrainedTokenizerFast],
+        truncate_prompt_tokens: Optional[Annotated[int, Field(ge=1)]] = None
+    ) -> Tuple[List[int], str]:
+        if truncate_prompt_tokens is None:
             input_ids = prompt_ids
+        else:
+            input_ids = prompt_ids[-truncate_prompt_tokens:]
+
+        input_text = tokenizer.decode(prompt_ids)
+
+        return self._validate_input(request, input_ids, input_text)
 
-        input_text = prompt if prompt is not None else self.tokenizer.decode(
-            prompt_ids)
+    def _validate_input(
+        self,
+        request: Union[ChatCompletionRequest, CompletionRequest],
+        input_ids: List[int],
+        input_text: str,
+    ) -> Tuple[List[int], str]:
         token_num = len(input_ids)
 
         if request.max_tokens is None:
@@ -230,5 +269,118 @@ class OpenAIServing:
                 f"({token_num} in the messages, "
                 f"{request.max_tokens} in the completion). "
                 f"Please reduce the length of the messages or completion.", )
-        else:
-            return input_ids, input_text
+
+        return input_ids, input_text
+
+    def _tokenize_prompt_input(
+        self,
+        request: Union[ChatCompletionRequest, CompletionRequest],
+        prompt_input: Union[str, List[int]],
+        truncate_prompt_tokens: Optional[Annotated[int, Field(ge=1)]] = None,
+    ) -> Tuple[List[int], str]:
+        """A simpler implementation of
+        :meth:`~vllm.entrypoints.openai.serving_engine.OpenAIServing._tokenize_prompt_input_or_inputs`
+        that assumes single input."""
+        return next(
+            self._tokenize_prompt_inputs(
+                request,
+                [prompt_input],
+                truncate_prompt_tokens=truncate_prompt_tokens,
+            ))
+
+    def _tokenize_prompt_inputs(
+        self,
+        request: Union[ChatCompletionRequest, CompletionRequest],
+        prompt_inputs: Iterable[Union[str, List[int]]],
+        truncate_prompt_tokens: Optional[Annotated[int, Field(ge=1)]] = None,
+    ) -> Iterator[Tuple[List[int], str]]:
+        """A simpler implementation of
+        :meth:`~vllm.entrypoints.openai.serving_engine.OpenAIServing._tokenize_prompt_input_or_inputs`
+        that assumes multiple inputs."""
+        tokenizer = self.tokenizer
+        assert tokenizer is not None
+
+        for text in prompt_inputs:
+            if isinstance(text, str):
+                yield self._normalize_prompt_text_to_input(
+                    request,
+                    prompt=text,
+                    tokenizer=tokenizer,
+                    truncate_prompt_tokens=truncate_prompt_tokens,
+                )
+            else:
+                yield self._normalize_prompt_tokens_to_input(
+                    request,
+                    prompt_ids=text,
+                    tokenizer=tokenizer,
+                    truncate_prompt_tokens=truncate_prompt_tokens,
+                )
+
+    def _parse_prompt_input_or_inputs(
+        self,
+        input_or_inputs: Union[str, List[str], List[int], List[List[int]]],
+    ) -> List[Union[InputString, InputTokens]]:
+        if isinstance(input_or_inputs, str):
+            # case 1: a string
+            elem = input_or_inputs
+            return [InputString(text=elem, is_tokens=False)]
+
+        if isinstance(input_or_inputs, list):
+            if len(input_or_inputs) == 0:
+                raise ValueError("please provide at least one prompt")
+            if isinstance(input_or_inputs[0], str):
+                # case 2: array of strings
+                return [
+                    InputString(text=elem, is_tokens=False)
+                    for elem in cast(List[str], input_or_inputs)
+                ]
+            if isinstance(input_or_inputs[0], int):
+                # case 3: array of tokens
+                elem = cast(List[int], input_or_inputs)
+                return [InputTokens(text=elem, is_tokens=True)]
+            if isinstance(input_or_inputs[0], list) and isinstance(
+                    input_or_inputs[0][0], int):
+                # case 4: array of token arrays
+                return [
+                    InputTokens(text=elem, is_tokens=True)
+                    for elem in cast(List[List[int]], input_or_inputs)
+                ]
+
+        raise ValueError("prompt must be a string, array of strings, "
+                         "array of tokens, or array of token arrays")
+
+    def _tokenize_prompt_input_or_inputs(
+        self,
+        request: Union[ChatCompletionRequest, CompletionRequest],
+        input_or_inputs: Union[str, List[str], List[int], List[List[int]]],
+        truncate_prompt_tokens: Optional[Annotated[int, Field(ge=1)]] = None,
+    ) -> Iterator[Tuple[List[int], str]]:
+        """Tokenize/detokenize depending on the input format.
+        
+        According to `OpenAI API <https://platform.openai.com/docs/api-reference/embeddings/create>`_
+        , each input can be a string or array of tokens. Note that each request
+        can pass one or more inputs.
+        """
+        tokenizer = self.tokenizer
+        assert tokenizer is not None
+
+        for prompt_input in self._parse_prompt_input_or_inputs(
+                input_or_inputs):
+            # Although our type checking is based on mypy,
+            # VSCode Pyright extension should still work properly
+            # "is True" is required for Pyright to perform type narrowing
+            # See: https://github.com/microsoft/pyright/issues/7672
+            if prompt_input["is_tokens"] is False:
+                yield self._normalize_prompt_text_to_input(
+                    request,
+                    prompt=prompt_input["text"],
+                    tokenizer=tokenizer,
+                    truncate_prompt_tokens=truncate_prompt_tokens,
+                )
+            else:
+                yield self._normalize_prompt_tokens_to_input(
+                    request,
+                    prompt_ids=prompt_input["text"],
+                    tokenizer=tokenizer,
+                    truncate_prompt_tokens=truncate_prompt_tokens,
+                )
diff --git a/vllm/entrypoints/openai/test_utils.py b/vllm/entrypoints/openai/test_utils.py
new file mode 100644
index 00000000..058efd4c
--- /dev/null
+++ b/vllm/entrypoints/openai/test_utils.py
@@ -0,0 +1,50 @@
+import os
+import subprocess
+import sys
+import time
+
+# using Ray for overall ease of process management, parallel requests,
+# and debugging.
+import ray
+import requests
+
+MAX_SERVER_START_WAIT_S = 600  # wait for server to start for 60 seconds
+
+
+@ray.remote(num_gpus=1)
+class ServerRunner:
+
+    def __init__(self, args):
+        env = os.environ.copy()
+        env["PYTHONUNBUFFERED"] = "1"
+        self.proc = subprocess.Popen(
+            ["python3", "-m", "vllm.entrypoints.openai.api_server"] + args,
+            env=env,
+            stdout=sys.stdout,
+            stderr=sys.stderr,
+        )
+        self._wait_for_server()
+
+    def ready(self):
+        return True
+
+    def _wait_for_server(self):
+        # run health check
+        start = time.time()
+        while True:
+            try:
+                if requests.get(
+                        "http://localhost:8000/health").status_code == 200:
+                    break
+            except Exception as err:
+                if self.proc.poll() is not None:
+                    raise RuntimeError("Server exited unexpectedly.") from err
+
+                time.sleep(0.5)
+                if time.time() - start > MAX_SERVER_START_WAIT_S:
+                    raise RuntimeError(
+                        "Server failed to start in time.") from err
+
+    def __del__(self):
+        if hasattr(self, "proc"):
+            self.proc.terminate()
diff --git a/vllm/model_executor/model_loader/loader.py b/vllm/model_executor/model_loader/loader.py
index bafa2de6..ff8da0c8 100644
--- a/vllm/model_executor/model_loader/loader.py
+++ b/vllm/model_executor/model_loader/loader.py
@@ -9,6 +9,9 @@ import huggingface_hub
 import torch
 from torch import nn
 
+from typing import (TYPE_CHECKING, Any, Dict, Generator, List, Optional, Tuple,
+                    Type)
+
 from vllm.config import (DeviceConfig, LoadConfig, LoadFormat, LoRAConfig,
                          ModelConfig, ParallelConfig, SchedulerConfig,
                          VisionLanguageConfig)
@@ -25,11 +28,9 @@ from vllm.model_executor.model_loader.weight_utils import (
     download_weights_from_hf, filter_files_not_needed_for_inference,
     get_quant_config, initialize_dummy_weights, np_cache_weights_iterator,
     pt_weights_iterator, safetensors_weights_iterator)
-from vllm.model_executor.models.llava import LlavaForConditionalGeneration
 
-_VISION_MODEL_CLASSES = [
-    LlavaForConditionalGeneration,
-]
+if TYPE_CHECKING:
+    from vllm.model_executor.layers.linear import LinearMethodBase
 
 logger = init_logger(__name__)
 
@@ -72,7 +73,7 @@ def _get_model_initialization_kwargs(
             "but LoRA is enabled. Support for this model may "
             "be added in the future. If this is important to you, "
             "please open an issue on github.")
-    elif model_class in _VISION_MODEL_CLASSES:
+    elif getattr(model_class, "is_vlm", False):
         extra_kwargs["vision_language_config"] = vision_language_config
     return extra_kwargs
 
diff --git a/vllm/model_executor/models/__init__.py b/vllm/model_executor/models/__init__.py
index c5cdc059..a841b5e8 100755
--- a/vllm/model_executor/models/__init__.py
+++ b/vllm/model_executor/models/__init__.py
@@ -33,6 +33,8 @@ _MODELS = {
     "LlamaForCausalLM": ("llama", "LlamaForCausalLM"),
     "LlavaForConditionalGeneration":
     ("llava", "LlavaForConditionalGeneration"),
+    "LlavaNextForConditionalGeneration":
+    ("llava_next", "LlavaNextForConditionalGeneration"),
     # For decapoda-research/llama-*
     "LLaMAForCausalLM": ("llama", "LlamaForCausalLM"),
     "MistralForCausalLM": ("llama", "LlamaForCausalLM"),
@@ -47,6 +49,7 @@ _MODELS = {
     "OrionForCausalLM": ("orion", "OrionForCausalLM"),
     "PhiForCausalLM": ("phi", "PhiForCausalLM"),
     "Phi3ForCausalLM": ("llama", "LlamaForCausalLM"),
+    "Phi3VForCausalLM": ("phi3_v", "Phi3VForConditionalGeneration"),
     "QWenLMHeadModel": ("qwen", "QWenLMHeadModel"),
     "Qwen2ForCausalLM": ("qwen2", "Qwen2ForCausalLM"),
     "Qwen2MoeForCausalLM": ("qwen2_moe", "Qwen2MoeForCausalLM"),
diff --git a/vllm/model_executor/models/clip_flashattn.py b/vllm/model_executor/models/clip_flashattn.py
new file mode 100644
index 00000000..e43ca18f
--- /dev/null
+++ b/vllm/model_executor/models/clip_flashattn.py
@@ -0,0 +1,1497 @@
+""" PyTorch CLIP model."""
+
+
+from dataclasses import dataclass
+from typing import Any, Dict, Optional, Tuple, Union
+
+import torch
+import torch.nn.functional as F
+import torch.utils.checkpoint
+from torch import nn
+
+# change below import to transformers package
+
+from transformers.activations import ACT2FN
+from transformers.modeling_attn_mask_utils import _create_4d_causal_attention_mask, _prepare_4d_attention_mask
+from transformers.modeling_outputs import BaseModelOutput, BaseModelOutputWithPooling
+from transformers.modeling_utils import PreTrainedModel
+from transformers.utils import (
+    ModelOutput,
+    add_start_docstrings,
+    add_start_docstrings_to_model_forward,
+    is_flash_attn_2_available,
+    logging,
+    replace_return_docstrings,
+)
+from transformers.models.clip.configuration_clip import CLIPConfig, CLIPTextConfig, CLIPVisionConfig
+
+
+if is_flash_attn_2_available():
+    from flash_attn import flash_attn_func, flash_attn_varlen_func
+    from flash_attn.bert_padding import index_first_axis, pad_input, unpad_input  # noqa
+
+
+logger = logging.get_logger(__name__)
+
+_CHECKPOINT_FOR_DOC = "openai/clip-vit-base-patch32"
+
+CLIP_PRETRAINED_MODEL_ARCHIVE_LIST = [
+    "openai/clip-vit-base-patch32",
+    # See all CLIP models at https://huggingface.co/models?filter=clip
+]
+
+
+# contrastive loss function, adapted from
+# https://sachinruk.github.io/blog/2021-03-07-clip.html
+def contrastive_loss(logits: torch.Tensor) -> torch.Tensor:
+    return nn.functional.cross_entropy(logits, torch.arange(len(logits), device=logits.device))
+
+
+def clip_loss(similarity: torch.Tensor) -> torch.Tensor:
+    caption_loss = contrastive_loss(similarity)
+    image_loss = contrastive_loss(similarity.t())
+    return (caption_loss + image_loss) / 2.0
+
+
+# Copied from transformers.models.llama.modeling_llama._get_unpad_data
+def _get_unpad_data(attention_mask):
+    seqlens_in_batch = attention_mask.sum(dim=-1, dtype=torch.int32)
+    indices = torch.nonzero(attention_mask.flatten(), as_tuple=False).flatten()
+    max_seqlen_in_batch = seqlens_in_batch.max().item()
+    cu_seqlens = F.pad(torch.cumsum(seqlens_in_batch, dim=0, dtype=torch.torch.int32), (1, 0))
+    return (
+        indices,
+        cu_seqlens,
+        max_seqlen_in_batch,
+    )
+
+
+@dataclass
+class CLIPVisionModelOutput(ModelOutput):
+    """
+    Base class for vision model's outputs that also contains image embeddings of the pooling of the last hidden states.
+
+    Args:
+        image_embeds (`torch.FloatTensor` of shape `(batch_size, output_dim)` *optional* returned when model is initialized with `with_projection=True`):
+            The image embeddings obtained by applying the projection layer to the pooler_output.
+        last_hidden_state (`torch.FloatTensor` of shape `(batch_size, sequence_length, hidden_size)`):
+            Sequence of hidden-states at the output of the last layer of the model.
+        hidden_states (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`):
+            Tuple of `torch.FloatTensor` (one for the output of the embeddings, if the model has an embedding layer, +
+            one for the output of each layer) of shape `(batch_size, sequence_length, hidden_size)`.
+
+            Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.
+        attentions (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True` is passed or when `config.output_attentions=True`):
+            Tuple of `torch.FloatTensor` (one for each layer) of shape `(batch_size, num_heads, sequence_length,
+            sequence_length)`.
+
+            Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
+            heads.
+    """
+
+    image_embeds: Optional[torch.FloatTensor] = None
+    last_hidden_state: torch.FloatTensor = None
+    hidden_states: Optional[Tuple[torch.FloatTensor]] = None
+    attentions: Optional[Tuple[torch.FloatTensor]] = None
+
+
+@dataclass
+class CLIPTextModelOutput(ModelOutput):
+    """
+    Base class for text model's outputs that also contains a pooling of the last hidden states.
+
+    Args:
+        text_embeds (`torch.FloatTensor` of shape `(batch_size, output_dim)` *optional* returned when model is initialized with `with_projection=True`):
+            The text embeddings obtained by applying the projection layer to the pooler_output.
+        last_hidden_state (`torch.FloatTensor` of shape `(batch_size, sequence_length, hidden_size)`):
+            Sequence of hidden-states at the output of the last layer of the model.
+        hidden_states (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`):
+            Tuple of `torch.FloatTensor` (one for the output of the embeddings, if the model has an embedding layer, +
+            one for the output of each layer) of shape `(batch_size, sequence_length, hidden_size)`.
+
+            Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.
+        attentions (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True` is passed or when `config.output_attentions=True`):
+            Tuple of `torch.FloatTensor` (one for each layer) of shape `(batch_size, num_heads, sequence_length,
+            sequence_length)`.
+
+            Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
+            heads.
+    """
+
+    text_embeds: Optional[torch.FloatTensor] = None
+    last_hidden_state: torch.FloatTensor = None
+    hidden_states: Optional[Tuple[torch.FloatTensor]] = None
+    attentions: Optional[Tuple[torch.FloatTensor]] = None
+
+
+@dataclass
+class CLIPOutput(ModelOutput):
+    """
+    Args:
+        loss (`torch.FloatTensor` of shape `(1,)`, *optional*, returned when `return_loss` is `True`):
+            Contrastive loss for image-text similarity.
+        logits_per_image:(`torch.FloatTensor` of shape `(image_batch_size, text_batch_size)`):
+            The scaled dot product scores between `image_embeds` and `text_embeds`. This represents the image-text
+            similarity scores.
+        logits_per_text:(`torch.FloatTensor` of shape `(text_batch_size, image_batch_size)`):
+            The scaled dot product scores between `text_embeds` and `image_embeds`. This represents the text-image
+            similarity scores.
+        text_embeds(`torch.FloatTensor` of shape `(batch_size, output_dim`):
+            The text embeddings obtained by applying the projection layer to the pooled output of [`CLIPTextModel`].
+        image_embeds(`torch.FloatTensor` of shape `(batch_size, output_dim`):
+            The image embeddings obtained by applying the projection layer to the pooled output of [`CLIPVisionModel`].
+        text_model_output(`BaseModelOutputWithPooling`):
+            The output of the [`CLIPTextModel`].
+        vision_model_output(`BaseModelOutputWithPooling`):
+            The output of the [`CLIPVisionModel`].
+    """
+
+    loss: Optional[torch.FloatTensor] = None
+    logits_per_image: torch.FloatTensor = None
+    logits_per_text: torch.FloatTensor = None
+    text_embeds: torch.FloatTensor = None
+    image_embeds: torch.FloatTensor = None
+    text_model_output: BaseModelOutputWithPooling = None
+    vision_model_output: BaseModelOutputWithPooling = None
+
+    def to_tuple(self) -> Tuple[Any]:
+        return tuple(
+            self[k] if k not in ["text_model_output", "vision_model_output"] else getattr(self, k).to_tuple()
+            for k in self.keys()
+        )
+
+
+class CLIPVisionEmbeddings(nn.Module):
+    def __init__(self, config: CLIPVisionConfig):
+        super().__init__()
+        self.config = config
+        self.embed_dim = config.hidden_size
+        self.image_size = config.image_size
+        self.patch_size = config.patch_size
+
+        self.class_embedding = nn.Parameter(torch.randn(self.embed_dim))
+
+        self.patch_embedding = nn.Conv2d(
+            in_channels=config.num_channels,
+            out_channels=self.embed_dim,
+            kernel_size=self.patch_size,
+            stride=self.patch_size,
+            bias=False,
+        )
+
+        self.num_patches = (self.image_size // self.patch_size) ** 2
+        self.num_positions = self.num_patches + 1
+        self.position_embedding = nn.Embedding(self.num_positions, self.embed_dim)
+        self.register_buffer("position_ids", torch.arange(self.num_positions).expand((1, -1)), persistent=False)
+
+    def forward(self, pixel_values: torch.FloatTensor) -> torch.Tensor:
+        batch_size = pixel_values.shape[0]
+        target_dtype = self.patch_embedding.weight.dtype
+        patch_embeds = self.patch_embedding(pixel_values.to(dtype=target_dtype))  # shape = [*, width, grid, grid]
+        patch_embeds = patch_embeds.flatten(2).transpose(1, 2)
+
+        class_embeds = self.class_embedding.expand(batch_size, 1, -1)
+        embeddings = torch.cat([class_embeds, patch_embeds], dim=1)
+        embeddings = embeddings + self.position_embedding(self.position_ids)
+        return embeddings
+
+
+class CLIPTextEmbeddings(nn.Module):
+    def __init__(self, config: CLIPTextConfig):
+        super().__init__()
+        embed_dim = config.hidden_size
+
+        self.token_embedding = nn.Embedding(config.vocab_size, embed_dim)
+        self.position_embedding = nn.Embedding(config.max_position_embeddings, embed_dim)
+
+        # position_ids (1, len position emb) is contiguous in memory and exported when serialized
+        self.register_buffer(
+            "position_ids", torch.arange(config.max_position_embeddings).expand((1, -1)), persistent=False
+        )
+
+    def forward(
+        self,
+        input_ids: Optional[torch.LongTensor] = None,
+        position_ids: Optional[torch.LongTensor] = None,
+        inputs_embeds: Optional[torch.FloatTensor] = None,
+    ) -> torch.Tensor:
+        seq_length = input_ids.shape[-1] if input_ids is not None else inputs_embeds.shape[-2]
+
+        if position_ids is None:
+            position_ids = self.position_ids[:, :seq_length]
+
+        if inputs_embeds is None:
+            inputs_embeds = self.token_embedding(input_ids)
+
+        position_embeddings = self.position_embedding(position_ids)
+        embeddings = inputs_embeds + position_embeddings
+
+        return embeddings
+
+
+class CLIPAttention(nn.Module):
+    """Multi-headed attention from 'Attention Is All You Need' paper"""
+
+    def __init__(self, config, is_causal: bool = False):
+        super().__init__()
+        self.config = config
+        self.embed_dim = config.hidden_size
+        self.num_heads = config.num_attention_heads
+        self.head_dim = self.embed_dim // self.num_heads
+        if self.head_dim * self.num_heads != self.embed_dim:
+            raise ValueError(
+                f"embed_dim must be divisible by num_heads (got `embed_dim`: {self.embed_dim} and `num_heads`:"
+                f" {self.num_heads})."
+            )
+        self.scale = self.head_dim**-0.5
+        self.dropout = config.attention_dropout
+        self.is_causal = is_causal
+
+        self.k_proj = nn.Linear(self.embed_dim, self.embed_dim)
+        self.v_proj = nn.Linear(self.embed_dim, self.embed_dim)
+        self.q_proj = nn.Linear(self.embed_dim, self.embed_dim)
+        self.out_proj = nn.Linear(self.embed_dim, self.embed_dim)
+
+    def _shape(self, tensor: torch.Tensor, seq_len: int, bsz: int):
+        return tensor.view(bsz, seq_len, self.num_heads, self.head_dim).transpose(1, 2).contiguous()
+
+    def forward(
+        self,
+        hidden_states: torch.Tensor,
+        attention_mask: Optional[torch.Tensor] = None,
+        causal_attention_mask: Optional[torch.Tensor] = None,
+        output_attentions: Optional[bool] = False,
+    ) -> Tuple[torch.Tensor, Optional[torch.Tensor], Optional[Tuple[torch.Tensor]]]:
+        """Input shape: Batch x Time x Channel"""
+        bsz, tgt_len, embed_dim = hidden_states.size()
+
+        # get query proj
+        query_states = self.q_proj(hidden_states) * self.scale
+        key_states = self._shape(self.k_proj(hidden_states), -1, bsz)
+        value_states = self._shape(self.v_proj(hidden_states), -1, bsz)
+
+        proj_shape = (bsz * self.num_heads, -1, self.head_dim)
+        query_states = self._shape(query_states, tgt_len, bsz).view(*proj_shape)
+        key_states = key_states.view(*proj_shape)
+        value_states = value_states.view(*proj_shape)
+
+        src_len = key_states.size(1)
+        attn_weights = torch.bmm(query_states, key_states.transpose(1, 2))
+
+        if attn_weights.size() != (bsz * self.num_heads, tgt_len, src_len):
+            raise ValueError(
+                f"Attention weights should be of size {(bsz * self.num_heads, tgt_len, src_len)}, but is"
+                f" {attn_weights.size()}"
+            )
+
+        # apply the causal_attention_mask first
+        if causal_attention_mask is not None:
+            if causal_attention_mask.size() != (bsz, 1, tgt_len, src_len):
+                raise ValueError(
+                    f"Attention mask should be of size {(bsz, 1, tgt_len, src_len)}, but is"
+                    f" {causal_attention_mask.size()}"
+                )
+            attn_weights = attn_weights.view(bsz, self.num_heads, tgt_len, src_len) + causal_attention_mask
+            attn_weights = attn_weights.view(bsz * self.num_heads, tgt_len, src_len)
+
+        if attention_mask is not None:
+            if attention_mask.size() != (bsz, 1, tgt_len, src_len):
+                raise ValueError(
+                    f"Attention mask should be of size {(bsz, 1, tgt_len, src_len)}, but is {attention_mask.size()}"
+                )
+            attn_weights = attn_weights.view(bsz, self.num_heads, tgt_len, src_len) + attention_mask
+            attn_weights = attn_weights.view(bsz * self.num_heads, tgt_len, src_len)
+
+        attn_weights = nn.functional.softmax(attn_weights, dim=-1)
+
+        if output_attentions:
+            # this operation is a bit akward, but it's required to
+            # make sure that attn_weights keeps its gradient.
+            # In order to do so, attn_weights have to reshaped
+            # twice and have to be reused in the following
+            attn_weights_reshaped = attn_weights.view(bsz, self.num_heads, tgt_len, src_len)
+            attn_weights = attn_weights_reshaped.view(bsz * self.num_heads, tgt_len, src_len)
+        else:
+            attn_weights_reshaped = None
+
+        attn_probs = nn.functional.dropout(attn_weights, p=self.dropout, training=self.training)
+
+        attn_output = torch.bmm(attn_probs, value_states)
+
+        if attn_output.size() != (bsz * self.num_heads, tgt_len, self.head_dim):
+            raise ValueError(
+                f"`attn_output` should be of size {(bsz, self.num_heads, tgt_len, self.head_dim)}, but is"
+                f" {attn_output.size()}"
+            )
+
+        attn_output = attn_output.view(bsz, self.num_heads, tgt_len, self.head_dim)
+        attn_output = attn_output.transpose(1, 2)
+        attn_output = attn_output.reshape(bsz, tgt_len, embed_dim)
+
+        attn_output = self.out_proj(attn_output)
+
+        return attn_output, attn_weights_reshaped
+
+
+class CLIPFlashAttention2(CLIPAttention):
+    """
+    CLIP flash attention module. This module inherits from `CLIPAttention` as the weights of the module stays
+    untouched. The only required change would be on the forward pass where it needs to correctly call the public API of
+    flash attention and deal with padding tokens in case the input contains any of them.
+    """
+
+    def forward(
+        self,
+        hidden_states: torch.Tensor,
+        attention_mask: Optional[torch.Tensor] = None,
+        causal_attention_mask: Optional[torch.Tensor] = None,
+        output_attentions: Optional[bool] = False,
+    ) -> Tuple[torch.Tensor, Optional[torch.Tensor]]:
+        """Input shape: Batch x Time x Channel"""
+        if output_attentions:
+            raise ValueError("CLIPFlashAttention2 does not support output_attentions")
+
+        if self.is_causal and causal_attention_mask is None:
+            raise ValueError("CLIPFlashAttention2 has causal=True but no causal_attention_mask provided")
+
+        bsz, tgt_len, embed_dim = hidden_states.size()
+
+        # [batch_size, tgt_len, embed_dim]
+        query_states = self.q_proj(hidden_states)
+        key_states = self.k_proj(hidden_states)
+        value_states = self.v_proj(hidden_states)
+
+        # [batch_size, tgt_len, embed_dim] -> [batch_size, tgt_len, num_heads, head_dim]
+        query_states = query_states.view(bsz, tgt_len, self.num_heads, self.head_dim).contiguous()
+        key_states = key_states.view(bsz, tgt_len, self.num_heads, self.head_dim).contiguous()
+        value_states = value_states.view(bsz, tgt_len, self.num_heads, self.head_dim).contiguous()
+
+        attn_output = self._flash_attention_forward(
+            query_states=query_states,
+            key_states=key_states,
+            value_states=value_states,
+            attention_mask=attention_mask,
+            query_length=tgt_len,
+            dropout=self.dropout,
+            softmax_scale=self.scale,
+        )
+        # [batch_size, tgt_len, num_heads, head_dim] -> [batch_size, tgt_len, embed_dim]
+        attn_output = attn_output.view(bsz, tgt_len, embed_dim)
+        attn_output = self.out_proj(attn_output)
+
+        return attn_output, None
+
+    # Copied from transformers.models.llama.modeling_llama.LlamaFlashAttention2._flash_attention_forward
+    def _flash_attention_forward(
+        self, query_states, key_states, value_states, attention_mask, query_length, dropout=0.0, softmax_scale=None
+    ) -> torch.Tensor:
+        """
+        Calls the forward method of Flash Attention - if the input hidden states contain at least one padding token
+        first unpad the input, then computes the attention scores and pad the final attention scores.
+
+        Args:
+            query_states (`torch.Tensor`):
+                Input query states to be passed to Flash Attention API
+            key_states (`torch.Tensor`):
+                Input key states to be passed to Flash Attention API
+            value_states (`torch.Tensor`):
+                Input value states to be passed to Flash Attention API
+            attention_mask (`torch.Tensor`):
+                The padding mask - corresponds to a tensor of size `(batch_size, seq_len)` where 0 stands for the
+                position of padding tokens and 1 for the position of non-padding tokens.
+            dropout (`int`, *optional*):
+                Attention dropout
+            softmax_scale (`float`, *optional*):
+                The scaling of QK^T before applying softmax. Default to 1 / sqrt(head_dim)
+        """
+        # Contains at least one padding token in the sequence
+        if attention_mask is not None:
+            batch_size = query_states.shape[0]
+            query_states, key_states, value_states, indices_q, cu_seq_lens, max_seq_lens = self._upad_input(
+                query_states, key_states, value_states, attention_mask, query_length
+            )
+            cu_seqlens_q, cu_seqlens_k = cu_seq_lens
+            max_seqlen_in_batch_q, max_seqlen_in_batch_k = max_seq_lens
+
+            attn_output_unpad = flash_attn_varlen_func(
+                query_states,
+                key_states,
+                value_states,
+                cu_seqlens_q=cu_seqlens_q,
+                cu_seqlens_k=cu_seqlens_k,
+                max_seqlen_q=max_seqlen_in_batch_q,
+                max_seqlen_k=max_seqlen_in_batch_k,
+                dropout_p=dropout,
+                softmax_scale=softmax_scale,
+                causal=self.is_causal,
+            )
+
+            attn_output = pad_input(attn_output_unpad, indices_q, batch_size, query_length)
+        else:
+            attn_output = flash_attn_func(
+                query_states, key_states, value_states, dropout, softmax_scale=softmax_scale, causal=self.is_causal
+            )
+
+        return attn_output
+
+    def _upad_input(self, query_layer, key_layer, value_layer, attention_mask, query_length):
+        indices_k, cu_seqlens_k, max_seqlen_in_batch_k = _get_unpad_data(attention_mask)
+        batch_size, kv_seq_len, num_key_value_heads, head_dim = key_layer.shape
+
+        key_layer = index_first_axis(
+            key_layer.reshape(batch_size * kv_seq_len, num_key_value_heads, head_dim), indices_k
+        )
+        value_layer = index_first_axis(
+            value_layer.reshape(batch_size * kv_seq_len, num_key_value_heads, head_dim), indices_k
+        )
+        if query_length == kv_seq_len:
+            query_layer = index_first_axis(
+                query_layer.reshape(batch_size * kv_seq_len, self.num_heads, head_dim), indices_k
+            )
+            cu_seqlens_q = cu_seqlens_k
+            max_seqlen_in_batch_q = max_seqlen_in_batch_k
+            indices_q = indices_k
+        elif query_length == 1:
+            max_seqlen_in_batch_q = 1
+            # There is a memcpy here, that is very bad.
+            cu_seqlens_q = torch.arange(batch_size + 1, dtype=torch.int32, device=query_layer.device)
+            indices_q = cu_seqlens_q[:-1]
+            query_layer = query_layer.squeeze(1)
+        else:
+            # The :q_len slice assumes right padding.
+            attention_mask = attention_mask[:, :query_length]
+            query_layer, indices_q, cu_seqlens_q, max_seqlen_in_batch_q = unpad_input(query_layer, attention_mask)
+
+        return (
+            query_layer,
+            key_layer,
+            value_layer,
+            indices_q,
+            (cu_seqlens_q, cu_seqlens_k),
+            (max_seqlen_in_batch_q, max_seqlen_in_batch_k),
+        )
+
+
+class CLIPMLP(nn.Module):
+    def __init__(self, config):
+        super().__init__()
+        self.config = config
+        self.activation_fn = ACT2FN[config.hidden_act]
+        self.fc1 = nn.Linear(config.hidden_size, config.intermediate_size)
+        self.fc2 = nn.Linear(config.intermediate_size, config.hidden_size)
+
+    def forward(self, hidden_states: torch.Tensor) -> torch.Tensor:
+        hidden_states = self.fc1(hidden_states)
+        hidden_states = self.activation_fn(hidden_states)
+        hidden_states = self.fc2(hidden_states)
+        return hidden_states
+
+
+CLIP_ATTENTION_CLASSES = {
+    "default": CLIPAttention,
+    "flash_attention_2": CLIPFlashAttention2,
+}
+
+
+class CLIPEncoderLayer(nn.Module):
+    def __init__(self, config: CLIPConfig, is_causal: bool = False):
+        super().__init__()
+        self.embed_dim = config.hidden_size
+        attn_type = "flash_attention_2" if getattr(config, "_flash_attn_2_enabled", False) else "default"
+        logger.info(f"Using {attn_type} attention for CLIPEncoderLayer")
+        self.self_attn = CLIP_ATTENTION_CLASSES[attn_type](config, is_causal=is_causal)
+        self.layer_norm1 = nn.LayerNorm(self.embed_dim, eps=config.layer_norm_eps)
+        self.mlp = CLIPMLP(config)
+        self.layer_norm2 = nn.LayerNorm(self.embed_dim, eps=config.layer_norm_eps)
+
+    def forward(
+        self,
+        hidden_states: torch.Tensor,
+        attention_mask: torch.Tensor,
+        causal_attention_mask: torch.Tensor,
+        output_attentions: Optional[bool] = False,
+    ) -> Tuple[torch.FloatTensor]:
+        """
+        Args:
+            hidden_states (`torch.FloatTensor`): input to the layer of shape `(batch, seq_len, embed_dim)`
+            attention_mask (`torch.FloatTensor`): attention mask of size
+                `(batch, 1, tgt_len, src_len)` where padding elements are indicated by very large negative values.
+                `(config.encoder_attention_heads,)`.
+            output_attentions (`bool`, *optional*):
+                Whether or not to return the attentions tensors of all attention layers. See `attentions` under
+                returned tensors for more detail.
+        """
+        residual = hidden_states
+
+        hidden_states = self.layer_norm1(hidden_states)
+        hidden_states, attn_weights = self.self_attn(
+            hidden_states=hidden_states,
+            attention_mask=attention_mask,
+            causal_attention_mask=causal_attention_mask,
+            output_attentions=output_attentions,
+        )
+        hidden_states = residual + hidden_states
+
+        residual = hidden_states
+        hidden_states = self.layer_norm2(hidden_states)
+        hidden_states = self.mlp(hidden_states)
+        hidden_states = residual + hidden_states
+
+        outputs = (hidden_states,)
+
+        if output_attentions:
+            outputs += (attn_weights,)
+
+        return outputs
+
+
+class CLIPPreTrainedModel(PreTrainedModel):
+    """
+    An abstract class to handle weights initialization and a simple interface for downloading and loading pretrained
+    models.
+    """
+
+    config_class = CLIPConfig
+    base_model_prefix = "clip"
+    supports_gradient_checkpointing = True
+    _supports_flash_attn_2 = True
+
+    def _init_weights(self, module):
+        """Initialize the weights"""
+        factor = self.config.initializer_factor
+        if isinstance(module, CLIPTextEmbeddings):
+            module.token_embedding.weight.data.normal_(mean=0.0, std=factor * 0.02)
+            module.position_embedding.weight.data.normal_(mean=0.0, std=factor * 0.02)
+        elif isinstance(module, CLIPVisionEmbeddings):
+            factor = self.config.initializer_factor
+            nn.init.normal_(module.class_embedding, mean=0.0, std=module.embed_dim**-0.5 * factor)
+            nn.init.normal_(module.patch_embedding.weight, std=module.config.initializer_range * factor)
+            nn.init.normal_(module.position_embedding.weight, std=module.config.initializer_range * factor)
+        elif isinstance(module, CLIPAttention):
+            factor = self.config.initializer_factor
+            in_proj_std = (module.embed_dim**-0.5) * ((2 * module.config.num_hidden_layers) ** -0.5) * factor
+            out_proj_std = (module.embed_dim**-0.5) * factor
+            nn.init.normal_(module.q_proj.weight, std=in_proj_std)
+            nn.init.normal_(module.k_proj.weight, std=in_proj_std)
+            nn.init.normal_(module.v_proj.weight, std=in_proj_std)
+            nn.init.normal_(module.out_proj.weight, std=out_proj_std)
+        elif isinstance(module, CLIPMLP):
+            factor = self.config.initializer_factor
+            in_proj_std = (module.config.hidden_size**-0.5) * ((2 * module.config.num_hidden_layers) ** -0.5) * factor
+            fc_std = (2 * module.config.hidden_size) ** -0.5 * factor
+            nn.init.normal_(module.fc1.weight, std=fc_std)
+            nn.init.normal_(module.fc2.weight, std=in_proj_std)
+        elif isinstance(module, CLIPModel):
+            nn.init.normal_(
+                module.text_projection.weight,
+                std=module.text_embed_dim**-0.5 * self.config.initializer_factor,
+            )
+            nn.init.normal_(
+                module.visual_projection.weight,
+                std=module.vision_embed_dim**-0.5 * self.config.initializer_factor,
+            )
+        elif isinstance(module, CLIPVisionModelWithProjection):
+            nn.init.normal_(
+                module.visual_projection.weight,
+                std=self.config.hidden_size**-0.5 * self.config.initializer_factor,
+            )
+        elif isinstance(module, CLIPTextModelWithProjection):
+            nn.init.normal_(
+                module.text_projection.weight,
+                std=self.config.hidden_size**-0.5 * self.config.initializer_factor,
+            )
+
+        if isinstance(module, nn.LayerNorm):
+            module.bias.data.zero_()
+            module.weight.data.fill_(1.0)
+        if isinstance(module, nn.Linear) and module.bias is not None:
+            module.bias.data.zero_()
+
+
+CLIP_START_DOCSTRING = r"""
+    This model inherits from [`PreTrainedModel`]. Check the superclass documentation for the generic methods the
+    library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
+    etc.)
+
+    This model is also a PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module) subclass.
+    Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
+    and behavior.
+
+    Parameters:
+        config ([`CLIPConfig`]): Model configuration class with all the parameters of the model.
+            Initializing with a config file does not load the weights associated with the model, only the
+            configuration. Check out the [`~PreTrainedModel.from_pretrained`] method to load the model weights.
+"""
+
+CLIP_TEXT_INPUTS_DOCSTRING = r"""
+    Args:
+        input_ids (`torch.LongTensor` of shape `(batch_size, sequence_length)`):
+            Indices of input sequence tokens in the vocabulary. Padding will be ignored by default should you provide
+            it.
+
+            Indices can be obtained using [`AutoTokenizer`]. See [`PreTrainedTokenizer.encode`] and
+            [`PreTrainedTokenizer.__call__`] for details.
+
+            [What are input IDs?](../glossary#input-ids)
+        attention_mask (`torch.Tensor` of shape `(batch_size, sequence_length)`, *optional*):
+            Mask to avoid performing attention on padding token indices. Mask values selected in `[0, 1]`:
+
+            - 1 for tokens that are **not masked**,
+            - 0 for tokens that are **masked**.
+
+            [What are attention masks?](../glossary#attention-mask)
+        position_ids (`torch.LongTensor` of shape `(batch_size, sequence_length)`, *optional*):
+            Indices of positions of each input sequence tokens in the position embeddings. Selected in the range `[0,
+            config.max_position_embeddings - 1]`.
+
+            [What are position IDs?](../glossary#position-ids)
+        output_attentions (`bool`, *optional*):
+            Whether or not to return the attentions tensors of all attention layers. See `attentions` under returned
+            tensors for more detail.
+        output_hidden_states (`bool`, *optional*):
+            Whether or not to return the hidden states of all layers. See `hidden_states` under returned tensors for
+            more detail.
+        return_dict (`bool`, *optional*):
+            Whether or not to return a [`~utils.ModelOutput`] instead of a plain tuple.
+"""
+
+CLIP_VISION_INPUTS_DOCSTRING = r"""
+    Args:
+        pixel_values (`torch.FloatTensor` of shape `(batch_size, num_channels, height, width)`):
+            Pixel values. Padding will be ignored by default should you provide it. Pixel values can be obtained using
+            [`AutoImageProcessor`]. See [`CLIPImageProcessor.__call__`] for details.
+        output_attentions (`bool`, *optional*):
+            Whether or not to return the attentions tensors of all attention layers. See `attentions` under returned
+            tensors for more detail.
+        output_hidden_states (`bool`, *optional*):
+            Whether or not to return the hidden states of all layers. See `hidden_states` under returned tensors for
+            more detail.
+        return_dict (`bool`, *optional*):
+            Whether or not to return a [`~utils.ModelOutput`] instead of a plain tuple.
+"""
+
+CLIP_INPUTS_DOCSTRING = r"""
+    Args:
+        input_ids (`torch.LongTensor` of shape `(batch_size, sequence_length)`):
+            Indices of input sequence tokens in the vocabulary. Padding will be ignored by default should you provide
+            it.
+
+            Indices can be obtained using [`AutoTokenizer`]. See [`PreTrainedTokenizer.encode`] and
+            [`PreTrainedTokenizer.__call__`] for details.
+
+            [What are input IDs?](../glossary#input-ids)
+        attention_mask (`torch.Tensor` of shape `(batch_size, sequence_length)`, *optional*):
+            Mask to avoid performing attention on padding token indices. Mask values selected in `[0, 1]`:
+
+            - 1 for tokens that are **not masked**,
+            - 0 for tokens that are **masked**.
+
+            [What are attention masks?](../glossary#attention-mask)
+        position_ids (`torch.LongTensor` of shape `(batch_size, sequence_length)`, *optional*):
+            Indices of positions of each input sequence tokens in the position embeddings. Selected in the range `[0,
+            config.max_position_embeddings - 1]`.
+
+            [What are position IDs?](../glossary#position-ids)
+        pixel_values (`torch.FloatTensor` of shape `(batch_size, num_channels, height, width)`):
+            Pixel values. Padding will be ignored by default should you provide it. Pixel values can be obtained using
+            [`AutoImageProcessor`]. See [`CLIPImageProcessor.__call__`] for details.
+        return_loss (`bool`, *optional*):
+            Whether or not to return the contrastive loss.
+        output_attentions (`bool`, *optional*):
+            Whether or not to return the attentions tensors of all attention layers. See `attentions` under returned
+            tensors for more detail.
+        output_hidden_states (`bool`, *optional*):
+            Whether or not to return the hidden states of all layers. See `hidden_states` under returned tensors for
+            more detail.
+        return_dict (`bool`, *optional*):
+            Whether or not to return a [`~utils.ModelOutput`] instead of a plain tuple.
+"""
+
+
+class CLIPEncoder(nn.Module):
+    """
+    Transformer encoder consisting of `config.num_hidden_layers` self attention layers. Each layer is a
+    [`CLIPEncoderLayer`].
+
+    Args:
+        config: CLIPConfig
+    """
+
+    def __init__(self, config: CLIPConfig, is_causal: bool = False):
+        super().__init__()
+        self.config = config
+        self.layers = nn.ModuleList(
+            [CLIPEncoderLayer(config, is_causal=is_causal) for _ in range(config.num_hidden_layers)]
+        )
+        self.gradient_checkpointing = False
+
+    def forward(
+        self,
+        inputs_embeds,
+        attention_mask: Optional[torch.Tensor] = None,
+        causal_attention_mask: Optional[torch.Tensor] = None,
+        output_attentions: Optional[bool] = None,
+        output_hidden_states: Optional[bool] = None,
+        return_dict: Optional[bool] = None,
+    ) -> Union[Tuple, BaseModelOutput]:
+        r"""
+        Args:
+            inputs_embeds (`torch.FloatTensor` of shape `(batch_size, sequence_length, hidden_size)`):
+                Optionally, instead of passing `input_ids` you can choose to directly pass an embedded representation.
+                This is useful if you want more control over how to convert `input_ids` indices into associated vectors
+                than the model's internal embedding lookup matrix.
+            attention_mask (`torch.Tensor` of shape `(batch_size, sequence_length)`, *optional*):
+                Mask to avoid performing attention on padding token indices. Mask values selected in `[0, 1]`:
+
+                - 1 for tokens that are **not masked**,
+                - 0 for tokens that are **masked**.
+
+                [What are attention masks?](../glossary#attention-mask)
+            causal_attention_mask (`torch.Tensor` of shape `(batch_size, sequence_length)`, *optional*):
+                Causal mask for the text model. Mask values selected in `[0, 1]`:
+
+                - 1 for tokens that are **not masked**,
+                - 0 for tokens that are **masked**.
+
+                [What are attention masks?](../glossary#attention-mask)
+            output_attentions (`bool`, *optional*):
+                Whether or not to return the attentions tensors of all attention layers. See `attentions` under
+                returned tensors for more detail.
+            output_hidden_states (`bool`, *optional*):
+                Whether or not to return the hidden states of all layers. See `hidden_states` under returned tensors
+                for more detail.
+            return_dict (`bool`, *optional*):
+                Whether or not to return a [`~utils.ModelOutput`] instead of a plain tuple.
+        """
+        output_attentions = output_attentions if output_attentions is not None else self.config.output_attentions
+        output_hidden_states = (
+            output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states
+        )
+        return_dict = return_dict if return_dict is not None else self.config.use_return_dict
+
+        encoder_states = () if output_hidden_states else None
+        all_attentions = () if output_attentions else None
+
+        hidden_states = inputs_embeds
+        for idx, encoder_layer in enumerate(self.layers):
+            if output_hidden_states:
+                encoder_states = encoder_states + (hidden_states,)
+            if self.gradient_checkpointing and self.training:
+                layer_outputs = self._gradient_checkpointing_func(
+                    encoder_layer.__call__,
+                    hidden_states,
+                    attention_mask,
+                    causal_attention_mask,
+                    output_attentions,
+                )
+            else:
+                layer_outputs = encoder_layer(
+                    hidden_states,
+                    attention_mask,
+                    causal_attention_mask,
+                    output_attentions=output_attentions,
+                )
+
+            hidden_states = layer_outputs[0]
+
+            if output_attentions:
+                all_attentions = all_attentions + (layer_outputs[1],)
+
+        if output_hidden_states:
+            encoder_states = encoder_states + (hidden_states,)
+
+        if not return_dict:
+            return tuple(v for v in [hidden_states, encoder_states, all_attentions] if v is not None)
+        return BaseModelOutput(
+            last_hidden_state=hidden_states, hidden_states=encoder_states, attentions=all_attentions
+        )
+
+
+class CLIPTextTransformer(nn.Module):
+    def __init__(self, config: CLIPTextConfig):
+        super().__init__()
+        self.config = config
+        embed_dim = config.hidden_size
+        self.embeddings = CLIPTextEmbeddings(config)
+        self.encoder = CLIPEncoder(config, is_causal=True)
+        self.final_layer_norm = nn.LayerNorm(embed_dim, eps=config.layer_norm_eps)
+
+        # For `pooled_output` computation
+        self.eos_token_id = config.eos_token_id
+
+    @add_start_docstrings_to_model_forward(CLIP_TEXT_INPUTS_DOCSTRING)
+    @replace_return_docstrings(output_type=BaseModelOutputWithPooling, config_class=CLIPTextConfig)
+    def forward(
+        self,
+        input_ids: Optional[torch.Tensor] = None,
+        attention_mask: Optional[torch.Tensor] = None,
+        position_ids: Optional[torch.Tensor] = None,
+        output_attentions: Optional[bool] = None,
+        output_hidden_states: Optional[bool] = None,
+        return_dict: Optional[bool] = None,
+    ) -> Union[Tuple, BaseModelOutputWithPooling]:
+        r"""
+        Returns:
+
+        """
+        output_attentions = output_attentions if output_attentions is not None else self.config.output_attentions
+        output_hidden_states = (
+            output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states
+        )
+        return_dict = return_dict if return_dict is not None else self.config.use_return_dict
+
+        if input_ids is None:
+            raise ValueError("You have to specify input_ids")
+
+        input_shape = input_ids.size()
+        input_ids = input_ids.view(-1, input_shape[-1])
+
+        hidden_states = self.embeddings(input_ids=input_ids, position_ids=position_ids)
+
+        # CLIP's text model uses causal mask, prepare it here.
+        # https://github.com/openai/CLIP/blob/cfcffb90e69f37bf2ff1e988237a0fbe41f33c04/clip/model.py#L324
+        causal_attention_mask = _create_4d_causal_attention_mask(
+            input_shape, hidden_states.dtype, device=hidden_states.device
+        )
+        # expand attention_mask
+        if attention_mask is not None:
+            if getattr(self.config, "_flash_attn_2_enabled", False):
+                attention_mask = attention_mask if 0 in attention_mask else None
+            else:
+                # [bsz, seq_len] -> [bsz, 1, tgt_seq_len, src_seq_len]
+                attention_mask = _prepare_4d_attention_mask(attention_mask, hidden_states.dtype)
+
+        encoder_outputs = self.encoder(
+            inputs_embeds=hidden_states,
+            attention_mask=attention_mask,
+            causal_attention_mask=causal_attention_mask,
+            output_attentions=output_attentions,
+            output_hidden_states=output_hidden_states,
+            return_dict=return_dict,
+        )
+
+        last_hidden_state = encoder_outputs[0]
+        last_hidden_state = self.final_layer_norm(last_hidden_state)
+
+        if self.eos_token_id == 2:
+            # The `eos_token_id` was incorrect before PR #24773: Let's keep what have been done here.
+            # A CLIP model with such `eos_token_id` in the config can't work correctly with extra new tokens added
+            # ------------------------------------------------------------
+            # text_embeds.shape = [batch_size, sequence_length, transformer.width]
+            # take features from the eot embedding (eot_token is the highest number in each sequence)
+            # casting to torch.int for onnx compatibility: argmax doesn't support int64 inputs with opset 14
+            pooled_output = last_hidden_state[
+                torch.arange(last_hidden_state.shape[0], device=last_hidden_state.device),
+                input_ids.to(dtype=torch.int, device=last_hidden_state.device).argmax(dim=-1),
+            ]
+        else:
+            # The config gets updated `eos_token_id` from PR #24773 (so the use of exta new tokens is possible)
+            pooled_output = last_hidden_state[
+                torch.arange(last_hidden_state.shape[0], device=last_hidden_state.device),
+                # We need to get the first position of `eos_token_id` value (`pad_token_ids` might equal to `eos_token_id`)
+                (input_ids.to(dtype=torch.int, device=last_hidden_state.device) == self.eos_token_id)
+                .int()
+                .argmax(dim=-1),
+            ]
+
+        if not return_dict:
+            return (last_hidden_state, pooled_output) + encoder_outputs[1:]
+
+        return BaseModelOutputWithPooling(
+            last_hidden_state=last_hidden_state,
+            pooler_output=pooled_output,
+            hidden_states=encoder_outputs.hidden_states,
+            attentions=encoder_outputs.attentions,
+        )
+
+
+@add_start_docstrings(
+    """The text model from CLIP without any head or projection on top.""",
+    CLIP_START_DOCSTRING,
+)
+class CLIPTextModel(CLIPPreTrainedModel):
+    config_class = CLIPTextConfig
+
+    _no_split_modules = ["CLIPTextEmbeddings", "CLIPEncoderLayer"]
+
+    def __init__(self, config: CLIPTextConfig):
+        super().__init__(config)
+        self.text_model = CLIPTextTransformer(config)
+        # Initialize weights and apply final processing
+        self.post_init()
+
+    def get_input_embeddings(self) -> nn.Module:
+        return self.text_model.embeddings.token_embedding
+
+    def set_input_embeddings(self, value):
+        self.text_model.embeddings.token_embedding = value
+
+    @add_start_docstrings_to_model_forward(CLIP_TEXT_INPUTS_DOCSTRING)
+    @replace_return_docstrings(output_type=BaseModelOutputWithPooling, config_class=CLIPTextConfig)
+    def forward(
+        self,
+        input_ids: Optional[torch.Tensor] = None,
+        attention_mask: Optional[torch.Tensor] = None,
+        position_ids: Optional[torch.Tensor] = None,
+        output_attentions: Optional[bool] = None,
+        output_hidden_states: Optional[bool] = None,
+        return_dict: Optional[bool] = None,
+    ) -> Union[Tuple, BaseModelOutputWithPooling]:
+        r"""
+        Returns:
+
+        Examples:
+
+        ```python
+        >>> from transformers import AutoTokenizer, CLIPTextModel
+
+        >>> model = CLIPTextModel.from_pretrained("openai/clip-vit-base-patch32")
+        >>> tokenizer = AutoTokenizer.from_pretrained("openai/clip-vit-base-patch32")
+
+        >>> inputs = tokenizer(["a photo of a cat", "a photo of a dog"], padding=True, return_tensors="pt")
+
+        >>> outputs = model(**inputs)
+        >>> last_hidden_state = outputs.last_hidden_state
+        >>> pooled_output = outputs.pooler_output  # pooled (EOS token) states
+        ```"""
+        return_dict = return_dict if return_dict is not None else self.config.use_return_dict
+
+        return self.text_model(
+            input_ids=input_ids,
+            attention_mask=attention_mask,
+            position_ids=position_ids,
+            output_attentions=output_attentions,
+            output_hidden_states=output_hidden_states,
+            return_dict=return_dict,
+        )
+
+
+class CLIPVisionTransformer(nn.Module):
+    def __init__(self, config: CLIPVisionConfig):
+        super().__init__()
+        self.config = config
+        embed_dim = config.hidden_size
+
+        self.embeddings = CLIPVisionEmbeddings(config)
+        self.pre_layrnorm = nn.LayerNorm(embed_dim, eps=config.layer_norm_eps)
+        self.encoder = CLIPEncoder(config, is_causal=False)
+        self.post_layernorm = nn.LayerNorm(embed_dim, eps=config.layer_norm_eps)
+
+    @add_start_docstrings_to_model_forward(CLIP_VISION_INPUTS_DOCSTRING)
+    @replace_return_docstrings(output_type=BaseModelOutputWithPooling, config_class=CLIPVisionConfig)
+    def forward(
+        self,
+        pixel_values: Optional[torch.FloatTensor] = None,
+        output_attentions: Optional[bool] = None,
+        output_hidden_states: Optional[bool] = None,
+        return_dict: Optional[bool] = None,
+    ) -> Union[Tuple, BaseModelOutputWithPooling]:
+        r"""
+        Returns:
+
+        """
+        output_attentions = output_attentions if output_attentions is not None else self.config.output_attentions
+        output_hidden_states = (
+            output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states
+        )
+        return_dict = return_dict if return_dict is not None else self.config.use_return_dict
+
+        if pixel_values is None:
+            raise ValueError("You have to specify pixel_values")
+
+        hidden_states = self.embeddings(pixel_values)
+        hidden_states = self.pre_layrnorm(hidden_states)
+
+        encoder_outputs = self.encoder(
+            inputs_embeds=hidden_states,
+            output_attentions=output_attentions,
+            output_hidden_states=output_hidden_states,
+            return_dict=return_dict,
+        )
+
+        last_hidden_state = encoder_outputs[0]
+        pooled_output = last_hidden_state[:, 0, :]
+        pooled_output = self.post_layernorm(pooled_output)
+
+        if not return_dict:
+            return (last_hidden_state, pooled_output) + encoder_outputs[1:]
+
+        return BaseModelOutputWithPooling(
+            last_hidden_state=last_hidden_state,
+            pooler_output=pooled_output,
+            hidden_states=encoder_outputs.hidden_states,
+            attentions=encoder_outputs.attentions,
+        )
+
+
+@add_start_docstrings(
+    """The vision model from CLIP without any head or projection on top.""",
+    CLIP_START_DOCSTRING,
+)
+class CLIPVisionModel(CLIPPreTrainedModel):
+    config_class = CLIPVisionConfig
+    main_input_name = "pixel_values"
+
+    def __init__(self, config: CLIPVisionConfig, **kwargs):
+        super().__init__(config)
+        if '_flash_attn_2_enabled' in kwargs:
+            config._flash_attn_2_enabled = kwargs['_flash_attn_2_enabled']
+        self.vision_model = CLIPVisionTransformer(config)
+        # Initialize weights and apply final processing
+        self.post_init()
+
+    def get_input_embeddings(self) -> nn.Module:
+        return self.vision_model.embeddings.patch_embedding
+
+    @add_start_docstrings_to_model_forward(CLIP_VISION_INPUTS_DOCSTRING)
+    @replace_return_docstrings(output_type=BaseModelOutputWithPooling, config_class=CLIPVisionConfig)
+    def forward(
+        self,
+        pixel_values: Optional[torch.FloatTensor] = None,
+        output_attentions: Optional[bool] = None,
+        output_hidden_states: Optional[bool] = None,
+        return_dict: Optional[bool] = None,
+    ) -> Union[Tuple, BaseModelOutputWithPooling]:
+        r"""
+        Returns:
+
+        Examples:
+
+        ```python
+        >>> from PIL import Image
+        >>> import requests
+        >>> from transformers import AutoProcessor, CLIPVisionModel
+
+        >>> model = CLIPVisionModel.from_pretrained("openai/clip-vit-base-patch32")
+        >>> processor = AutoProcessor.from_pretrained("openai/clip-vit-base-patch32")
+
+        >>> url = "http://images.cocodataset.org/val2017/000000039769.jpg"
+        >>> image = Image.open(requests.get(url, stream=True).raw)
+
+        >>> inputs = processor(images=image, return_tensors="pt")
+
+        >>> outputs = model(**inputs)
+        >>> last_hidden_state = outputs.last_hidden_state
+        >>> pooled_output = outputs.pooler_output  # pooled CLS states
+        ```"""
+        return_dict = return_dict if return_dict is not None else self.config.use_return_dict
+
+        return self.vision_model(
+            pixel_values=pixel_values,
+            output_attentions=output_attentions,
+            output_hidden_states=output_hidden_states,
+            return_dict=return_dict,
+        )
+
+
+@add_start_docstrings(CLIP_START_DOCSTRING)
+class CLIPModel(CLIPPreTrainedModel):
+    config_class = CLIPConfig
+    _supports_flash_attn_2 = True
+
+    def __init__(self, config: CLIPConfig):
+        super().__init__(config)
+
+        if not isinstance(config.text_config, CLIPTextConfig):
+            raise ValueError(
+                "config.text_config is expected to be of type CLIPTextConfig but is of type"
+                f" {type(config.text_config)}."
+            )
+
+        if not isinstance(config.vision_config, CLIPVisionConfig):
+            raise ValueError(
+                "config.vision_config is expected to be of type CLIPVisionConfig but is of type"
+                f" {type(config.vision_config)}."
+            )
+
+        text_config = config.text_config
+        vision_config = config.vision_config
+
+        self.projection_dim = config.projection_dim
+        self.text_embed_dim = text_config.hidden_size
+        self.vision_embed_dim = vision_config.hidden_size
+
+        self.text_model = CLIPTextTransformer(text_config)
+        self.vision_model = CLIPVisionTransformer(vision_config)
+
+        self.visual_projection = nn.Linear(self.vision_embed_dim, self.projection_dim, bias=False)
+        self.text_projection = nn.Linear(self.text_embed_dim, self.projection_dim, bias=False)
+        self.logit_scale = nn.Parameter(torch.tensor(self.config.logit_scale_init_value))
+
+        # Initialize weights and apply final processing
+        self.post_init()
+
+    @add_start_docstrings_to_model_forward(CLIP_TEXT_INPUTS_DOCSTRING)
+    def get_text_features(
+        self,
+        input_ids: Optional[torch.Tensor] = None,
+        attention_mask: Optional[torch.Tensor] = None,
+        position_ids: Optional[torch.Tensor] = None,
+        output_attentions: Optional[bool] = None,
+        output_hidden_states: Optional[bool] = None,
+        return_dict: Optional[bool] = None,
+    ) -> torch.FloatTensor:
+        r"""
+        Returns:
+            text_features (`torch.FloatTensor` of shape `(batch_size, output_dim`): The text embeddings obtained by
+            applying the projection layer to the pooled output of [`CLIPTextModel`].
+
+        Examples:
+
+        ```python
+        >>> from transformers import AutoTokenizer, CLIPModel
+
+        >>> model = CLIPModel.from_pretrained("openai/clip-vit-base-patch32")
+        >>> tokenizer = AutoTokenizer.from_pretrained("openai/clip-vit-base-patch32")
+
+        >>> inputs = tokenizer(["a photo of a cat", "a photo of a dog"], padding=True, return_tensors="pt")
+        >>> text_features = model.get_text_features(**inputs)
+        ```"""
+        # Use CLIP model's config for some fields (if specified) instead of those of vision & text components.
+        output_attentions = output_attentions if output_attentions is not None else self.config.output_attentions
+        output_hidden_states = (
+            output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states
+        )
+        return_dict = return_dict if return_dict is not None else self.config.use_return_dict
+
+        text_outputs = self.text_model(
+            input_ids=input_ids,
+            attention_mask=attention_mask,
+            position_ids=position_ids,
+            output_attentions=output_attentions,
+            output_hidden_states=output_hidden_states,
+            return_dict=return_dict,
+        )
+
+        pooled_output = text_outputs[1]
+        text_features = self.text_projection(pooled_output)
+
+        return text_features
+
+    @add_start_docstrings_to_model_forward(CLIP_VISION_INPUTS_DOCSTRING)
+    def get_image_features(
+        self,
+        pixel_values: Optional[torch.FloatTensor] = None,
+        output_attentions: Optional[bool] = None,
+        output_hidden_states: Optional[bool] = None,
+        return_dict: Optional[bool] = None,
+    ) -> torch.FloatTensor:
+        r"""
+        Returns:
+            image_features (`torch.FloatTensor` of shape `(batch_size, output_dim`): The image embeddings obtained by
+            applying the projection layer to the pooled output of [`CLIPVisionModel`].
+
+        Examples:
+
+        ```python
+        >>> from PIL import Image
+        >>> import requests
+        >>> from transformers import AutoProcessor, CLIPModel
+
+        >>> model = CLIPModel.from_pretrained("openai/clip-vit-base-patch32")
+        >>> processor = AutoProcessor.from_pretrained("openai/clip-vit-base-patch32")
+
+        >>> url = "http://images.cocodataset.org/val2017/000000039769.jpg"
+        >>> image = Image.open(requests.get(url, stream=True).raw)
+
+        >>> inputs = processor(images=image, return_tensors="pt")
+
+        >>> image_features = model.get_image_features(**inputs)
+        ```"""
+        # Use CLIP model's config for some fields (if specified) instead of those of vision & text components.
+        output_attentions = output_attentions if output_attentions is not None else self.config.output_attentions
+        output_hidden_states = (
+            output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states
+        )
+        return_dict = return_dict if return_dict is not None else self.config.use_return_dict
+
+        vision_outputs = self.vision_model(
+            pixel_values=pixel_values,
+            output_attentions=output_attentions,
+            output_hidden_states=output_hidden_states,
+            return_dict=return_dict,
+        )
+
+        pooled_output = vision_outputs[1]  # pooled_output
+        image_features = self.visual_projection(pooled_output)
+
+        return image_features
+
+    @add_start_docstrings_to_model_forward(CLIP_INPUTS_DOCSTRING)
+    @replace_return_docstrings(output_type=CLIPOutput, config_class=CLIPConfig)
+    def forward(
+        self,
+        input_ids: Optional[torch.LongTensor] = None,
+        pixel_values: Optional[torch.FloatTensor] = None,
+        attention_mask: Optional[torch.Tensor] = None,
+        position_ids: Optional[torch.LongTensor] = None,
+        return_loss: Optional[bool] = None,
+        output_attentions: Optional[bool] = None,
+        output_hidden_states: Optional[bool] = None,
+        return_dict: Optional[bool] = None,
+    ) -> Union[Tuple, CLIPOutput]:
+        r"""
+        Returns:
+
+        Examples:
+
+        ```python
+        >>> from PIL import Image
+        >>> import requests
+        >>> from transformers import AutoProcessor, CLIPModel
+
+        >>> model = CLIPModel.from_pretrained("openai/clip-vit-base-patch32")
+        >>> processor = AutoProcessor.from_pretrained("openai/clip-vit-base-patch32")
+
+        >>> url = "http://images.cocodataset.org/val2017/000000039769.jpg"
+        >>> image = Image.open(requests.get(url, stream=True).raw)
+
+        >>> inputs = processor(
+        ...     text=["a photo of a cat", "a photo of a dog"], images=image, return_tensors="pt", padding=True
+        ... )
+
+        >>> outputs = model(**inputs)
+        >>> logits_per_image = outputs.logits_per_image  # this is the image-text similarity score
+        >>> probs = logits_per_image.softmax(dim=1)  # we can take the softmax to get the label probabilities
+        ```"""
+        # Use CLIP model's config for some fields (if specified) instead of those of vision & text components.
+        output_attentions = output_attentions if output_attentions is not None else self.config.output_attentions
+        output_hidden_states = (
+            output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states
+        )
+        return_dict = return_dict if return_dict is not None else self.config.use_return_dict
+
+        vision_outputs = self.vision_model(
+            pixel_values=pixel_values,
+            output_attentions=output_attentions,
+            output_hidden_states=output_hidden_states,
+            return_dict=return_dict,
+        )
+
+        text_outputs = self.text_model(
+            input_ids=input_ids,
+            attention_mask=attention_mask,
+            position_ids=position_ids,
+            output_attentions=output_attentions,
+            output_hidden_states=output_hidden_states,
+            return_dict=return_dict,
+        )
+
+        image_embeds = vision_outputs[1]
+        image_embeds = self.visual_projection(image_embeds)
+
+        text_embeds = text_outputs[1]
+        text_embeds = self.text_projection(text_embeds)
+
+        # normalized features
+        image_embeds = image_embeds / image_embeds.norm(p=2, dim=-1, keepdim=True)
+        text_embeds = text_embeds / text_embeds.norm(p=2, dim=-1, keepdim=True)
+
+        # cosine similarity as logits
+        logit_scale = self.logit_scale.exp()
+        logits_per_text = torch.matmul(text_embeds, image_embeds.t()) * logit_scale
+        logits_per_image = logits_per_text.t()
+
+        loss = None
+        if return_loss:
+            loss = clip_loss(logits_per_text)
+
+        if not return_dict:
+            output = (logits_per_image, logits_per_text, text_embeds, image_embeds, text_outputs, vision_outputs)
+            return ((loss,) + output) if loss is not None else output
+
+        return CLIPOutput(
+            loss=loss,
+            logits_per_image=logits_per_image,
+            logits_per_text=logits_per_text,
+            text_embeds=text_embeds,
+            image_embeds=image_embeds,
+            text_model_output=text_outputs,
+            vision_model_output=vision_outputs,
+        )
+
+    @classmethod
+    def _check_and_enable_flash_attn_2(
+        cls, config, torch_dtype: Optional[torch.dtype] = None, device_map: Optional[Union[str, Dict[str, int]]] = None
+    ):
+        """
+        `_check_and_enable_flash_attn_2` originally don't expand flash attention enabling to the model
+        sub-configurations. We override the original method to make sure that Bark sub-models are using Flash Attention
+        if necessary.
+
+        If you don't know about Flash Attention, check out the official repository of flash attention:
+        https://github.com/Dao-AILab/flash-attention
+
+        For using Flash Attention 1.0 you can do it directly via the `BetterTransformer` API, have a look at this
+        specific section of the documentation to learn more about it:
+        https://huggingface.co/docs/transformers/main/en/perf_infer_gpu_one#decoder-models
+
+        The method checks if the current setup is compatible with Flash Attention as it requires the model to be in
+        half precision and not ran on CPU.
+
+        If all checks pass, the method will create an attribute in the config `_flash_attn_2_enabled` so that the model
+        can initialize the correct attention module
+        """
+        config = super()._check_and_enable_flash_attn_2(config, torch_dtype, device_map)
+        config.text_config._flash_attn_2_enabled = getattr(config, "_flash_attn_2_enabled", False)
+        config.vision_config._flash_attn_2_enabled = getattr(config, "_flash_attn_2_enabled", False)
+        return config
+
+
+@add_start_docstrings(
+    """
+    CLIP Text Model with a projection layer on top (a linear layer on top of the pooled output).
+    """,
+    CLIP_START_DOCSTRING,
+)
+class CLIPTextModelWithProjection(CLIPPreTrainedModel):
+    config_class = CLIPTextConfig
+
+    _no_split_modules = ["CLIPTextEmbeddings", "CLIPEncoderLayer"]
+
+    def __init__(self, config: CLIPTextConfig):
+        super().__init__(config)
+
+        self.text_model = CLIPTextTransformer(config)
+
+        self.text_projection = nn.Linear(config.hidden_size, config.projection_dim, bias=False)
+
+        # Initialize weights and apply final processing
+        self.post_init()
+
+    def get_input_embeddings(self) -> nn.Module:
+        return self.text_model.embeddings.token_embedding
+
+    def set_input_embeddings(self, value):
+        self.text_model.embeddings.token_embedding = value
+
+    @add_start_docstrings_to_model_forward(CLIP_TEXT_INPUTS_DOCSTRING)
+    @replace_return_docstrings(output_type=CLIPTextModelOutput, config_class=CLIPTextConfig)
+    def forward(
+        self,
+        input_ids: Optional[torch.Tensor] = None,
+        attention_mask: Optional[torch.Tensor] = None,
+        position_ids: Optional[torch.Tensor] = None,
+        output_attentions: Optional[bool] = None,
+        output_hidden_states: Optional[bool] = None,
+        return_dict: Optional[bool] = None,
+    ) -> Union[Tuple, CLIPTextModelOutput]:
+        r"""
+        Returns:
+
+        Examples:
+
+        ```python
+        >>> from transformers import AutoTokenizer, CLIPTextModelWithProjection
+
+        >>> model = CLIPTextModelWithProjection.from_pretrained("openai/clip-vit-base-patch32")
+        >>> tokenizer = AutoTokenizer.from_pretrained("openai/clip-vit-base-patch32")
+
+        >>> inputs = tokenizer(["a photo of a cat", "a photo of a dog"], padding=True, return_tensors="pt")
+
+        >>> outputs = model(**inputs)
+        >>> text_embeds = outputs.text_embeds
+        ```"""
+        return_dict = return_dict if return_dict is not None else self.config.use_return_dict
+
+        text_outputs = self.text_model(
+            input_ids=input_ids,
+            attention_mask=attention_mask,
+            position_ids=position_ids,
+            output_attentions=output_attentions,
+            output_hidden_states=output_hidden_states,
+            return_dict=return_dict,
+        )
+
+        pooled_output = text_outputs[1]
+
+        text_embeds = self.text_projection(pooled_output)
+
+        if not return_dict:
+            outputs = (text_embeds, text_outputs[0]) + text_outputs[2:]
+            return tuple(output for output in outputs if output is not None)
+
+        return CLIPTextModelOutput(
+            text_embeds=text_embeds,
+            last_hidden_state=text_outputs.last_hidden_state,
+            hidden_states=text_outputs.hidden_states,
+            attentions=text_outputs.attentions,
+        )
+
+
+@add_start_docstrings(
+    """
+    CLIP Vision Model with a projection layer on top (a linear layer on top of the pooled output).
+    """,
+    CLIP_START_DOCSTRING,
+)
+class CLIPVisionModelWithProjection(CLIPPreTrainedModel):
+    config_class = CLIPVisionConfig
+    main_input_name = "pixel_values"
+
+    def __init__(self, config: CLIPVisionConfig):
+        super().__init__(config)
+
+        self.vision_model = CLIPVisionTransformer(config)
+
+        self.visual_projection = nn.Linear(config.hidden_size, config.projection_dim, bias=False)
+
+        # Initialize weights and apply final processing
+        self.post_init()
+
+    def get_input_embeddings(self) -> nn.Module:
+        return self.vision_model.embeddings.patch_embedding
+
+    @add_start_docstrings_to_model_forward(CLIP_VISION_INPUTS_DOCSTRING)
+    @replace_return_docstrings(output_type=CLIPVisionModelOutput, config_class=CLIPVisionConfig)
+    def forward(
+        self,
+        pixel_values: Optional[torch.FloatTensor] = None,
+        output_attentions: Optional[bool] = None,
+        output_hidden_states: Optional[bool] = None,
+        return_dict: Optional[bool] = None,
+    ) -> Union[Tuple, CLIPVisionModelOutput]:
+        r"""
+        Returns:
+
+        Examples:
+
+        ```python
+        >>> from PIL import Image
+        >>> import requests
+        >>> from transformers import AutoProcessor, CLIPVisionModelWithProjection
+
+        >>> model = CLIPVisionModelWithProjection.from_pretrained("openai/clip-vit-base-patch32")
+        >>> processor = AutoProcessor.from_pretrained("openai/clip-vit-base-patch32")
+
+        >>> url = "http://images.cocodataset.org/val2017/000000039769.jpg"
+        >>> image = Image.open(requests.get(url, stream=True).raw)
+
+        >>> inputs = processor(images=image, return_tensors="pt")
+
+        >>> outputs = model(**inputs)
+        >>> image_embeds = outputs.image_embeds
+        ```"""
+        return_dict = return_dict if return_dict is not None else self.config.use_return_dict
+
+        vision_outputs = self.vision_model(
+            pixel_values=pixel_values,
+            output_attentions=output_attentions,
+            output_hidden_states=output_hidden_states,
+            return_dict=return_dict,
+        )
+
+        pooled_output = vision_outputs[1]  # pooled_output
+
+        image_embeds = self.visual_projection(pooled_output)
+
+        if not return_dict:
+            outputs = (image_embeds, vision_outputs[0]) + vision_outputs[2:]
+            return tuple(output for output in outputs if output is not None)
+
+        return CLIPVisionModelOutput(
+            image_embeds=image_embeds,
+            last_hidden_state=vision_outputs.last_hidden_state,
+            hidden_states=vision_outputs.hidden_states,
+            attentions=vision_outputs.attentions,
+        )
\ No newline at end of file
diff --git a/vllm/model_executor/models/llava.py b/vllm/model_executor/models/llava.py
index dcde4dfa..0fc13a4f 100644
--- a/vllm/model_executor/models/llava.py
+++ b/vllm/model_executor/models/llava.py
@@ -1,4 +1,5 @@
-from typing import Iterable, List, Optional, Tuple
+from typing import (ClassVar, Iterable, List, Literal, Optional, Tuple,
+                    TypedDict, Union)
 
 import torch
 from torch import nn
@@ -9,9 +10,9 @@ from transformers import CLIPVisionModel, LlavaConfig
 from vllm.attention import AttentionMetadata
 from vllm.config import VisionLanguageConfig
 from vllm.model_executor.layers.activation import get_act_fn
-from vllm.model_executor.layers.logits_processor import LogitsProcessor
 from vllm.model_executor.layers.quantization.base_config import (
     QuantizationConfig)
+from vllm.model_executor.layers.logits_processor import LogitsProcessor
 from vllm.model_executor.layers.sampler import Sampler
 from vllm.model_executor.layers.vocab_parallel_embedding import ParallelLMHead
 from vllm.model_executor.model_loader.weight_utils import default_weight_loader
@@ -40,7 +41,7 @@ class LlavaMultiModalProjector(nn.Module):
                                   text_hidden_size,
                                   bias=True)
 
-    def forward(self, image_features):
+    def forward(self, image_features: torch.Tensor) -> torch.Tensor:
         hidden_states = self.linear_1(image_features)
         hidden_states = self.act(hidden_states)
         hidden_states = self.linear_2(hidden_states)
@@ -50,20 +51,48 @@ class LlavaMultiModalProjector(nn.Module):
 def _merge_vision_embeddings(input_ids: torch.Tensor,
                              inputs_embeds: torch.Tensor,
                              vision_embeddings: torch.Tensor,
-                             image_token_id: int):
+                             image_token_id: int) -> torch.Tensor:
     """In place merges in vision_embeddings with inputs_embeds."""
     mask = (input_ids == image_token_id)
-    inputs_embeds[mask] = vision_embeddings.view(-1,
+
+    image_feature_size = vision_embeddings.shape[0] * vision_embeddings.shape[1]
+    if mask.sum() != image_feature_size:
+        raise ValueError(f"image_feature_size should be {image_feature_size}, "
+                         f"but found: {mask.sum()}")
+
+    inputs_embeds[mask] = vision_embeddings.view(image_feature_size,
                                                  vision_embeddings.shape[-1])
+    return inputs_embeds
+
+
+class LlavaImagePixelInputs(TypedDict):
+    type: Literal["pixel_values"]
+    data: torch.Tensor
+    """Shape: (batch_size, num_channels, height, width)"""
+
+
+class LlavaImageFeatureInputs(TypedDict):
+    type: Literal["image_features"]
+    data: torch.Tensor
+    """Shape: (batch_size, image_feature_size, hidden_size)"""
+
+
+LlavaImageInputs = Union[LlavaImagePixelInputs, LlavaImageFeatureInputs]
 
 
 class LlavaForConditionalGeneration(nn.Module):
 
+    is_vlm: ClassVar[bool] = True
+    """Indicates that the model is a vision-language model and thus accepts
+    the `vision_language_config` parameter.
+    """
+
     def __init__(self,
-                 config: "LlavaConfig",
+                 config: LlavaConfig,
                  vision_language_config: VisionLanguageConfig,
                  quant_config: Optional["QuantizationConfig"] = None) -> None:
         super().__init__()
+
         self.config = config
 
         self.vision_language_config = vision_language_config
@@ -96,13 +125,108 @@ class LlavaForConditionalGeneration(nn.Module):
                                                 config.vocab_size, logit_scale)
         self.sampler = Sampler()
 
+    def _validate_image_data(self, data: torch.Tensor) -> torch.Tensor:
+        if list(data.shape[1:]) != list(
+                self.vision_language_config.image_input_shape[1:]):
+            raise ValueError(
+                f"The expected image tensor shape is batch dimension plus "
+                f"{self.vision_language_config.image_input_shape[1:]}. "
+                f"You supplied {data.shape}. "
+                f"If you are using vLLM's entrypoint, make sure your "
+                f"supplied image input is consistent with "
+                f"image_input_shape in engine args.")
+
+        return data
+
+    def _parse_and_validate_image_input(
+            self, **kwargs: object) -> Optional[LlavaImageInputs]:
+        pixel_values = kwargs.pop("pixel_values", None)
+        image_features = kwargs.pop("image_features", None)
+
+        expected_input_type = self.vision_language_config.image_input_type
+        ImageInputType = VisionLanguageConfig.ImageInputType
+
+        if expected_input_type == ImageInputType.PIXEL_VALUES:
+            if image_features is not None:
+                raise ValueError(
+                    "Expected pixel values but got image features")
+            if pixel_values is None:
+                return None
+
+            if not isinstance(pixel_values, torch.Tensor):
+                raise ValueError("Incorrect type of pixel values")
+
+            return LlavaImagePixelInputs(
+                type="pixel_values",
+                data=self._validate_image_data(pixel_values),
+            )
+
+        if expected_input_type == ImageInputType.IMAGE_FEATURES:
+            if pixel_values is not None:
+                raise ValueError(
+                    "Expected image features but got pixel values")
+            if image_features is None:
+                return None
+
+            if not isinstance(image_features, torch.Tensor):
+                raise ValueError("Incorrect type of image features")
+
+            return LlavaImageFeatureInputs(
+                type="image_features",
+                data=self._validate_image_data(image_features),
+            )
+
+        return None
+
+    def _select_image_features(self, image_features: torch.Tensor, *,
+                               strategy: str) -> torch.Tensor:
+        # Copied from https://github.com/huggingface/transformers/blob/39c3c0a72af6fbda5614dde02ff236069bb79827/src/transformers/models/llava/modeling_llava.py#L421  # noqa
+        if strategy == "default":
+            return image_features[:, 1:]
+        elif strategy == "full":
+            return image_features
+
+        raise ValueError(f"Unexpected select feature strategy: {strategy}")
+
+    def _image_pixels_to_features(self, vision_tower: CLIPVisionModel,
+                                  pixel_values: torch.Tensor) -> torch.Tensor:
+        # TODO(xwjiang): Maybe port minimal CLIPVisionModel over.
+        image_outputs = vision_tower(pixel_values.to(vision_tower.device),
+                                     output_hidden_states=True)
+
+        image_features = image_outputs.hidden_states[
+            self.config.vision_feature_layer]
+
+        return self._select_image_features(
+            image_features,
+            strategy=self.config.vision_feature_select_strategy,
+        )
+
+    def _process_image_pixels(self,
+                              inputs: LlavaImagePixelInputs) -> torch.Tensor:
+        assert self.vision_tower is not None
+
+        pixel_values = inputs["data"]
+
+        return self._image_pixels_to_features(self.vision_tower, pixel_values)
+
+    def _process_image_input(self,
+                             image_input: LlavaImageInputs) -> torch.Tensor:
+        if image_input["type"] == "pixel_values":
+            assert self.vision_tower is not None
+            image_features = self._process_image_pixels(image_input)
+        else:
+            image_features = image_input["data"]
+
+        return self.multi_modal_projector(image_features)
+
     def forward(
         self,
         input_ids: torch.Tensor,
         positions: torch.Tensor,
         kv_caches: List[torch.Tensor],
         attn_metadata: AttentionMetadata,
-        image_input: Optional[torch.Tensor] = None
+        **kwargs: object,
     ) -> SamplerOutput:  # noqa: E501
         """Run forward pass for Llava 1.5.
 
@@ -136,46 +260,25 @@ class LlavaForConditionalGeneration(nn.Module):
         Args:
             input_ids: Flattened (concatenated) input_ids corresponding to a
                 batch.
-            image_input: A batch of image inputs.
-                For PIXEL_VALUES, expecting [1, 3, 336, 336].
-                For IMAGE_FEATURES, expecting [1, 576, 1024].
+            pixel_values: For PIXEL_VALUES, expects a batch with shape
+                [1, 3, 336, 336].
+            image_features: For IMAGE_FEATURES, expects a batch with shape
+                [1, 576, 1024].
         """
+        image_input = self._parse_and_validate_image_input(**kwargs)
+
         if image_input is not None:
-            if list(image_input.shape[1:]) != list(
-                    self.vision_language_config.image_input_shape[1:]):
-                raise ValueError(
-                    f"The expected image tensor shape is batch dimension "
-                    f"plus "
-                    f"{self.vision_language_config.image_input_shape[1:]}."
-                    f" You supplied {image_input.shape}. "
-                    f"If you are using vLLM's entrypoint, make sure your "
-                    f"supplied image input is consistent with "
-                    f"image_input_shape in engine args.")
-            if self.vision_tower is not None:
-                # TODO(xwjiang): Maybe port minimal CLIPVisionModel over.
-                image_outputs = self.vision_tower(image_input,
-                                                  output_hidden_states=True)
-                image_features = image_outputs.hidden_states[
-                    self.config.vision_feature_layer]
-                # Copied from https://github.com/huggingface/transformers/blob/39c3c0a72af6fbda5614dde02ff236069bb79827/src/transformers/models/llava/modeling_llava.py#L421  # noqa
-                if self.config.vision_feature_select_strategy == "default":
-                    image_features = image_features[:, 1:]
-                elif self.config.vision_feature_select_strategy == "full":
-                    image_features = image_features
-                else:
-                    raise ValueError(
-                        f"Unexpected select feature strategy: "
-                        f"{self.config.vision_feature_select_strategy}")
-            else:
-                image_features = image_input
-            vision_embeddings = self.multi_modal_projector(image_features)
+            vision_embeddings = self._process_image_input(image_input)
             inputs_embeds = self.language_model.get_input_embeddings(input_ids)
-            _merge_vision_embeddings(
+
+            inputs_embeds = _merge_vision_embeddings(
                 input_ids, inputs_embeds, vision_embeddings,
                 self.vision_language_config.image_token_id)
+
             input_ids = None
         else:
             inputs_embeds = None
+
         hidden_states = self.language_model(input_ids,
                                             positions,
                                             kv_caches,
@@ -236,4 +339,4 @@ class LlavaForConditionalGeneration(nn.Module):
                 param = params_dict[name]
                 weight_loader = getattr(param, "weight_loader",
                                         default_weight_loader)
-                weight_loader(param, loaded_weight)
+                weight_loader(param, loaded_weight)
\ No newline at end of file
diff --git a/vllm/model_executor/models/llava_next.py b/vllm/model_executor/models/llava_next.py
new file mode 100644
index 00000000..f52540a3
--- /dev/null
+++ b/vllm/model_executor/models/llava_next.py
@@ -0,0 +1,218 @@
+from typing import Optional, TypedDict, Union
+
+import torch
+from torch import nn
+from transformers import LlavaNextConfig
+from transformers.models.llava_next.modeling_llava_next import (
+    get_anyres_image_grid_shape, unpad_image)
+
+from vllm.config import VisionLanguageConfig
+from vllm.model_executor.layers.linear import LinearMethodBase
+
+from .llava import (LlavaForConditionalGeneration, LlavaImageFeatureInputs,
+                    LlavaImagePixelInputs)
+
+
+class ImageSizesMixin(TypedDict, total=False):
+    image_sizes: torch.Tensor
+    """Shape: (batch_size, 2)"""
+
+
+class LlavaNextImagePixelInputs(ImageSizesMixin, LlavaImagePixelInputs):
+    data: torch.Tensor
+    """Shape: (batch_size, 1 + num_patches, num_channels, height, width)"""
+
+
+class LlavaNextImageFeatureInputs(ImageSizesMixin, LlavaImageFeatureInputs):
+    data: torch.Tensor
+    """Shape: (batch_size, 1 + num_patches, image_feature_size, hidden_size)"""
+
+
+LlavaNextImageInputs = Union[LlavaNextImagePixelInputs,
+                             LlavaNextImageFeatureInputs]
+
+
+class LlavaNextForConditionalGeneration(LlavaForConditionalGeneration):
+    """
+    Args to `forward()`:
+        input_ids: Flattened (concatenated) input_ids corresponding to a
+            batch.
+        pixel_values: For PIXEL_VALUES, expects a batch with shape
+            [1, num_patches, 3, 336, 336].
+        image_features: For IMAGE_FEATURES, expects a batch with shape
+            [1, num_patches, 1176, 1024].
+    """
+
+    def __init__(self,
+                 config: LlavaNextConfig,
+                 vision_language_config: VisionLanguageConfig,
+                 linear_method: Optional[LinearMethodBase] = None) -> None:
+        super().__init__(config, vision_language_config, linear_method)
+
+        # Update the type annotation from that of its superclass
+        self.config = config
+
+        self.image_newline = nn.Parameter(
+            torch.empty(config.text_config.hidden_size))
+
+    def _validate_image_pixels(self, data: torch.Tensor) -> torch.Tensor:
+        _, num_channels, _, _ = self.vision_language_config.image_input_shape
+
+        # Note that this is different from that of vLLM vision_language_config
+        # since the image is resized by the HuggingFace preprocessor
+        height = width = self.config.vision_config.image_size
+
+        if list(data.shape[2:]) != [num_channels, height, width]:
+            raise ValueError(
+                f"The expected image tensor shape is batch dimension plus "
+                f"num_patches plus {[num_channels, height, width]}. "
+                f"You supplied {data.shape}. "
+                f"If you are using vLLM's entrypoint, make sure your "
+                f"supplied image input is consistent with "
+                f"image_input_shape in engine args.")
+
+        return data
+
+    def _parse_and_validate_image_input(
+            self, **kwargs: object) -> Optional[LlavaNextImageInputs]:
+        pixel_values = kwargs.pop("pixel_values", None)
+        image_sizes = kwargs.pop("image_sizes", None)
+        image_features = kwargs.pop("image_features", None)
+
+        expected_input_type = self.vision_language_config.image_input_type
+        ImageInputType = VisionLanguageConfig.ImageInputType
+
+        if expected_input_type == ImageInputType.PIXEL_VALUES:
+            if image_features is not None:
+                raise ValueError(
+                    "Expected pixel values but got image features")
+            if pixel_values is None:
+                return None
+
+            if not isinstance(pixel_values, torch.Tensor):
+                raise ValueError("Incorrect type of pixel values")
+
+            if not isinstance(image_sizes, torch.Tensor):
+                raise ValueError("Incorrect type of image sizes")
+
+            return LlavaNextImagePixelInputs(
+                type="pixel_values",
+                data=self._validate_image_pixels(pixel_values),
+                image_sizes=image_sizes,
+            )
+
+        if expected_input_type == ImageInputType.IMAGE_FEATURES:
+            if pixel_values is not None:
+                raise ValueError(
+                    "Expected image features but got pixel values")
+            if image_features is None:
+                return None
+
+            if not isinstance(image_features, torch.Tensor):
+                raise ValueError("Incorrect type of image features")
+
+            return LlavaNextImageFeatureInputs(
+                type="image_features",
+                data=self._validate_image_data(image_features),
+            )
+
+        return None
+
+    def _merge_image_patch_embeddings(self, image_size: torch.Tensor,
+                                      patch_embeddings: torch.Tensor, *,
+                                      strategy: str) -> torch.Tensor:
+        if strategy == "flat":
+            return patch_embeddings.flatten(0, 1)
+
+        if strategy.startswith("spatial"):
+            orig_width, orig_height = image_size
+            height = width = self.config.vision_config.image_size \
+                // self.config.vision_config.patch_size
+
+            base_patch_embeds = patch_embeddings[0]
+            if height * width != base_patch_embeds.shape[0]:
+                raise ValueError(
+                    "The number of patches is not consistent with the "
+                    "image size.")
+
+            if patch_embeddings.shape[0] > 1:
+                other_patch_embeds = patch_embeddings[1:]
+
+                # image_aspect_ratio == "anyres"
+                num_patch_width, num_patch_height = get_anyres_image_grid_shape(
+                    (orig_width, orig_height),
+                    self.config.image_grid_pinpoints,
+                    self.config.vision_config.image_size,
+                )
+                other_patch_embeds = other_patch_embeds \
+                    .view(num_patch_width, num_patch_height, height, width, -1)
+
+                if "unpad" in strategy:
+                    other_patch_embeds = other_patch_embeds \
+                        .permute(4, 0, 2, 1, 3).contiguous() \
+                        .flatten(1, 2).flatten(2, 3)
+                    other_patch_embeds = unpad_image(other_patch_embeds,
+                                                     image_size)
+                    other_patch_embeds = torch.cat((
+                        other_patch_embeds,
+                        self.image_newline[:, None, None] \
+                            .expand(*other_patch_embeds.shape[:-1], 1) \
+                            .to(other_patch_embeds.device),
+                    ), dim=-1)
+                    other_patch_embeds = other_patch_embeds \
+                        .flatten(1, 2).transpose(0, 1)
+                else:
+                    other_patch_embeds = other_patch_embeds \
+                        .permute(0, 2, 1, 3, 4).contiguous() \
+                        .flatten(0, 3)
+
+                merged_patch_embeddings = torch.cat(
+                    (base_patch_embeds, other_patch_embeds), dim=0)
+            else:
+                if "unpad" in strategy:
+                    merged_patch_embeddings = torch.cat(
+                        (base_patch_embeds,
+                         self.image_newline[None] \
+                            .to(base_patch_embeds.device)
+                    ), dim=0)
+                else:
+                    merged_patch_embeddings = base_patch_embeds
+
+            return merged_patch_embeddings
+
+        raise ValueError(f"Unexpected patch merge strategy: {strategy}")
+
+    def _process_image_pixels(
+            self, inputs: LlavaNextImagePixelInputs) -> torch.Tensor:
+        assert self.vision_tower is not None
+
+        pixel_values = inputs["data"]
+
+        b, num_patches, c, h, w = pixel_values.shape
+        stacked_pixel_values = pixel_values.view(b * num_patches, c, h, w)
+
+        stacked_image_features = self._image_pixels_to_features(
+            self.vision_tower, stacked_pixel_values)
+
+        return stacked_image_features.view(b, num_patches,
+                                           *stacked_image_features.shape[-2:])
+
+    def _process_image_input(
+            self, image_input: LlavaNextImageInputs) -> torch.Tensor:
+        patch_embeddings = super()._process_image_input(image_input)
+
+        image_sizes = image_input.get("image_sizes")
+        if image_sizes is None:
+            batch_size = image_input["data"].shape[0]
+            default_width, default_height = self.config.vision_config.image_size
+            image_sizes = torch.as_tensor([[default_width, default_height]
+                                           for _ in range(batch_size)])
+
+        merged_patch_embeddings = [
+            self._merge_image_patch_embeddings(image_sizes[i],
+                                               patch_features,
+                                               strategy="spatial_unpad")
+            for i, patch_features in enumerate(patch_embeddings)
+        ]
+
+        return torch.stack(merged_patch_embeddings, dim=0)
diff --git a/vllm/model_executor/models/phi3_v.py b/vllm/model_executor/models/phi3_v.py
new file mode 100644
index 00000000..c9545ae9
--- /dev/null
+++ b/vllm/model_executor/models/phi3_v.py
@@ -0,0 +1,601 @@
+from typing import (ClassVar, Iterable, List, Literal, Optional, Tuple,
+                    TypedDict, Union)
+
+import torch
+from torch import nn
+# TODO(xwjiang): We should port CLIPVisionModel's code over to not depend on
+# transformers' impl.
+
+
+# from transformers import CLIPVisionModel, LlavaConfig
+from transformers import  LlavaConfig
+from transformers import CLIPVisionConfig 
+from .clip_flashattn import CLIPVisionModel
+
+import numpy as np
+
+from vllm.attention import AttentionMetadata
+from vllm.config import VisionLanguageConfig
+from vllm.model_executor.layers.activation import get_act_fn
+from vllm.model_executor.layers.logits_processor import LogitsProcessor
+from vllm.model_executor.layers.quantization.base_config import (
+    QuantizationConfig)
+from vllm.model_executor.layers.sampler import Sampler
+from vllm.model_executor.layers.vocab_parallel_embedding import ParallelLMHead
+from vllm.model_executor.model_loader.weight_utils import default_weight_loader
+from vllm.model_executor.models.llama import LlamaModel
+from vllm.model_executor.sampling_metadata import SamplingMetadata
+from vllm.sequence import SamplerOutput
+
+from vllm.model_executor.layers.vocab_parallel_embedding import (
+    DEFAULT_VOCAB_PADDING_SIZE, ParallelLMHead, VocabParallelEmbedding)
+
+_KEYS_TO_MODIFY_MAPPING = {
+    "language_model.lm_head": "lm_head",
+    "language_model.model": "language_model",
+}
+
+class ImageSizesMixin(TypedDict, total=False):
+    image_sizes: torch.Tensor
+    """Shape: (batch_size, 2)"""
+
+
+class Phi3VImagePixelInputs(ImageSizesMixin):
+    data: torch.Tensor
+    """Shape: (batch_size, 1 + num_patches, num_channels, height, width)"""
+
+
+class Phi3VImageFeatureInputs(ImageSizesMixin):
+    data: torch.Tensor
+    """Shape: (batch_size, 1 + num_patches, image_feature_size, hidden_size)"""
+
+
+Phi3VImageInputs = Union[Phi3VImagePixelInputs,
+                             Phi3VImageFeatureInputs]
+
+CLIP_VIT_LARGE_PATCH14_336_CONFIG = CLIPVisionConfig(
+  attention_dropout=0.0,
+  dropout=0.0,
+  hidden_act="quick_gelu",
+  hidden_size=1024,
+  image_size=336,
+  initializer_factor=1.0,
+  initializer_range=0.02,
+  intermediate_size=4096,
+  layer_norm_eps=1e-05,
+  num_attention_heads=16,
+  num_channels=3,
+  num_hidden_layers=24,
+  patch_size=14,
+  projection_dim=768,
+  _flash_attn_2_enabled=True
+)
+
+
+class Phi3ImageEmbedding(nn.Module):
+    """Phi3 Image embedding."""
+
+    def __init__(self, config, **kwargs) -> None:
+        super().__init__()
+
+        # n_embed or hidden_size
+        hidden_size = config.n_embd if hasattr(config, 'n_embd') else config.hidden_size
+        if hasattr(config, 'embd_pdrop') or hasattr(config, 'embed_pdrop'):
+            embd_drop = config.embd_pdrop if hasattr(config, 'embd_pdrop') else config.embed_pdrop
+            self.drop = nn.Dropout(embd_drop)
+        else:
+            self.drop = None
+
+        if isinstance(config.img_processor, dict) and config.img_processor.get('name', None) == 'clip_vision_model':
+            assert 'model_name' in config.img_processor, 'model_name must be provided for CLIPVisionModel'
+            assert 'image_dim_out' in config.img_processor, 'image_dim_out must be provided for CLIPVisionModel'
+            assert 'num_img_tokens' in config.img_processor, 'num_img_tokens must be provided for CLIPVisionModel'
+            assert config.img_processor['model_name'] == 'openai/clip-vit-large-patch14-336'
+            clip_config = CLIP_VIT_LARGE_PATCH14_336_CONFIG
+            self.img_processor = CLIPVisionModel(clip_config)
+            image_dim_out = config.img_processor['image_dim_out']
+            self.num_img_tokens = config.img_processor['num_img_tokens']
+        else:
+            raise NotImplementedError(f'img_processor = {config.img_processor}, not implemented')
+
+        self.image_dim_out = image_dim_out
+        self.img_sizes = None
+
+        # global_gn and sub_gn for hd transform, serves as line separator
+        self.use_hd_transform = kwargs.get('use_hd_transform', False)
+        self.with_learnable_separator = kwargs.get('with_learnable_separator', False)
+        self.hd_transform_order = kwargs.get('hd_transform_order', 'glb_sub')
+        # with_hd_transform and with_learnable_separator should have same value
+        assert self.use_hd_transform == self.with_learnable_separator, 'use_hd_transform and with_learnable_separator should have same value'
+        if self.with_learnable_separator:
+            assert self.use_hd_transform, 'learnable separator is only for hd transform'
+            # 1024 * 4, merge spatial to channel dimension
+            self.glb_GN = nn.Parameter(torch.zeros([1, 1, self.image_dim_out * 4]))
+            self.sub_GN = nn.Parameter(torch.zeros([1, 1, 1, self.image_dim_out * 4]))
+
+        projection_cls = kwargs.get('projection_cls', 'linear')
+        if projection_cls == 'linear':
+            self.img_projection = nn.Linear(image_dim_out, hidden_size)
+        elif projection_cls == 'mlp' and self.use_hd_transform:
+            dim_projection = hidden_size
+            depth = 2
+            layers = [nn.Linear(image_dim_out * 4, dim_projection)]
+            for _ in range(1, depth):
+                layers.extend([nn.GELU(),
+                                nn.Linear(dim_projection, dim_projection)])
+            self.img_projection = nn.Sequential(*layers)
+        elif projection_cls == 'mlp':
+            dim_projection = hidden_size
+            depth = 2
+            layers = [nn.Linear(image_dim_out, dim_projection)]
+            for _ in range(1, depth):
+                layers.extend([nn.GELU(),
+                                nn.Linear(dim_projection, dim_projection)])
+            self.img_projection = nn.Sequential(*layers)
+        else:
+            raise NotImplementedError(f'projection_cls = {projection_cls}, not implemented')
+
+        self.vocab_size = config.vocab_size
+        self.img_features = None
+
+        if isinstance(config.img_processor, dict):
+            self.layer_idx = config.img_processor.get('layer_idx', -2)
+            self.type_feature = config.img_processor.get('type_feature', 'patch')
+        else:
+            self.layer_idx = -2
+            self.type_feature = 'patch'
+        
+        if hasattr(config, 'special_image_token_id'):
+            self.special_image_token_id = config.special_image_token_id 
+        else:
+            self.special_image_token_id = 32044
+
+    def set_img_features(self, img_features: torch.FloatTensor) -> None:
+        self.img_features = img_features
+
+    def set_img_sizes(self, img_sizes: torch.LongTensor) -> None:
+        self.img_sizes = img_sizes
+
+    def get_img_features(self, img_embeds: torch.FloatTensor) -> torch.FloatTensor:
+        LAYER_IDX = self.layer_idx
+        TYPE_FEATURE = self.type_feature
+
+        # convert device
+        img_processor_output = self.img_processor(img_embeds.to(self.img_processor.device), output_hidden_states=True)
+        img_feature = img_processor_output.hidden_states[LAYER_IDX]
+
+        if TYPE_FEATURE == "patch":
+            patch_feature = img_feature[:, 1:]
+            return patch_feature
+
+        if TYPE_FEATURE == "cls_patch":
+            return img_feature
+
+        raise NotImplementedError
+
+    def forward(self, 
+                input_ids: torch.LongTensor, 
+                pixel_values: torch.FloatTensor, 
+                image_sizes=None,
+                language_model=None,
+                ) -> torch.FloatTensor:
+
+        MAX_INPUT_ID = int(1e9)
+        img_embeds = pixel_values
+        img_sizes = image_sizes
+
+        if self.img_features is not None:
+            img_embeds = self.img_features.clone()
+            self.img_features = None
+
+        if self.img_sizes is not None:
+            img_sizes = self.img_sizes
+
+        input_shape = input_ids.size()
+        # input_ids is already flattened from vLLM
+        input_ids = input_ids.view(-1, input_shape[-1])
+
+        with torch.no_grad():
+            # image_token_id: 32044 
+            positions = torch.nonzero(input_ids == self.special_image_token_id, as_tuple=False)
+        
+        select = False
+
+        if isinstance(self.img_projection, nn.Sequential):  
+            target_device = self.img_projection[0].bias.device  
+            target_dtype = self.img_projection[0].bias.dtype  
+        else:  # It's a single nn.Linear layer  
+            target_device = self.img_projection.bias.device  
+            target_dtype = self.img_projection.bias.dtype  
+
+        if len(positions.tolist()) > 0:
+            with torch.no_grad():
+                g_values = abs(input_ids[positions[:, 0], positions[:, 1]])
+
+            if self.use_hd_transform and img_sizes is not None and len(img_sizes):
+                # convert to long tensor
+                img_sizes = img_sizes.to(dtype=torch.long)
+                hd_transform = True
+                assert img_embeds.ndim == 5, f'img_embeds size: {img_embeds.size()}, expect 5D tensor for hd transform'
+                # img_embeds: (num_images, max_num_crops, 3, H, W)
+                # img_sizes: (num_images, 2).view(1, -1)
+
+                bs = img_embeds.shape[0]
+                # Nx(HW)xC
+                img_features = self.get_img_features(img_embeds.flatten(0, 1))
+                base_feat_height = base_feat_width = int(np.sqrt(img_features.shape[1]))
+
+                assert base_feat_height == 24 and base_feat_width == 24, f'base_feat_height: {base_feat_height}, base_feat_width: {base_feat_width}, expect 24x24 features for hd transform'
+
+                # bs x max_num_crops x (24x24) x C
+                img_features = img_features.view(bs, -1, base_feat_height * base_feat_width, self.image_dim_out)
+                C = self.image_dim_out
+                H = base_feat_height
+
+                output_imgs = []
+                output_len = []
+                # training is tensor, inference is list
+                if isinstance(img_sizes, torch.Tensor):
+                    img_sizes = img_sizes.view(-1, 2)
+                for _bs in range(bs):
+                    h, w = img_sizes[_bs]
+                    h = h // 336 
+                    w = w // 336
+                    B_ = h * w
+
+                    # 1 x (24x24) x 1024
+                    global_img_feature = img_features[_bs, :1]
+
+                    # 1 x 12 x 12 x 4096
+                    glb_img = global_img_feature.reshape(1,H,H,C).reshape(1,H//2,2,H//2,2,C).contiguous().permute(0,1,3,2,4,5).reshape(1,H//2,H//2,4*C).contiguous()
+                    temp_glb_GN = self.sub_GN.repeat(1, H//2, 1, 1)
+
+                    # 1 x 156 x 4096
+                    glb_img = torch.cat([glb_img, temp_glb_GN], dim=2).reshape(1,-1,4*C)
+
+                    # (max_num_crops-1) x (12x12) x C
+                    sub_img = img_features[_bs, 1:]
+                    # 16x574x1024
+                    # get rid of padding sub_img
+                    sub_img = sub_img[:B_]
+
+                    # (num_crops, 12, 2, 12, 2, 1024) -> (num_crops, 12, 12, 2, 2, 1024) -> (num_crops, 12*12, 4*1024)
+                    sub_img = sub_img.reshape(B_,H,H,C).reshape(B_,H//2,2,H//2,2,C).contiguous().permute(0,1,3,2,4,5).reshape(B_,-1,4*C).contiguous()
+                    sub_img = sub_img.reshape(1, h, w, 12, 12, -1).permute(0,1,3,2,4,5).reshape(1,h*12,w*12,4*C)
+                    temp_sub_GN = self.sub_GN.repeat(1, h*12, 1, 1)
+                    sub_img = torch.cat([sub_img, temp_sub_GN], dim=2).reshape(1,-1,4*C)
+                    # (1, num_img_tokens, 1024*4)
+
+                    # glb + sub
+                    if self.hd_transform_order == 'glb_sub':
+                        output_imgs.append(torch.cat([glb_img, self.glb_GN, sub_img], dim=1))
+                    elif self.hd_transform_order == 'sub_glb':
+                        output_imgs.append(torch.cat([sub_img, self.glb_GN, glb_img], dim=1))
+                    else:
+                        raise NotImplementedError(f'hd_transform_order = {self.hd_transform_order}, not implemented')
+
+                    temp_len = int((h*w+1)*144 + 1 + (h+1)*12)
+                    assert temp_len == output_imgs[-1].shape[1], f'temp_len: {temp_len}, output_imgs[-1].shape[1]: {output_imgs[-1].shape[1]}'
+                    output_len.append(temp_len)
+                
+                num_img_tokens = output_len
+                img_set_tensor = []
+                for _output_img in output_imgs:
+                    img_feature_proj = self.img_projection(_output_img.to(target_device).to(target_dtype))
+                    img_set_tensor.append(img_feature_proj)
+            elif img_embeds.ndim == 4:
+                selected_g_values = g_values[::self.num_img_tokens]
+                assert len(img_embeds) == len(selected_g_values), f'img_embeds size: {img_embeds.size()}, selected_g_values size: {len(selected_g_values)}, selected_g_value {selected_g_values}'
+                tt = (
+                    self.get_img_features(img_embeds)
+                    .to(target_device)
+                    .to(target_dtype)
+                    .reshape(-1, self.image_dim_out)
+                )
+                img_set_tensor = self.img_projection(tt)  # adapted visual features.
+            elif img_embeds.ndim == 3:
+                selected_g_values = g_values[::self.num_img_tokens]
+                assert len(img_embeds) == len(selected_g_values), f'img_embeds size: {img_embeds.size()}, selected_g_values size: {len(selected_g_values)}, selected_g_value {selected_g_values}'
+                tt = (
+                    img_embeds
+                    .to(target_device)
+                    .to(target_dtype)
+                    .view(-1, self.image_dim_out)
+                )
+                img_set_tensor = self.img_projection(tt)  # adapted visual features.
+            else:
+                raise NotImplementedError
+            select = True
+        
+        with torch.no_grad():
+            input_ids.clamp_min_(0).clamp_max_(self.vocab_size)
+        
+        hidden_states = language_model.get_input_embeddings(input_ids)
+
+        if select:
+            if hd_transform:
+                idx = 0
+                for i, cnt in enumerate(num_img_tokens):
+                    hidden_states[positions[idx, 0], positions[idx, 1] : positions[idx, 1] + cnt] = (
+                        img_set_tensor[i]
+                        .to(hidden_states.dtype)
+                        .to(hidden_states.device)
+                        )
+                    idx += cnt
+            else:
+                idx = 0
+                assert len(selected_g_values) * self.num_img_tokens == len(img_set_tensor), f'len(selected_g_values) * self.num_img_tokens = {len(selected_g_values) * self.num_img_tokens}, len(img_set_tensor) = {len(img_set_tensor)}'
+                for i, g in enumerate(selected_g_values):
+                    cnt = self.num_img_tokens
+                    hidden_states[positions[idx, 0], positions[idx, 1] : positions[idx, 1] + cnt] = (
+                        img_set_tensor[i * cnt : (i + 1) * cnt]
+                        .to(hidden_states.dtype)
+                        .to(hidden_states.device)
+                        )
+                    idx += cnt
+
+        if self.drop is not None:
+            hidden_states = self.drop(hidden_states)
+        
+        return hidden_states
+
+
+
+
+class Phi3VForConditionalGeneration(nn.Module):
+
+    is_vlm: ClassVar[bool] = True
+
+    def __init__(self,
+                 config: "LlavaConfig",
+                 vision_language_config: VisionLanguageConfig,
+                 quant_config: Optional["QuantizationConfig"] = None) -> None:
+        super().__init__()
+        self.config = config
+        self.vision_language_config = vision_language_config
+
+        assert self.vision_language_config, (
+            "Provide `image_input_type` and other vision "
+            "related configurations through LLM entrypoint "
+            "or engine arguments.")
+
+        if self.vision_language_config.image_input_type == (
+                VisionLanguageConfig.ImageInputType.PIXEL_VALUES):
+            assert isinstance(config.embd_layer, dict), "embd_layer must be dict" 
+            # vision embedding layer
+            embedding_config = {
+                'embedding_cls': config.embd_layer['embedding_cls'],
+                **config.embd_layer
+            }
+            self.vision_embed_tokens = Phi3ImageEmbedding(config, **embedding_config)
+        else:
+            raise NotImplementedError("Only PIXEL_VALUES is supported for now.")
+
+        self.quant_config = quant_config
+        self.model = LlamaModel(config, quant_config)
+        self.unpadded_vocab_size = config.vocab_size
+        self.lm_head = ParallelLMHead(
+            self.unpadded_vocab_size,
+            config.hidden_size,
+            org_num_embeddings=config.vocab_size,
+            padding_size=DEFAULT_VOCAB_PADDING_SIZE
+        )
+        logit_scale = getattr(config, "logit_scale", 1.0)
+        self.logits_processor = LogitsProcessor(self.unpadded_vocab_size,
+                                                config.vocab_size, logit_scale)
+        self.sampler = Sampler()
+
+    def _validate_image_data(self, data: torch.Tensor) -> torch.Tensor:
+        if list(data.shape[1:]) != list(
+                self.vision_language_config.image_input_shape[1:]):
+            raise ValueError(
+                f"The expected image tensor shape is batch dimension plus "
+                f"{self.vision_language_config.image_input_shape[1:]}. "
+                f"You supplied {data.shape}. "
+                f"If you are using vLLM's entrypoint, make sure your "
+                f"supplied image input is consistent with "
+                f"image_input_shape in engine args.")
+
+        return data
+
+    def _validate_image_pixels(self, data: torch.Tensor) -> torch.Tensor:
+        _, num_channels, _, _ = self.vision_language_config.image_input_shape
+
+        # Note that this is different from that of vLLM vision_language_config
+        # since the image is resized by the HuggingFace preprocessor
+        # height = width = self.config.vision_config.image_size
+
+        # if list(data.shape[2:]) != [num_channels, height, width]:
+        #     raise ValueError(
+        #         f"The expected image tensor shape is batch dimension plus "
+        #         f"num_patches plus {[num_channels, height, width]}. "
+        #         f"You supplied {data.shape}. "
+        #         f"If you are using vLLM's entrypoint, make sure your "
+        #         f"supplied image input is consistent with "
+        #         f"image_input_shape in engine args.")
+
+        return data
+
+    def _parse_and_validate_image_input(
+            self, **kwargs: object) -> Optional[Phi3VImageInputs]:
+        pixel_values = kwargs.pop("pixel_values", None)
+        image_sizes = kwargs.pop("image_sizes", None)
+        image_features = kwargs.pop("image_features", None)
+
+        expected_input_type = self.vision_language_config.image_input_type
+        ImageInputType = VisionLanguageConfig.ImageInputType
+
+        if expected_input_type == ImageInputType.PIXEL_VALUES:
+            if image_features is not None:
+                raise ValueError(
+                    "Expected pixel values but got image features")
+            if pixel_values is None:
+                return None
+
+            if not isinstance(pixel_values, torch.Tensor):
+                raise ValueError("Incorrect type of pixel values")
+
+            if not isinstance(image_sizes, torch.Tensor):
+                raise ValueError("Incorrect type of image sizes")
+
+            return Phi3VImagePixelInputs(
+                type="pixel_values",
+                data=self._validate_image_pixels(pixel_values),
+                image_sizes=image_sizes,
+            )
+
+        if expected_input_type == ImageInputType.IMAGE_FEATURES:
+            if pixel_values is not None:
+                raise ValueError(
+                    "Expected image features but got pixel values")
+            if image_features is None:
+                return None
+
+            if not isinstance(image_features, torch.Tensor):
+                raise ValueError("Incorrect type of image features")
+
+            return Phi3VImageFeatureInputs(
+                type="image_features",
+                data=self._validate_image_data(image_features),
+            )
+
+        return None
+
+    def forward(
+        self,
+        input_ids: torch.Tensor,
+        positions: torch.Tensor,
+        kv_caches: List[torch.Tensor],
+        attn_metadata: AttentionMetadata,
+        **kwargs: object,
+    ) -> SamplerOutput:  # noqa: E501
+        """Run forward pass for Llava 1.5.
+
+        One key thing to understand is the `input_ids` already accounts for the
+        positions of the to-be-inserted image embeddings.
+        Concretely, consider a text prompt:
+        "<image>\nUSER: What's the content of the image?\nASSISTANT:".
+        Tokenizer outputs:
+        [1, 32000, 29871, 13, 11889, 29901, 1724, 29915, 29879, 278,
+        2793, 310, 278, 1967, 29973, 13, 22933, 9047, 13566, 29901].
+        The to-be-inserted image has a size of 576 (24 * 24) along the context
+        length dimension.
+        `input_ids` is thus [1, 32000, ..., 32000, 29871, 13, 11889, 29901,
+        1724, 29915, 29879, 278, 2793, 310, 278, 1967, 29973, 13, 22933,
+        9047, 13566, 29901].
+        There will be 576 `32000` in the `input_ids`.
+        (32000 is the token id for `<image>`.)
+
+        This way, the `positions` and `attn_metadata` are consistent
+        with the `input_ids`.
+
+        The model takes two types of image inputs: 
+        PIXEL_VALUES and IMAGE_FEATURES.
+        The following shows how each maps to huggingface implementation.
+        PIXEL_VALUES: 
+        - https://github.com/huggingface/transformers/blob/07bdbeb/src/transformers/models/llava/modeling_llava.py#L353
+        IMAGE_FEATURES:
+        - https://github.com/huggingface/transformers/blob/07bdbeb/src/transformers/models/llava/modeling_llava.py#L430
+        before going through the multi modal projector.
+
+        Args:
+            input_ids: Flattened (concatenated) input_ids corresponding to a
+                batch.
+            image_input: A batch of image inputs.
+                For PIXEL_VALUES, expecting [1, 3, 336, 336].
+                For IMAGE_FEATURES, expecting [1, 576, 1024].
+        """
+        image_input = self._parse_and_validate_image_input(**kwargs)
+
+
+        if image_input is not None:
+            # import ipdb
+            # ipdb.set_trace()
+
+            inputs_embeds = self.vision_embed_tokens(
+                input_ids, 
+                pixel_values=image_input["data"], 
+                image_sizes=image_input["image_sizes"],
+                language_model=self.model
+            )
+            # flatten
+            inputs_embeds = inputs_embeds.squeeze(0)
+            input_ids = None
+        else:
+            inputs_embeds = None
+        
+        hidden_states = self.model(
+            input_ids,
+            positions,
+            kv_caches,
+            attn_metadata,
+            inputs_embeds=inputs_embeds
+        )
+
+        return hidden_states
+
+    def compute_logits(self, hidden_states: torch.Tensor,
+                       sampling_metadata: SamplingMetadata) -> torch.Tensor:
+        logits = self.logits_processor(self.lm_head.weight, hidden_states,
+                                       sampling_metadata)
+        return logits
+
+    def sample(
+        self,
+        logits: torch.Tensor,
+        sampling_metadata: SamplingMetadata,
+    ) -> Optional[SamplerOutput]:
+        next_tokens = self.sampler(logits, sampling_metadata)
+        return next_tokens
+
+    def load_weights(self, weights: Iterable[Tuple[str, torch.Tensor]]):
+        # only doing this for language model part for now.
+        stacked_params_mapping = [
+            # (param_name, shard_name, shard_id)
+            (".qkv_proj", ".q_proj", "q"),
+            (".qkv_proj", ".k_proj", "k"),
+            (".qkv_proj", ".v_proj", "v"),
+            (".gate_up_proj", ".gate_proj", 0),
+            (".gate_up_proj", ".up_proj", 1),
+        ]
+        params_dict = dict(self.named_parameters())
+        for name, loaded_weight in weights:
+            if "rotary_emb.inv_freq" in name:
+                continue
+            if ("rotary_emb.cos_cached" in name
+                    or "rotary_emb.sin_cached" in name):
+                # Models trained using ColossalAI may include these tensors in
+                # the checkpoint. Skip them.
+                continue
+            for key_to_modify, new_key in _KEYS_TO_MODIFY_MAPPING.items():
+                if key_to_modify in name:
+                    name = name.replace(key_to_modify, new_key)
+            use_default_weight_loader = False 
+            if 'vision_embed_tokens' in name:
+                use_default_weight_loader = True
+            else:
+                for (param_name, weight_name, shard_id) in stacked_params_mapping:
+                    if weight_name not in name:
+                        continue
+                    name = name.replace(weight_name, param_name)
+                    # Skip loading extra bias for GPTQ models.
+                    if name.endswith(".bias") and name not in params_dict:
+                        continue
+                    param = params_dict[name]
+                    weight_loader = param.weight_loader
+                    weight_loader(param, loaded_weight, shard_id)
+                    break
+                else:
+                    # Skip loading extra bias for GPTQ models.
+                    if name.endswith(".bias") and name not in params_dict:
+                        continue
+                    use_default_weight_loader = True
+                
+            if use_default_weight_loader:
+                if 'model.vision_embed_tokens' in name:
+                    # change 'model.vision_embed_tokens*' to 'vision_embed_tokens*'
+                    name = name[len('model.'):]
+                param = params_dict[name]
+                weight_loader = getattr(param, "weight_loader",
+                                        default_weight_loader)
+                weight_loader(param, loaded_weight)
diff --git a/vllm/sequence.py b/vllm/sequence.py
index 0e931ebb..efe826e9 100644
--- a/vllm/sequence.py
+++ b/vllm/sequence.py
@@ -1,18 +1,26 @@
 """Sequence and its related classes."""
 import copy
 import enum
+from abc import ABC, abstractmethod
 from dataclasses import dataclass
 from typing import TYPE_CHECKING, Dict, List, Optional, Union
 
+import numpy as np
+import torch
+from PIL import Image
+
 from vllm.block import LogicalTokenBlock
+from vllm.logger import init_logger
 from vllm.lora.request import LoRARequest
 from vllm.sampling_params import SamplingParams
+from vllm.transformers_utils.image_processor import cached_get_image_processor
 
 if TYPE_CHECKING:
-    import torch
-
+    from vllm.config import ModelConfig, VisionLanguageConfig
     from vllm.spec_decode.metrics import SpecDecodeWorkerMetrics
 
+logger = init_logger(__name__)
+
 
 @dataclass
 class Logprob:
@@ -373,23 +381,78 @@ class SequenceGroupState:
     generator: Optional = None  # type: ignore
 
 
-class MultiModalData:
-    """Multi modal request.
+class MultiModalData(ABC):
+
+    @abstractmethod
+    def get_input_kwargs(
+            self, model_config: "ModelConfig",
+            vlm_config: "VisionLanguageConfig") -> Dict[str, torch.Tensor]:
+        """Returns a dictionary which are passed as keyword arguments to
+        :meth:`torch.nn.Module.forward`.
+        """
+        raise NotImplementedError
+
+
+class ImagePixelData(MultiModalData):
+
+    def __init__(self, image: Image.Image) -> None:
+        # So that this class can be created inside the Image context manager
+        # load is needed for server
+        image.load()
+
+        self.image = image
+
+    def _get_image_processor(self, model_config: "ModelConfig",
+                             vlm_config: "VisionLanguageConfig"):
+        if vlm_config is None or vlm_config.image_processor is None:
+            return None
+
+        return cached_get_image_processor(
+            vlm_config.image_processor,
+            trust_remote_code=model_config.trust_remote_code,
+            revision=vlm_config.image_processor_revision,
+        )
     
-    Args:
-        type: The data type.
-        data: The actual data.
-        The required shape and semantic meaning of it depends on the vision
-        language config of the hosted model. 
-        See `VisionLanguageConfig` in `config.py`.
-    """
+    def get_image_size(self):
+        image = self.image
+        return image.size
+
+    def get_input_kwargs(
+            self, model_config: "ModelConfig",
+            vlm_config: "VisionLanguageConfig") -> Dict[str, torch.Tensor]:
+        # Temporary patch to make LLaVA-NeXT usable
+        # _, _, h, w = vlm_config.image_input_shape
+        # image = self.image.resize((w, h))
+        image = self.image
+
+        image_processor = self._get_image_processor(model_config, vlm_config)
+        if image_processor is None:
+            image_arr = np.array(image, copy=True)
+            pixel_values = torch.as_tensor(image_arr) \
+                .view(1, image.height, image.width, -1) \
+                .permute((0, 3, 1, 2))  # NCHW
+
+            return {"pixel_values": pixel_values}
+
+        try:
+            out_dict = image_processor.preprocess(image) \
+                .convert_to_tensors("pt")
+        except Exception:
+            logger.error("Failed to process image (%s)", image)
+            raise
+
+        return out_dict.data
+
+
+class ImageFeatureData(MultiModalData):
 
-    class Type(enum.Enum):
-        IMAGE = enum.auto()
+    def __init__(self, image_features: torch.Tensor) -> None:
+        self.image_features = image_features
 
-    def __init__(self, type: Type, data: "torch.Tensor"):
-        self.type = type
-        self.data = data
+    def get_input_kwargs(
+            self, model_config: "ModelConfig",
+            vlm_config: "VisionLanguageConfig") -> Dict[str, torch.Tensor]:
+        return {"image_features": self.image_features}
 
 
 class SequenceGroup:
@@ -401,7 +464,8 @@ class SequenceGroup:
         sampling_params: The sampling parameters used to generate the outputs.
         arrival_time: The arrival time of the request.
         lora_request: LoRA request.
-        multi_modal_data: Multi modal data associated with the request.
+        multi_modal_kwargs: Extra kwargs to the model that are associated with
+        multi modal data.
     """
 
     def __init__(
@@ -411,7 +475,7 @@ class SequenceGroup:
         sampling_params: SamplingParams,
         arrival_time: float,
         lora_request: Optional[LoRARequest] = None,
-        multi_modal_data: Optional[MultiModalData] = None,
+        multi_modal_kwargs: Optional[Dict[str, torch.Tensor]] = None,
     ) -> None:
         self.request_id = request_id
         self.seqs_dict = {seq.seq_id: seq for seq in seqs}
@@ -424,7 +488,7 @@ class SequenceGroup:
         self.lora_request = lora_request
         self.prompt_logprobs: Optional[PromptLogprobs] = None
         self.state = SequenceGroupState()
-        self.multi_modal_data = multi_modal_data
+        self.multi_modal_kwargs = multi_modal_kwargs or {}
 
     @property
     def prompt(self) -> str:
@@ -596,7 +660,7 @@ class SequenceGroupMetadata:
         lora_request: Optional[LoRARequest] = None,
         computed_block_nums: Optional[List[int]] = None,
         state: Optional[SequenceGroupState] = None,
-        multi_modal_data: Optional[MultiModalData] = None,
+        multi_modal_kwargs: Optional[Dict[str, torch.Tensor]] = None,
     ) -> None:
         self.request_id = request_id
         self.is_prompt = is_prompt
@@ -605,7 +669,7 @@ class SequenceGroupMetadata:
         self.block_tables = block_tables
         self.lora_request = lora_request
         self.computed_block_nums = computed_block_nums
-        self.multi_modal_data = multi_modal_data
+        self.multi_modal_kwargs = multi_modal_kwargs or {}
         self.state = SequenceGroupState() if state is None else state
         self._token_chunk_size = token_chunk_size
         self.do_sample = do_sample
@@ -696,10 +760,10 @@ class SamplerOutput:
     outputs: List[SequenceGroupOutput]
 
     # On-device tensor containing probabilities of each token.
-    sampled_token_probs: Optional["torch.Tensor"] = None
+    sampled_token_probs: Optional[torch.Tensor] = None
 
     # On-device tensor containing the sampled token ids.
-    sampled_token_ids: Optional["torch.Tensor"] = None
+    sampled_token_ids: Optional[torch.Tensor] = None
 
     # Spec decode metrics populated by workers.
     spec_decode_worker_metrics: Optional["SpecDecodeWorkerMetrics"] = None
diff --git a/vllm/transformers_utils/image_processor.py b/vllm/transformers_utils/image_processor.py
new file mode 100644
index 00000000..3239b1d0
--- /dev/null
+++ b/vllm/transformers_utils/image_processor.py
@@ -0,0 +1,45 @@
+from functools import lru_cache
+from typing import Optional
+
+from transformers import AutoImageProcessor
+from transformers.image_processing_utils import BaseImageProcessor
+
+from vllm.logger import init_logger
+
+logger = init_logger(__name__)
+
+
+def get_image_processor(
+    processor_name: str,
+    *args,
+    trust_remote_code: bool = False,
+    revision: Optional[str] = None,
+    **kwargs,
+) -> BaseImageProcessor:
+    """Gets an image processor for the given model name via HuggingFace."""
+    try:
+        processor: BaseImageProcessor = AutoImageProcessor.from_pretrained(
+            processor_name,
+            *args,
+            trust_remote_code=trust_remote_code,
+            revision=revision,
+            **kwargs)
+    except ValueError as e:
+        # If the error pertains to the processor class not existing or not
+        # currently being imported, suggest using the --trust-remote-code flag.
+        # Unlike AutoTokenizer, AutoImageProcessor does not separate such errors
+        if not trust_remote_code:
+            err_msg = (
+                "Failed to load the image processor. If the image processor is "
+                "a custom processor not yet available in the HuggingFace "
+                "transformers library, consider setting "
+                "`trust_remote_code=True` in LLM or using the "
+                "`--trust-remote-code` flag in the CLI.")
+            raise RuntimeError(err_msg) from e
+        else:
+            raise e
+
+    return processor
+
+
+cached_get_image_processor = lru_cache(get_image_processor)
diff --git a/vllm/transformers_utils/processor.py b/vllm/transformers_utils/processor.py
new file mode 100644
index 00000000..583ae0d3
--- /dev/null
+++ b/vllm/transformers_utils/processor.py
@@ -0,0 +1,45 @@
+import os
+from typing import Optional, Union
+
+from functools import lru_cache
+
+from transformers import AutoProcessor
+
+from vllm.logger import init_logger
+
+logger = init_logger(__name__)
+
+def get_processor(
+    processor_name: str,
+    *args,
+    trust_remote_code: bool = False,
+    revision: Optional[str] = None,
+    **kwargs,
+) :
+    """Gets a processor for the given model name via HuggingFace."""
+    try:
+        processor = AutoProcessor.from_pretrained(
+            processor_name,
+            *args,
+            trust_remote_code=trust_remote_code,
+            revision=revision,
+            **kwargs)
+    except ValueError as e:
+        # If the error pertains to the processor class not existing or not
+        # currently being imported, suggest using the --trust-remote-code flag.
+        # Unlike AutoTokenizer, AutoProcessor does not separate such errors
+        if not trust_remote_code:
+            err_msg = (
+                "Failed to load the processor. If the processor is "
+                "a custom processor not yet available in the HuggingFace "
+                "transformers library, consider setting "
+                "`trust_remote_code=True` in LLM or using the "
+                "`--trust-remote-code` flag in the CLI.")
+            raise RuntimeError(err_msg) from e
+        else:
+            raise e
+
+    return processor
+
+
+cached_get_processor = lru_cache(get_processor)
diff --git a/vllm/utils.py b/vllm/utils.py
index ce55253c..593f14c3 100644
--- a/vllm/utils.py
+++ b/vllm/utils.py
@@ -4,6 +4,7 @@ import enum
 import gc
 import glob
 import os
+from io import BytesIO  
 import socket
 import subprocess
 import tempfile
@@ -16,10 +17,14 @@ from platform import uname
 from typing import (Any, AsyncIterator, Awaitable, Callable, Dict, Generic,
                     Hashable, List, Optional, OrderedDict, Tuple, TypeVar,
                     Union)
+from urllib.parse import urlparse
+from urllib.request import urlopen
 
 import psutil
+import requests
 import torch
 from packaging.version import Version, parse
+from PIL import Image
 
 import vllm.envs as envs
 from vllm.logger import enable_trace_function_call, init_logger
@@ -276,6 +281,54 @@ def get_ip() -> str:
     return "0.0.0.0"
 
 
+def get_image(url: str) -> Image.Image:
+    """Retrieves an image from a data URL or an online resource.
+
+    The returned image should be used like a context manager to ensure
+    proper disposal of the underlying buffer.
+    """
+    # Avoid circular import
+    from vllm import __version__ as VLLM_VERSION
+
+    url_components = urlparse(url)
+    if url_components.scheme == 'data':
+        return Image.open(urlopen(url))
+
+    headers = {"User-Agent": f"vLLM/{VLLM_VERSION}"}
+    response = requests.get(url, headers=headers, stream=True)
+    response.raise_for_status()
+
+    return Image.open(response.raw)
+
+
+get_image_async = make_async(get_image)
+
+def get_image_size(url: str):
+    """Retrieves the image size from a data URL or an online resource.
+    """
+    # Avoid circular import
+    from vllm import __version__ as VLLM_VERSION
+
+    url_components = urlparse(url)
+    if url_components.scheme == 'data':
+        with Image.open(urlopen(url)) as img:
+            img_size = img.size  
+            return img_size  
+
+    headers = {"User-Agent": f"vLLM/{VLLM_VERSION}"}
+    response = requests.get(url, headers=headers, stream=True)
+    response.raise_for_status()
+
+    content_type = response.headers.get('Content-Type')  
+    if content_type and 'image' in content_type:  
+        image_data = response.content  
+        with Image.open(BytesIO(image_data)) as img:  
+            # This may raise an exception if not enough data is provided for certain image types  
+            img_size = img.size  
+            return img_size  
+    else:  
+        raise ValueError("The URL does not point to a valid image") 
+
 def get_distributed_init_method(ip: str, port: int) -> str:
     # Brackets are not permitted in ipv4 addresses,
     # see https://github.com/python/cpython/issues/103848
diff --git a/vllm/worker/model_runner.py b/vllm/worker/model_runner.py
index bbb1f520..6b2cbc43 100644
--- a/vllm/worker/model_runner.py
+++ b/vllm/worker/model_runner.py
@@ -1,11 +1,13 @@
 import contextlib
 import time
+from collections import defaultdict
 from enum import IntEnum
 from typing import Dict, List, NamedTuple, Optional, Set, Tuple
 
 import numpy as np
 import torch
 import torch.nn as nn
+from PIL import Image
 
 from vllm.attention import (AttentionMetadata, AttentionMetadataPerStage,
                             get_attn_backend)
@@ -20,11 +22,12 @@ from vllm.lora.request import LoRARequest
 from vllm.lora.worker_manager import LRUCacheWorkerLoRAManager
 from vllm.model_executor import SamplingMetadata
 from vllm.model_executor.model_loader import get_model
-from vllm.sampling_params import SamplingParams
-from vllm.sequence import (MultiModalData, SamplerOutput, SequenceData,
-                           SequenceGroupMetadata)
-from vllm.utils import (CudaMemoryProfiler, is_hip, is_pin_memory_available,
-                        make_tensor_with_pad)
+from vllm.sampling_params import SamplingParams, SamplingType
+from vllm.sequence import (ImageFeatureData, ImagePixelData, SamplerOutput,
+                           SequenceData, SequenceGroupMetadata)
+from vllm.utils import (CudaMemoryProfiler, async_tensor_h2d, is_hip,
+                        is_pin_memory_available, make_tensor_with_pad,
+                        maybe_expand_dim)
 
 logger = init_logger(__name__)
 
@@ -47,7 +50,7 @@ class PreparePromptMetadata(NamedTuple):
     lora_index_mapping: List[int]
     lora_prompt_mapping: List[int]
     lora_requests: Set[LoRARequest]
-    multi_modal_input: Optional[torch.Tensor]
+    multi_modal_kwargs: Dict[str, torch.Tensor]
     slot_mapping: List[int]
 
     @classmethod
@@ -61,7 +64,7 @@ class PreparePromptMetadata(NamedTuple):
             lora_index_mapping=[],
             lora_prompt_mapping=[],
             lora_requests=set(),
-            multi_modal_input=None,
+            multi_modal_kwargs={},
             slot_mapping=[],
         )
 
@@ -234,7 +237,8 @@ class ModelRunner:
         context_lens: List[int] = []
         query_lens: List[int] = []
         prefix_block_tables: List[List[int]] = []
-        multi_modal_input_list: List[torch.Tensor] = []
+        multi_modal_kwargs_list: Dict[str,
+                                      List[torch.Tensor]] = defaultdict(list)
 
         if len(seq_group_metadata_list) == 0:
             return PreparePromptMetadata.empty()
@@ -303,9 +307,8 @@ class ModelRunner:
                 (seq_len - context_len
                  if seq_group_metadata.sampling_params.prompt_logprobs else 1))
 
-            if seq_group_metadata.multi_modal_data:
-                multi_modal_input_list.append(
-                    seq_group_metadata.multi_modal_data.data)
+            for k, v in seq_group_metadata.multi_modal_kwargs.items():
+                multi_modal_kwargs_list[k].append(v)
 
             if seq_group_metadata.block_tables is None:
                 # During memory profiling, the block tables are not initialized
@@ -345,15 +348,6 @@ class ModelRunner:
                                            dtype=torch.int,
                                            device=self.device)
 
-        if multi_modal_input_list:
-            assert self.vision_language_config, (
-                "Multi-modal inputs are only supported by "
-                "vision language models.")
-            multi_modal_input = torch.cat(multi_modal_input_list,
-                                          dim=0).to(self.device)
-        else:
-            multi_modal_input = None
-
         # Prepare prefix block tables
         max_prompt_block_table_len = max(len(t) for t in prefix_block_tables)
         block_tables = make_tensor_with_pad(
@@ -403,6 +397,12 @@ class ModelRunner:
             use_cuda_graph=False,
         )
 
+        model_dtype = self.model_config.dtype
+        multi_modal_kwargs = {
+            k: torch.cat(v, dim=0).to(self.device, dtype=model_dtype)
+            for k, v in multi_modal_kwargs_list.items()
+        }
+
         return PreparePromptMetadata(
             input_tokens=input_tokens,
             input_positions=input_positions,
@@ -412,7 +412,7 @@ class ModelRunner:
             lora_index_mapping=lora_index_mapping,
             lora_prompt_mapping=lora_prompt_mapping,
             lora_requests=lora_requests,
-            multi_modal_input=multi_modal_input,
+            multi_modal_kwargs=multi_modal_kwargs,
             slot_mapping=slot_mapping,
         )
 
@@ -564,7 +564,7 @@ class ModelRunner:
                 lora_index_mapping,
                 lora_prompt_mapping,
                 lora_requests,
-                multi_modal_input,
+                multi_modal_kwargs,
                 slot_mapping,
             ) = self._prepare_prompt(prefill_reqs)
             (
@@ -632,7 +632,7 @@ class ModelRunner:
                 sampling_metadata.selected_token_indices,
                 "lora_requests": lora_requests,
                 "lora_mapping": lora_mapping,
-                "multi_modal_input": multi_modal_input,
+                "multi_modal_kwargs": multi_modal_kwargs,
                 "num_prefill_tokens": num_prefill_tokens,
                 "num_decode_tokens": num_decode_tokens,
                 "slot_mapping": slot_mapping,
@@ -663,7 +663,7 @@ class ModelRunner:
                 "selected_token_indices")
             lora_mapping = metadata_dict.pop("lora_mapping")
             lora_requests = metadata_dict.pop("lora_requests")
-            multi_modal_input = metadata_dict.pop("multi_modal_input")
+            multi_modal_kwargs = metadata_dict.pop("multi_modal_kwargs")
             num_prefill_tokens = metadata_dict.pop("num_prefill_tokens")
             num_decode_tokens = metadata_dict.pop("num_decode_tokens")
             batch_type = metadata_dict.pop("batch_type")
@@ -703,7 +703,7 @@ class ModelRunner:
 
         return (input_tokens, input_positions, attn_metadata,
                 sampling_metadata, lora_requests, lora_mapping,
-                multi_modal_input)
+                multi_modal_kwargs)
 
     @torch.inference_mode()
     def execute_model(
@@ -712,7 +712,7 @@ class ModelRunner:
         kv_caches: List[torch.Tensor],
     ) -> Optional[SamplerOutput]:
         (input_tokens, input_positions, attn_metadata, sampling_metadata,
-         lora_requests, lora_mapping, multi_modal_input
+         lora_requests, lora_mapping, multi_modal_kwargs
          ) = self.prepare_input_tensors(seq_group_metadata_list)
 
         if self.lora_config:
@@ -726,15 +726,14 @@ class ModelRunner:
             model_executable = self.graph_runners[graph_batch_size]
         else:
             model_executable = self.model
-        execute_model_kwargs = {
-            "input_ids": input_tokens,
-            "positions": input_positions,
-            "kv_caches": kv_caches,
-            "attn_metadata": attn_metadata,
-        }
-        if self.vision_language_config:
-            execute_model_kwargs.update({"image_input": multi_modal_input})
-        hidden_states = model_executable(**execute_model_kwargs)
+
+        hidden_states = model_executable(
+            input_ids=input_tokens,
+            positions=input_positions,
+            kv_caches=kv_caches,
+            attn_metadata=attn_metadata,
+            **multi_modal_kwargs,
+        )
 
         # Compute the logits.
         logits = self.model.compute_logits(hidden_states, sampling_metadata)
@@ -797,8 +796,8 @@ class ModelRunner:
         for group_id in range(max_num_seqs):
             seq_len = (max_num_batched_tokens // max_num_seqs +
                        (group_id < max_num_batched_tokens % max_num_seqs))
-            seq_data, fake_multi_modal_input = _prepare_fake_inputs(
-                seq_len, self.vision_language_config)
+            seq_data, multi_modal_kwargs = _prepare_fake_inputs(
+                seq_len, self.model_config, self.vision_language_config)
             seq = SequenceGroupMetadata(
                 request_id=str(group_id),
                 is_prompt=True,
@@ -807,7 +806,7 @@ class ModelRunner:
                 block_tables=None,
                 lora_request=dummy_lora_requests_per_seq[group_id]
                 if dummy_lora_requests_per_seq else None,
-                multi_modal_data=fake_multi_modal_input,
+                multi_modal_kwargs=multi_modal_kwargs,
             )
             seqs.append(seq)
 
@@ -1080,18 +1079,39 @@ def _get_graph_batch_size(batch_size: int) -> int:
 
 
 def _prepare_fake_inputs(
-        seq_len: int, vision_language_config: Optional[VisionLanguageConfig]):
+        seq_len: int, model_config: ModelConfig,
+        vision_language_config: Optional[VisionLanguageConfig]):
     """Prepare fake inputs for profile run."""
     if vision_language_config:
         prompt_tokens = [
             vision_language_config.image_token_id
         ] * vision_language_config.image_feature_size + [0] * (
             seq_len - vision_language_config.image_feature_size)
-        fake_image_input = MultiModalData(
-            type=MultiModalData.Type.IMAGE,
-            data=torch.zeros(vision_language_config.image_input_shape,
-                             dtype=torch.float16))
+
+        if vision_language_config.image_processor is None:
+            values_dtype = torch.float16
+        else:
+            values_dtype = torch.uint8
+
+        values = torch.zeros(vision_language_config.image_input_shape,
+                             dtype=values_dtype)
+
+        config_input_type = vision_language_config.image_input_type
+        ImageInputType = VisionLanguageConfig.ImageInputType
+
+        if config_input_type == ImageInputType.PIXEL_VALUES:
+            values_arr = values.squeeze(dim=0).permute((1, 2, 0)).numpy()
+            image = Image.fromarray(values_arr, mode="RGB")
+            fake_mm_data = ImagePixelData(image)
+        elif config_input_type == ImageInputType.IMAGE_FEATURES:
+            fake_mm_data = ImageFeatureData(values)
+        else:
+            raise NotImplementedError
+
+        fake_mm_kwargs = fake_mm_data.get_input_kwargs(model_config,
+                                                       vision_language_config)
     else:
         prompt_tokens = [0] * seq_len
-        fake_image_input = None
-    return SequenceData(prompt_tokens), fake_image_input
+        fake_mm_kwargs = {}
+
+    return SequenceData(prompt_tokens), fake_mm_kwargs
