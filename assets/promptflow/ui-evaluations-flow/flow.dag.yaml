inputs:
  question:
    type: string
    default: ""
    is_chat_input: false
  answer:
    type: string
    default: ""
    is_chat_input: false
  context:
    type: string
    default: ""
    is_chat_input: false
  ground_truth:
    type: string
    default: ""
    is_chat_input: false
  metrics:
    type: string
    default: gpt_groundedness,f1_score,gpt_fluency,gpt_coherence,gpt_similarity,gpt_relevance,violence,self_harm,hate_unfairness,sexual
    is_chat_input: false
  threshold:
    type: int
    default: 4
    is_chat_input: false
  groundedness_service_flight:
    type: string
    default: true
    is_chat_input: false
  deployment_name:
    type: string
    default: "gpt-4"
    is_chat_input: false
  subscription_id:
    type: string
    default: ""
    is_chat_input: false
  resource_group:
    type: string
    default: ""
    is_chat_input: false
  project_name:
    type: string
    default: ""
    is_chat_input: false
outputs:
  gpt_coherence:
    type: string
    reference: ${concat_scores.output.gpt_coherence}
    evaluation_only: false
    is_chat_output: false
  gpt_relevance:
    type: string
    reference: ${concat_scores.output.gpt_relevance}
    evaluation_only: false
    is_chat_output: false
  self_harm:
    type: string
    reference: ${concat_scores.output.self_harm}
    evaluation_only: false
    is_chat_output: false
  violence_reason:
    type: string
    reference: ${concat_scores.output.violence_reason}
    evaluation_only: false
    is_chat_output: false
  sexual_reason:
    type: string
    reference: ${concat_scores.output.sexual_reason}
    evaluation_only: false
    is_chat_output: false
  hate_unfairness:
    type: string
    reference: ${concat_scores.output.hate_unfairness}
    evaluation_only: false
    is_chat_output: false
  sexual_score:
    type: string
    reference: ${concat_scores.output.sexual_score}
    evaluation_only: false
    is_chat_output: false
  violence_score:
    type: string
    reference: ${concat_scores.output.violence_score}
    evaluation_only: false
    is_chat_output: false
  gpt_groundedness:
    type: string
    reference: ${concat_scores.output.gpt_groundedness}
    evaluation_only: false
    is_chat_output: false
  gpt_groundedness_reason:
    type: string
    reference: ${concat_scores.output.gpt_groundedness_reason}
    evaluation_only: false
    is_chat_output: false
  gpt_similarity:
    type: string
    reference: ${concat_scores.output.gpt_similarity}
    evaluation_only: false
    is_chat_output: false
  gpt_fluency:
    type: string
    reference: ${concat_scores.output.gpt_fluency}
    evaluation_only: false
    is_chat_output: false
  sexual:
    type: string
    reference: ${concat_scores.output.sexual}
    evaluation_only: false
    is_chat_output: false
  self_harm_score:
    type: string
    reference: ${concat_scores.output.self_harm_score}
    evaluation_only: false
    is_chat_output: false
  hate_unfairness_reason:
    type: string
    reference: ${concat_scores.output.hate_unfairness_reason}
    evaluation_only: false
    is_chat_output: false
  violence:
    type: string
    reference: ${concat_scores.output.violence}
    evaluation_only: false
    is_chat_output: false
  hate_unfairness_score:
    type: string
    reference: ${concat_scores.output.hate_unfairness_score}
    evaluation_only: false
    is_chat_output: false
  self_harm_reason:
    type: string
    reference: ${concat_scores.output.self_harm_reason}
    evaluation_only: false
    is_chat_output: false
  f1_score:
    type: string
    reference: ${concat_scores.output.f1_score}
    evaluation_only: false
    is_chat_output: false
nodes:
- name: run_f1_score_evaluator
  type: python
  source:
    type: code
    path: f1_score.py
  inputs:
    answer: ${inputs.answer}
    ground_truth: ${inputs.ground_truth}
  aggregation: false
  activate:
    when: ${validate_input.output.f1_score}
    is: true
  use_variants: false
- name: run_gpt_coherence_evaluator
  type: python
  source:
    type: code
    path: run_gpt_coherence_evaluator.py
  inputs:
    connection:
    deployment_name: ${inputs.deployment_name}
    question: ${inputs.question}
    answer: ${inputs.answer}
  aggregation: false
  activate:
    when: ${validate_input.output.gpt_coherence}
    is: true
  use_variants: false
- name: run_gpt_fluency_evaluator
  type: python
  source:
    type: code
    path: run_gpt_fluency_evaluator.py
  inputs:
    connection:
    deployment_name: ${inputs.deployment_name}
    question: ${inputs.question}
    answer: ${inputs.answer}
  aggregation: false
  activate:
    when: ${validate_input.output.gpt_fluency}
    is: true
  use_variants: false
- name: run_gpt_relevance_evaluator
  type: python
  source:
    type: code
    path: run_gpt_relevance_evaluator.py
  inputs:
    connection:
    deployment_name: ${inputs.deployment_name}
    question: ${inputs.question}
    answer: ${inputs.answer}
    context: ${inputs.context}
  aggregation: false
  activate:
    when: ${validate_input.output.gpt_coherence}
    is: true
  use_variants: false
- name: run_gpt_similarity_evaluator
  type: python
  source:
    type: code
    path: run_gpt_similarity_evaluator.py
  inputs:
    connection:
    deployment_name: ${inputs.deployment_name}
    question: ${inputs.question}
    answer: ${inputs.answer}
    ground_truth: ${inputs.ground_truth}
  aggregation: false
  activate:
    when: ${validate_input.output.gpt_coherence}
    is: true
  use_variants: false
- name: aggregate_variants_results
  type: python
  source:
    type: code
    path: aggregate_variants_results.py
  inputs:
    results: ${concat_scores.output}
    selected_metrics: ${select_metrics.output}
    thresholds: ${inputs.threshold}
  aggregation: true
  use_variants: false
- name: select_metrics
  type: python
  source:
    type: code
    path: select_metrics.py
  inputs:
    metrics: ${inputs.metrics}
- name: validate_input
  type: python
  source:
    type: code
    path: validate_input.py
  inputs:
    answer: ${inputs.answer}
    context: ${inputs.context}
    ground_truth: ${inputs.ground_truth}
    question: ${inputs.question}
    selected_metrics: ${select_metrics.output}
  aggregation: false
  use_variants: false
- name: run_hate_unfairness_evaluator
  type: python
  source:
    type: code
    path: run_hate_unfairness_evaluator.py
  inputs:
    question: ${inputs.question}
    answer: ${inputs.answer}
  aggregation: false
  activate:
    when: ${validate_input.output.hate_unfairness}
    is: true
  use_variants: false
- name: run_self_harm_evaluator
  type: python
  source:
    type: code
    path: run_self_harm_evaluator.py
  inputs:
    subscription_id: ${inputs.subscription_id}
    resource_group: ${inputs.resource_group}
    project_name: ${inputs.project_name}
    question: ${inputs.question}
    answer: ${inputs.answer}
  aggregation: false
  activate:
    when: ${validate_input.output.self_harm}
    is: true
  use_variants: false
- name: run_sexual_evaluator
  type: python
  source:
    type: code
    path: run_sexual_evaluator.py
  inputs:
    subscription_id: ${inputs.subscription_id}
    resource_group: ${inputs.resource_group}
    project_name: ${inputs.project_name}
    question: ${inputs.question}
    answer: ${inputs.answer}
  aggregation: false
  activate:
    when: ${validate_input.output.sexual}
    is: true
  use_variants: false
- name: run_violence_evaluator
  type: python
  source:
    type: code
    path: run_violence_evaluator.py
  inputs:
    subscription_id: ${inputs.subscription_id}
    resource_group: ${inputs.resource_group}
    project_name: ${inputs.project_name}
    question: ${inputs.question}
    answer: ${inputs.answer}
  aggregation: false
  activate:
    when: ${validate_input.output.violence}
    is: true
  use_variants: false
- name: concat_scores
  type: python
  source:
    type: code
    path: concat_results.py
  inputs:
    f1_score_results: ${run_f1_score_evaluator.output}
    groundedness_results: ${parse_groundedness_response.output}
    gpt_coherence_results: ${run_gpt_coherence_evaluator.output}
    gpt_fluency_results: ${run_gpt_fluency_evaluator.output}
    gpt_relevance_results: ${run_gpt_relevance_evaluator.output}
    gpt_similarity_results: ${run_gpt_similarity_evaluator.output}
    hate_unfairness_results: ${run_hate_unfairness_evaluator.output}
    self_harm_results: ${run_self_harm_evaluator.output}
    sexual_results: ${run_sexual_evaluator.output}
    violence_results: ${run_violence_evaluator.output}
  aggregation: false
  use_variants: false
- name: validate_service
  type: python
  source:
    type: code
    path: validate_groundedness_service.py
  inputs:
    flight: ${inputs.groundedness_service_flight}
    selected_metrics: ${select_metrics.output}
    validated_input: ${validate_input.output}
  aggregation: false
  use_variants: false
- name: construct_groundedness_request
  type: python
  source:
    type: code
    path: construct_groundedness_request.py
  inputs:
    answer: ${inputs.answer}
    context: ${inputs.context}
    question: ${inputs.question}
  aggregation: false
  activate:
    when: ${validate_service.output.groundedness_service}
    is: true
  use_variants: false
- name: call_groundedness_service
  type: python
  source:
    type: code
    path: call_groundedness_service.py
  inputs:
    request_body: ${construct_groundedness_request.output}
  aggregation: false
  activate:
    when: ${validate_service.output.groundedness_service}
    is: true
  use_variants: false
- name: parse_groundedness_response
  type: python
  source:
    type: code
    path: parse_groundedness_response.py
  inputs:
    batch_response: ${call_groundedness_service.output}
    is_service_available: ${validate_service.output}
    llm_groundedness_response: ${gpt_groundedness.output}
  aggregation: false
  use_variants: false
- name: gpt_groundedness
  type: python
  source:
    type: code
    path: run_gpt_groundedness_evaluator.py
  inputs:
    connection:
    deployment_name: ${inputs.deployment_name}
    answer: ${inputs.answer}
    context: ${inputs.context}
  activate:
    when: ${validate_service.output.groundedness_prompt}
    is: true
  use_variants: false
node_variants: {}
environment_variables:
  PF_WORKER_COUNT: 2
environment:
  python_requirements_txt: requirements.txt