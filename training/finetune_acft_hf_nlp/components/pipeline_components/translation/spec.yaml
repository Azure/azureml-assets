$schema: https://azuremlschemas.azureedge.net/latest/pipelineComponent.schema.json
name: translation_pipeline
version: 0.0.1
type: pipeline
display_name: Translation Pipeline
description: Pipeline component for translation
inputs:
  # Compute parameters
  instance_type_model_selector:
    type: string
    default: Standard_ds12_v2
    optional: false
    description: SKU used for model_selector
  instance_type_preprocess:
    type: string
    default: Standard_ds12_v2
    optional: false
    description: SKU used for preprocess
  instance_type_finetune:
    type: string
    default: Standard_nd40rs_v2
    optional: false
    description: SKU used for finetune
  instance_type_model_evaluation:
    type: string
    default: Standard_nd40rs_v2
    optional: false
    description: SKU used for model_evaluation
  num_nodes_finetune:
    type: integer
    default: 1
    optional: true
    description: number of nodes to be used for finetuning (used for distributed training)
  number_of_gpu_to_use_finetuning:
    type: integer
    default: 8
    optional: true
    description: number of gpus to be used per node for finetuning, should be equal
      to number of gpu per node in the compute SKU used for finetune

  # ModelSelector parameters
  huggingface_id:
    type: string
    description: Input HuggingFace model id. Incase of continual finetuning provide proper id. Models from Hugging Face are subject to third party license terms available on the Hugging Face model details page. It is your responsibility to comply with the model's license terms.
    optional: true

  # Continual-Finetuning model path
  pytorch_model_path:
    type: custom_model
    optional: true
    description: Input folder path containing pytorch model for further finetuning.
      Proper model/huggingface id must be passed.

  mlflow_model_path:
    type: mlflow_model
    optional: true
    description: Input folder path containing mlflow model for further finetuning.
      Proper model/huggingface id must be passed.

  # Preprocessing parameters
  source_lang:
    type: string
    optional: false
    description: key for source language text in an example

  target_lang:
    type: string
    optional: false
    description: key for target language text in an example

  batch_size:
    type: integer
    optional: true
    default: 1000
    description: Number of examples to batch before calling the tokenization function

  # Dataset path Parameters
  train_file_path:
    type: uri_file
    optional: true
    description: Enter the train file path

  validation_file_path:
    type: uri_file
    optional: true
    description: Enter the validation file path

  test_file_path:
    type: uri_file
    optional: true
    description: Enter the test file path

  train_mltable_path:
    type: mltable
    optional: true
    description: Enter the train mltable path

  validation_mltable_path:
    type: mltable
    optional: true
    description: Enter the validation mltable path

  test_mltable_path:
    type: mltable
    optional: true
    description: Enter the test mltable path

  # Finetuning parameters
  # Lora parameters
  apply_lora:
    type: string
    enum:
      - "true"
      - "false"
    default: "false"
    optional: true
    description: lora enabled

  merge_lora_weights:
    type: string
    enum:
      - "true"
      - "false"
    default: "true"
    optional: true
    description: if set to true, the lora trained weights will be merged to base model before saving

  lora_alpha:
    type: integer
    default: 128
    optional: true
    description: lora attention alpha

  lora_r:
    type: integer
    default: 8
    optional: true
    description: lora dimension

  lora_dropout:
    type: number
    default: 0.0
    optional: true
    description: lora dropout value

  # Training parameters
  num_train_epochs:
    type: integer
    default: 1
    optional: true
    description: training epochs

  max_steps:
    type: integer
    default: -1
    optional: true
    description: If set to a positive number, the total number of training steps to perform. Overrides 'epochs'. In case of using a finite iterable dataset the training may stop before reaching the set number of steps when all data is exhausted.

  per_device_train_batch_size:
    type: integer
    default: 1
    optional: true
    description: Train batch size

  per_device_eval_batch_size:
    type: integer
    default: 1
    optional: true
    description: Validation batch size

  auto_find_batch_size:
    type: string
    enum:
      - "true"
      - "false"
    default: "false"
    optional: true
    description: Flag to enable auto finding of batch size. If the provided 'per_device_train_batch_size' goes into Out Of Memory (OOM) enabling auto_find_batch_size will find the correct batch size by iteratively reducing 'per_device_train_batch_size' by a factor of 2 till the OOM is fixed

  optim:
    type: string
    default: adamw_hf
    optional: true
    enum:
      - adamw_hf
      - adamw_torch
      # - adamw_apex_fused
      - adafactor
    description: Optimizer to be used while training

  learning_rate:
    type: number
    default: 0.00002
    optional: true
    description: Start learning rate. Defaults to linear scheduler.

  warmup_steps:
    type: integer
    default: 0
    optional: true
    description: Number of steps used for a linear warmup from 0 to learning_rate

  weight_decay:
    type: number
    default: 0.0
    optional: true
    description: The weight decay to apply (if not zero) to all layers except all bias and LayerNorm weights in AdamW optimizer

  adam_beta1:
    type: number
    default: 0.9
    optional: true
    description: The beta1 hyperparameter for the AdamW optimizer

  adam_beta2:
    type: number
    default: 0.999
    optional: true
    description: The beta2 hyperparameter for the AdamW optimizer

  adam_epsilon:
    type: number
    default: 1e-8
    optional: true
    description: The epsilon hyperparameter for the AdamW optimizer

  gradient_accumulation_steps:
    type: integer
    default: 1
    optional: true
    description: Number of updates steps to accumulate the gradients for, before performing a backward/update pass

  lr_scheduler_type:
    type: string
    default: linear
    optional: true
    enum:
      - linear
      - cosine
      - cosine_with_restarts
      - polynomial
      - constant
      - constant_with_warmup
    description: The scheduler type to use

  precision:
    type: string
    enum:
      - "32"
      - "16"
    default: "32"
    optional: true
    description: Apply mixed precision training. This can reduce memory footprint by performing operations in half-precision.

  seed:
    type: integer
    default: 42
    optional: true
    description: Random seed that will be set at the beginning of training

  enable_full_determinism:
    type: string
    enum:
      - "true"
      - "false"
    default: "false"
    optional: true
    description: Ensure reproducible behavior during distributed training

  dataloader_num_workers:
    type: integer
    default: 0
    optional: true
    description: Number of subprocesses to use for data loading. 0 means that the data will be loaded in the main process.

  ignore_mismatched_sizes:
    type: string
    enum:
      - "true"
      - "false"
    default: "true"
    optional: true
    description: Whether or not to raise an error if some of the weights from the checkpoint do not have the same size as the weights of the model

  max_grad_norm:
    type: number
    default: 1.0
    optional: true
    description: "Maximum gradient norm (for gradient clipping)"

  evaluation_strategy:
    type: string
    default: epoch
    optional: true
    enum:
      - epoch
      - steps
    description: The evaluation strategy to adopt during training

  evaluation_steps_interval:
    type: number
    default: 0.0
    optional: true
    description: The evaluation steps in fraction of an epoch steps to adopt during training. Overwrites evaluation_steps if not 0.

  eval_steps:
    type: integer
    default: 500
    optional: true
    description: Number of update steps between two evals if evaluation_strategy='steps'

  logging_strategy:
    type: string
    default: epoch
    optional: true
    enum:
      - epoch
      - steps
    description: The logging strategy to adopt during training.

  logging_steps:
    type: integer
    default: 500
    optional: true
    description: Number of update steps between two logs if logging_strategy='steps'

  metric_for_best_model:
    type: string
    default: loss
    optional: true
    enum:
      - loss
      - bleu
    description: Specify the metric to use to compare two different models

  resume_from_checkpoint:
    type: string
    default: "false"
    optional: true
    enum:
      - "true"
      - "false"
    description: Loads Optimizer, Scheduler and Trainer state for finetuning if true

  save_total_limit:
    type: integer
    default: -1
    optional: true
    description: If a value is passed, will limit the total amount of checkpoints. Deletes the older checkpoints in output_dir. If the value is -1 saves all checkpoints"

  # Early Stopping Parameters
  apply_early_stopping:
    type: string
    default: "false"
    optional: true
    enum:
      - "true"
      - "false"
    description: Enable early stopping

  early_stopping_patience:
    type: integer
    default: 1
    optional: true
    description: Stop training when the specified metric worsens for early_stopping_patience evaluation calls

  early_stopping_threshold:
    type: number
    default: 0.0
    optional: true
    description: Denotes how much the specified metric must improve to satisfy early stopping conditions

  # Deepspeed Parameters
  apply_deepspeed:
    type: string
    enum:
      - "true"
      - "false"
    default: "false"
    optional: true
    description: If set to true, will enable deepspeed for training

  deepspeed:
    type: uri_file
    optional: true
    description: Deepspeed config to be used for finetuning

  # ORT Parameters
  apply_ort:
    type: string
    enum:
      - "true"
      - "false"
    default: "false"
    optional: true
    description: If set to true, will use the ONNXRunTime training

  # MLFlow Parameters
  save_as_mlflow_model:
    type: string
    enum:
      - "true"
      - "false"
    default: "true"
    optional: true
    description: If set to true, will save as mlflow model with pyfunc as flavour

  # Model Evaluation parameters
  evaluation_config:
    type: uri_file
    optional: true
    description: Additional parameters for Computing Metrics

outputs:
  pytorch_model_folder:
    type: uri_folder
    description: Output dir to save the finetune model and other metadata

  mlflow_model_folder:
    type: mlflow_model
    description: Output dir to save the finetune model as mlflow model

  evaluation_result:
    type: uri_folder
    description: Test Data Evaluation Results

settings:
  default_compute: azureml:serverless

jobs:
  translation_model_import:
    type: command
    component: azureml://registries/azureml/components/translation_model_import/versions/0.0.1
    resources:
      instance_type: ${{parent.inputs.instance_type_model_selector}}
    inputs:
      huggingface_id: ${{parent.inputs.huggingface_id}}
      pytorch_model_path: ${{parent.inputs.pytorch_model_path}}
      mlflow_model_path: ${{parent.inputs.mlflow_model_path}}
  translation_datapreprocess:
    type: command
    component: azureml://registries/azureml/components/translation_datapreprocess/versions/0.0.1
    resources:
      instance_type: ${{parent.inputs.instance_type_preprocess}}
    inputs:
      source_lang: ${{parent.inputs.source_lang}}
      target_lang: ${{parent.inputs.target_lang}}
      batch_size: ${{parent.inputs.batch_size}}
      train_file_path: ${{parent.inputs.train_file_path}}
      validation_file_path: ${{parent.inputs.validation_file_path}}
      test_file_path: ${{parent.inputs.test_file_path}}
      train_mltable_path: ${{parent.inputs.train_mltable_path}}
      validation_mltable_path: ${{parent.inputs.validation_mltable_path}}
      test_mltable_path: ${{parent.inputs.test_mltable_path}}
      model_selector_output: ${{parent.jobs.translation_model_import.outputs.output_dir}}
  translation_finetune:
    type: command
    component: azureml://registries/azureml/components/translation_finetune/versions/0.0.1
    distribution:
      type: pytorch
      process_count_per_instance: ${{parent.inputs.number_of_gpu_to_use_finetuning}}
    resources:
      instance_type: ${{parent.inputs.instance_type_finetune}}
      instance_count: ${{parent.inputs.num_nodes_finetune}}
    inputs:
      apply_lora: ${{parent.inputs.apply_lora}}
      merge_lora_weights: ${{parent.inputs.merge_lora_weights}}
      lora_alpha: ${{parent.inputs.lora_alpha}}
      lora_r: ${{parent.inputs.lora_r}}
      lora_dropout: ${{parent.inputs.lora_dropout}}
      num_train_epochs: ${{parent.inputs.num_train_epochs}}
      max_steps: ${{parent.inputs.max_steps}}
      per_device_train_batch_size: ${{parent.inputs.per_device_train_batch_size}}
      per_device_eval_batch_size: ${{parent.inputs.per_device_eval_batch_size}}
      auto_find_batch_size: ${{parent.inputs.auto_find_batch_size}}
      optim: ${{parent.inputs.optim}}
      learning_rate: ${{parent.inputs.learning_rate}}
      warmup_steps: ${{parent.inputs.warmup_steps}}
      weight_decay: ${{parent.inputs.weight_decay}}
      adam_beta1: ${{parent.inputs.adam_beta1}}
      adam_beta2: ${{parent.inputs.adam_beta2}}
      adam_epsilon: ${{parent.inputs.adam_epsilon}}
      gradient_accumulation_steps: ${{parent.inputs.gradient_accumulation_steps}}
      lr_scheduler_type: ${{parent.inputs.lr_scheduler_type}}
      precision: ${{parent.inputs.precision}}
      seed: ${{parent.inputs.seed}}
      enable_full_determinism: ${{parent.inputs.enable_full_determinism}}
      dataloader_num_workers: ${{parent.inputs.dataloader_num_workers}}
      ignore_mismatched_sizes: ${{parent.inputs.ignore_mismatched_sizes}}
      max_grad_norm: ${{parent.inputs.max_grad_norm}}
      evaluation_strategy: ${{parent.inputs.evaluation_strategy}}
      evaluation_steps_interval: ${{parent.inputs.evaluation_steps_interval}}
      eval_steps: ${{parent.inputs.eval_steps}}
      logging_strategy: ${{parent.inputs.logging_strategy}}
      logging_steps: ${{parent.inputs.logging_steps}}
      metric_for_best_model: ${{parent.inputs.metric_for_best_model}}
      resume_from_checkpoint: ${{parent.inputs.resume_from_checkpoint}}
      save_total_limit: ${{parent.inputs.save_total_limit}}
      apply_early_stopping: ${{parent.inputs.apply_early_stopping}}
      early_stopping_patience: ${{parent.inputs.early_stopping_patience}}
      early_stopping_threshold: ${{parent.inputs.early_stopping_threshold}}
      apply_deepspeed: ${{parent.inputs.apply_deepspeed}}
      deepspeed: ${{parent.inputs.deepspeed}}
      apply_ort: ${{parent.inputs.apply_ort}}
      save_as_mlflow_model: ${{parent.inputs.save_as_mlflow_model}}
      preprocess_output: ${{parent.jobs.translation_datapreprocess.outputs.output_dir}}
      model_selector_output: ${{parent.jobs.translation_model_import.outputs.output_dir}}
    outputs:
      pytorch_model_folder: ${{parent.outputs.pytorch_model_folder}}
      mlflow_model_folder: ${{parent.outputs.mlflow_model_folder}}
